
mb-i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a780  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800a960  0800a960  0001a960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af8c  0800af8c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800af8c  0800af8c  0001af8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af94  0800af94  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af94  0800af94  0001af94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af98  0800af98  0001af98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800af9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  200001e0  0800b17c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  0800b17c  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec40  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f8b  00000000  00000000  0003ee50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  00041de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001798  00000000  00000000  000436d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025499  00000000  00000000  00044e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a810  00000000  00000000  0006a301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e46a2  00000000  00000000  00084b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001691b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fc4  00000000  00000000  00169204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a948 	.word	0x0800a948

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800a948 	.word	0x0800a948

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <delay>:
	// return the pin
	return gpio;
}

// delay
void delay(uint32_t ms){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f001 fa31 	bl	80024b8 <HAL_Delay>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <lps22_start_oneshot>:
		LPS_CTRL_REG2);
		buf &= 0x04;
	}
}

void lps22_start_oneshot(I2C_HandleTypeDef *hi2c) {
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
	unsigned char buf;
	buf = i2c_read_word(hi2c, LPS22_I2C_ADDRESS, LPS_CTRL_REG2);
 8001066:	2211      	movs	r2, #17
 8001068:	215c      	movs	r1, #92	; 0x5c
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f001 f9a7 	bl	80023be <i2c_read_word>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
	buf |= 0x01;                                         //ONE_SHOT Set 1
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
	i2c_write_byte(hi2c, LPS22_I2C_ADDRESS, LPS_CTRL_REG2, buf);
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	2211      	movs	r2, #17
 8001080:	215c      	movs	r1, #92	; 0x5c
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f001 f956 	bl	8002334 <i2c_write_byte>
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <check_lps22>:
	lps22_reset(hi2c);                              //Wait for reset to complete
	i2c_write_byte(hi2c, LPS22_I2C_ADDRESS, LPS_CTRL_REG1, 0x02); //Low-pass filter disabled , output registers not updated until MSB and LSB have been read , Enable Block Data Update , Set Output Data Rate to 0
	return 1;
}

void check_lps22(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
	// check lps22
	if (device_ready(hi2c, LPS22_I2C_ADDRESS) == ok) {
 800109a:	215c      	movs	r1, #92	; 0x5c
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 f935 	bl	800230c <device_ready>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d104      	bne.n	80010b2 <check_lps22+0x22>
		println(huart, "\nLPS22 successfully initialized!");
 80010a8:	4906      	ldr	r1, [pc, #24]	; (80010c4 <check_lps22+0x34>)
 80010aa:	6838      	ldr	r0, [r7, #0]
 80010ac:	f000 fe2c 	bl	8001d08 <println>
	} else {
		println(huart, "\nLPS22 device not found!!");
	};
}
 80010b0:	e003      	b.n	80010ba <check_lps22+0x2a>
		println(huart, "\nLPS22 device not found!!");
 80010b2:	4905      	ldr	r1, [pc, #20]	; (80010c8 <check_lps22+0x38>)
 80010b4:	6838      	ldr	r0, [r7, #0]
 80010b6:	f000 fe27 	bl	8001d08 <println>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	0800a960 	.word	0x0800a960
 80010c8:	0800a984 	.word	0x0800a984

080010cc <lps22_print>:

void lps22_print(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b098      	sub	sp, #96	; 0x60
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	float PRESS_DATA = 0;
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	657b      	str	r3, [r7, #84]	; 0x54
	float TEMP_DATA = 0;
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	653b      	str	r3, [r7, #80]	; 0x50
	unsigned char u8Buf[3];
	char output[64];

	lps22_start_oneshot(hi2c); //Trigger one shot data acquisition
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffbb 	bl	800105e <lps22_start_oneshot>
	if ((i2c_read_byte(hi2c, LPS22_I2C_ADDRESS, LPS_STATUS) & 0x01) == 0x01) { //a new pressure data is generated
 80010e8:	2227      	movs	r2, #39	; 0x27
 80010ea:	215c      	movs	r1, #92	; 0x5c
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f001 f947 	bl	8002380 <i2c_read_byte>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d12b      	bne.n	8001154 <lps22_print+0x88>
		u8Buf[0] = i2c_read_byte(hi2c, LPS22_I2C_ADDRESS >> 1,
 80010fc:	2228      	movs	r2, #40	; 0x28
 80010fe:	212e      	movs	r1, #46	; 0x2e
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f001 f93d 	bl	8002380 <i2c_read_byte>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		LPS_PRESS_OUT_XL);
		u8Buf[1] = i2c_read_byte(hi2c, LPS22_I2C_ADDRESS >> 1,
 800110c:	2229      	movs	r2, #41	; 0x29
 800110e:	212e      	movs	r1, #46	; 0x2e
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f001 f935 	bl	8002380 <i2c_read_byte>
 8001116:	4603      	mov	r3, r0
 8001118:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		LPS_PRESS_OUT_L);
		u8Buf[2] = i2c_read_byte(hi2c, LPS22_I2C_ADDRESS >> 1,
 800111c:	222a      	movs	r2, #42	; 0x2a
 800111e:	212e      	movs	r1, #46	; 0x2e
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f001 f92d 	bl	8002380 <i2c_read_byte>
 8001126:	4603      	mov	r3, r0
 8001128:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		LPS_PRESS_OUT_H);
		PRESS_DATA = (float) ((u8Buf[2] << 16) + (u8Buf[1] << 8) + u8Buf[0])
 800112c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001130:	041a      	lsls	r2, r3, #16
 8001132:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	4413      	add	r3, r2
 800113a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800113e:	4413      	add	r3, r2
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001148:	eddf 6a26 	vldr	s13, [pc, #152]	; 80011e4 <lps22_print+0x118>
 800114c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001150:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
				/ 4096.0f;
	}
	if ((i2c_read_byte(hi2c, LPS22_I2C_ADDRESS, LPS_STATUS) & 0x02) == 0x02) { // a new pressure data is generated
 8001154:	2227      	movs	r2, #39	; 0x27
 8001156:	215c      	movs	r1, #92	; 0x5c
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f001 f911 	bl	8002380 <i2c_read_byte>
 800115e:	4603      	mov	r3, r0
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b02      	cmp	r3, #2
 8001166:	d11f      	bne.n	80011a8 <lps22_print+0xdc>
		u8Buf[0] = i2c_read_byte(hi2c, LPS22_I2C_ADDRESS, LPS_TEMP_OUT_L);
 8001168:	222b      	movs	r2, #43	; 0x2b
 800116a:	215c      	movs	r1, #92	; 0x5c
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f001 f907 	bl	8002380 <i2c_read_byte>
 8001172:	4603      	mov	r3, r0
 8001174:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		u8Buf[1] = i2c_read_byte(hi2c, LPS22_I2C_ADDRESS, LPS_TEMP_OUT_H);
 8001178:	222c      	movs	r2, #44	; 0x2c
 800117a:	215c      	movs	r1, #92	; 0x5c
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f001 f8ff 	bl	8002380 <i2c_read_byte>
 8001182:	4603      	mov	r3, r0
 8001184:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		TEMP_DATA = (float) ((u8Buf[1] << 8) + u8Buf[0]) / 100.0f;
 8001188:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8001192:	4413      	add	r3, r2
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119c:	eddf 6a12 	vldr	s13, [pc, #72]	; 80011e8 <lps22_print+0x11c>
 80011a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	}
	sprintf(output, "Pressure = %6.2f hPa , Temperature = %6.2f'C", PRESS_DATA,
 80011a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011aa:	f7ff f9f5 	bl	8000598 <__aeabi_f2d>
 80011ae:	4604      	mov	r4, r0
 80011b0:	460d      	mov	r5, r1
 80011b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80011b4:	f7ff f9f0 	bl	8000598 <__aeabi_f2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	f107 000c 	add.w	r0, r7, #12
 80011c0:	e9cd 2300 	strd	r2, r3, [sp]
 80011c4:	4622      	mov	r2, r4
 80011c6:	462b      	mov	r3, r5
 80011c8:	4908      	ldr	r1, [pc, #32]	; (80011ec <lps22_print+0x120>)
 80011ca:	f005 fdcb 	bl	8006d64 <siprintf>
			TEMP_DATA);
	println(huart, output);
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	4619      	mov	r1, r3
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f000 fd97 	bl	8001d08 <println>
}
 80011da:	bf00      	nop
 80011dc:	3758      	adds	r7, #88	; 0x58
 80011de:	46bd      	mov	sp, r7
 80011e0:	bdb0      	pop	{r4, r5, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	45800000 	.word	0x45800000
 80011e8:	42c80000 	.word	0x42c80000
 80011ec:	0800a9a0 	.word	0x0800a9a0

080011f0 <lsm6d_print>:
static float angular_rate_mdps[3];
static float temperature_degC;
static uint8_t whoamI, rst;
static uint8_t tx_buffer[1000];

void lsm6d_print(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 80011f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011f4:	b08a      	sub	sp, #40	; 0x28
 80011f6:	af04      	add	r7, sp, #16
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
	/* Initialize mems driver interface */
	stmdev_ctx_t dev_ctx;
	dev_ctx.write_reg = platform_write;
 80011fc:	4b8f      	ldr	r3, [pc, #572]	; (800143c <lsm6d_print+0x24c>)
 80011fe:	60fb      	str	r3, [r7, #12]
	dev_ctx.read_reg = platform_read;
 8001200:	4b8f      	ldr	r3, [pc, #572]	; (8001440 <lsm6d_print+0x250>)
 8001202:	613b      	str	r3, [r7, #16]
	dev_ctx.handle = hi2c;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	617b      	str	r3, [r7, #20]

	// init the platform
	platform_init();
 8001208:	f000 f977 	bl	80014fa <platform_init>

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 800120c:	2014      	movs	r0, #20
 800120e:	f000 f969 	bl	80014e4 <platform_delay>
//			/* here device not found */
////			println(huart, "\nLSM6dS Not Found!!");
//		}

	/* Restore default configuration */
	lsm6ds3_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2101      	movs	r1, #1
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fbb9 	bl	8001990 <lsm6ds3_reset_set>

	do {
		lsm6ds3_reset_get(&dev_ctx, &rst);
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4988      	ldr	r1, [pc, #544]	; (8001444 <lsm6d_print+0x254>)
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fbd9 	bl	80019dc <lsm6ds3_reset_get>
	} while (rst);
 800122a:	4b86      	ldr	r3, [pc, #536]	; (8001444 <lsm6d_print+0x254>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f5      	bne.n	800121e <lsm6d_print+0x2e>

	/*  Enable Block Data Update */
	lsm6ds3_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	2101      	movs	r1, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fa7f 	bl	800173c <lsm6ds3_block_data_update_set>

	/* Set full scale */
	lsm6ds3_xl_full_scale_set(&dev_ctx, LSM6DS3_2g);
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f9e1 	bl	800160c <lsm6ds3_xl_full_scale_set>
	lsm6ds3_gy_full_scale_set(&dev_ctx, LSM6DS3_2000dps);
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	2106      	movs	r1, #6
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fa27 	bl	80016a4 <lsm6ds3_gy_full_scale_set>

	/* Set Output Data Rate for Acc and Gyro */
	lsm6ds3_xl_data_rate_set(&dev_ctx, LSM6DS3_XL_ODR_12Hz5);
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	2101      	movs	r1, #1
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f9fb 	bl	8001658 <lsm6ds3_xl_data_rate_set>
	lsm6ds3_gy_data_rate_set(&dev_ctx, LSM6DS3_GY_ODR_12Hz5);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2101      	movs	r1, #1
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fa41 	bl	80016f0 <lsm6ds3_gy_data_rate_set>

	uint8_t reg;

	/* Read output only if new value is available */
	lsm6ds3_xl_flag_data_ready_get(&dev_ctx, &reg);
 800126e:	f107 020b 	add.w	r2, r7, #11
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fa85 	bl	8001788 <lsm6ds3_xl_flag_data_ready_get>

	if (reg) {
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d04e      	beq.n	8001322 <lsm6d_print+0x132>
		/* Read acceleration field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001284:	2206      	movs	r2, #6
 8001286:	2100      	movs	r1, #0
 8001288:	486f      	ldr	r0, [pc, #444]	; (8001448 <lsm6d_print+0x258>)
 800128a:	f004 fee3 	bl	8006054 <memset>
		lsm6ds3_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	496d      	ldr	r1, [pc, #436]	; (8001448 <lsm6d_print+0x258>)
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fb30 	bl	80018fa <lsm6ds3_acceleration_raw_get>
		acceleration_mg[0] = lsm6ds3_from_fs2g_to_mg(data_raw_acceleration[0]);
 800129a:	4b6b      	ldr	r3, [pc, #428]	; (8001448 <lsm6d_print+0x258>)
 800129c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f961 	bl	8001568 <lsm6ds3_from_fs2g_to_mg>
 80012a6:	eef0 7a40 	vmov.f32	s15, s0
 80012aa:	4b68      	ldr	r3, [pc, #416]	; (800144c <lsm6d_print+0x25c>)
 80012ac:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6ds3_from_fs2g_to_mg(data_raw_acceleration[1]);
 80012b0:	4b65      	ldr	r3, [pc, #404]	; (8001448 <lsm6d_print+0x258>)
 80012b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f956 	bl	8001568 <lsm6ds3_from_fs2g_to_mg>
 80012bc:	eef0 7a40 	vmov.f32	s15, s0
 80012c0:	4b62      	ldr	r3, [pc, #392]	; (800144c <lsm6d_print+0x25c>)
 80012c2:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6ds3_from_fs2g_to_mg(data_raw_acceleration[2]);
 80012c6:	4b60      	ldr	r3, [pc, #384]	; (8001448 <lsm6d_print+0x258>)
 80012c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f94b 	bl	8001568 <lsm6ds3_from_fs2g_to_mg>
 80012d2:	eef0 7a40 	vmov.f32	s15, s0
 80012d6:	4b5d      	ldr	r3, [pc, #372]	; (800144c <lsm6d_print+0x25c>)
 80012d8:	edc3 7a02 	vstr	s15, [r3, #8]
		sprintf((char*) tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80012dc:	4b5b      	ldr	r3, [pc, #364]	; (800144c <lsm6d_print+0x25c>)
 80012de:	681b      	ldr	r3, [r3, #0]
		sprintf((char*) tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f959 	bl	8000598 <__aeabi_f2d>
 80012e6:	4680      	mov	r8, r0
 80012e8:	4689      	mov	r9, r1
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80012ea:	4b58      	ldr	r3, [pc, #352]	; (800144c <lsm6d_print+0x25c>)
 80012ec:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f952 	bl	8000598 <__aeabi_f2d>
 80012f4:	4604      	mov	r4, r0
 80012f6:	460d      	mov	r5, r1
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80012f8:	4b54      	ldr	r3, [pc, #336]	; (800144c <lsm6d_print+0x25c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f94b 	bl	8000598 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800130a:	e9cd 4500 	strd	r4, r5, [sp]
 800130e:	4642      	mov	r2, r8
 8001310:	464b      	mov	r3, r9
 8001312:	494f      	ldr	r1, [pc, #316]	; (8001450 <lsm6d_print+0x260>)
 8001314:	484f      	ldr	r0, [pc, #316]	; (8001454 <lsm6d_print+0x264>)
 8001316:	f005 fd25 	bl	8006d64 <siprintf>
		uart_tx(huart, tx_buffer);
 800131a:	494e      	ldr	r1, [pc, #312]	; (8001454 <lsm6d_print+0x264>)
 800131c:	6838      	ldr	r0, [r7, #0]
 800131e:	f000 fd3d 	bl	8001d9c <uart_tx>
//		tx_com(huart, tx_buffer, strlen((char const*) tx_buffer));
	}

	lsm6ds3_gy_flag_data_ready_get(&dev_ctx, &reg);
 8001322:	f107 020b 	add.w	r2, r7, #11
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fa44 	bl	80017ba <lsm6ds3_gy_flag_data_ready_get>

	if (reg) {
 8001332:	7afb      	ldrb	r3, [r7, #11]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d04e      	beq.n	80013d6 <lsm6d_print+0x1e6>
		/* Read angular rate field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001338:	2206      	movs	r2, #6
 800133a:	2100      	movs	r1, #0
 800133c:	4846      	ldr	r0, [pc, #280]	; (8001458 <lsm6d_print+0x268>)
 800133e:	f004 fe89 	bl	8006054 <memset>
		lsm6ds3_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	4944      	ldr	r1, [pc, #272]	; (8001458 <lsm6d_print+0x268>)
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fa8b 	bl	8001864 <lsm6ds3_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6ds3_from_fs2000dps_to_mdps(
 800134e:	4b42      	ldr	r3, [pc, #264]	; (8001458 <lsm6d_print+0x268>)
 8001350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f927 	bl	80015a8 <lsm6ds3_from_fs2000dps_to_mdps>
 800135a:	eef0 7a40 	vmov.f32	s15, s0
 800135e:	4b3f      	ldr	r3, [pc, #252]	; (800145c <lsm6d_print+0x26c>)
 8001360:	edc3 7a00 	vstr	s15, [r3]
				data_raw_angular_rate[0]);
		angular_rate_mdps[1] = lsm6ds3_from_fs2000dps_to_mdps(
 8001364:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <lsm6d_print+0x268>)
 8001366:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f91c 	bl	80015a8 <lsm6ds3_from_fs2000dps_to_mdps>
 8001370:	eef0 7a40 	vmov.f32	s15, s0
 8001374:	4b39      	ldr	r3, [pc, #228]	; (800145c <lsm6d_print+0x26c>)
 8001376:	edc3 7a01 	vstr	s15, [r3, #4]
				data_raw_angular_rate[1]);
		angular_rate_mdps[2] = lsm6ds3_from_fs2000dps_to_mdps(
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <lsm6d_print+0x268>)
 800137c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f911 	bl	80015a8 <lsm6ds3_from_fs2000dps_to_mdps>
 8001386:	eef0 7a40 	vmov.f32	s15, s0
 800138a:	4b34      	ldr	r3, [pc, #208]	; (800145c <lsm6d_print+0x26c>)
 800138c:	edc3 7a02 	vstr	s15, [r3, #8]
				data_raw_angular_rate[2]);
		sprintf((char*) tx_buffer,
				"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
				angular_rate_mdps[0], angular_rate_mdps[1],
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <lsm6d_print+0x26c>)
 8001392:	681b      	ldr	r3, [r3, #0]
		sprintf((char*) tx_buffer,
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8ff 	bl	8000598 <__aeabi_f2d>
 800139a:	4680      	mov	r8, r0
 800139c:	4689      	mov	r9, r1
				angular_rate_mdps[0], angular_rate_mdps[1],
 800139e:	4b2f      	ldr	r3, [pc, #188]	; (800145c <lsm6d_print+0x26c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) tx_buffer,
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f8f8 	bl	8000598 <__aeabi_f2d>
 80013a8:	4604      	mov	r4, r0
 80013aa:	460d      	mov	r5, r1
				angular_rate_mdps[2]);
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <lsm6d_print+0x26c>)
 80013ae:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) tx_buffer,
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8f1 	bl	8000598 <__aeabi_f2d>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013be:	e9cd 4500 	strd	r4, r5, [sp]
 80013c2:	4642      	mov	r2, r8
 80013c4:	464b      	mov	r3, r9
 80013c6:	4926      	ldr	r1, [pc, #152]	; (8001460 <lsm6d_print+0x270>)
 80013c8:	4822      	ldr	r0, [pc, #136]	; (8001454 <lsm6d_print+0x264>)
 80013ca:	f005 fccb 	bl	8006d64 <siprintf>
		uart_tx(huart, tx_buffer);
 80013ce:	4921      	ldr	r1, [pc, #132]	; (8001454 <lsm6d_print+0x264>)
 80013d0:	6838      	ldr	r0, [r7, #0]
 80013d2:	f000 fce3 	bl	8001d9c <uart_tx>
	}

	lsm6ds3_temp_flag_data_ready_get(&dev_ctx, &reg);
 80013d6:	f107 020b 	add.w	r2, r7, #11
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fa03 	bl	80017ec <lsm6ds3_temp_flag_data_ready_get>

	if (reg) {
 80013e6:	7afb      	ldrb	r3, [r7, #11]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d022      	beq.n	8001432 <lsm6d_print+0x242>
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <lsm6d_print+0x274>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	801a      	strh	r2, [r3, #0]
		/* Read temperature data */
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6ds3_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	491b      	ldr	r1, [pc, #108]	; (8001464 <lsm6d_print+0x274>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fa10 	bl	800181e <lsm6ds3_temperature_raw_get>
		temperature_degC = lsm6ds3_from_lsb_to_celsius(data_raw_temperature);
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <lsm6d_print+0x274>)
 8001400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f8e7 	bl	80015d8 <lsm6ds3_from_lsb_to_celsius>
 800140a:	eef0 7a40 	vmov.f32	s15, s0
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <lsm6d_print+0x278>)
 8001410:	edc3 7a00 	vstr	s15, [r3]
		sprintf((char*) tx_buffer, "Temperature [degC]:%6.2f\r\n",
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <lsm6d_print+0x278>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f8bd 	bl	8000598 <__aeabi_f2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4912      	ldr	r1, [pc, #72]	; (800146c <lsm6d_print+0x27c>)
 8001424:	480b      	ldr	r0, [pc, #44]	; (8001454 <lsm6d_print+0x264>)
 8001426:	f005 fc9d 	bl	8006d64 <siprintf>
				temperature_degC);
		uart_tx(huart, tx_buffer);
 800142a:	490a      	ldr	r1, [pc, #40]	; (8001454 <lsm6d_print+0x264>)
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	f000 fcb5 	bl	8001d9c <uart_tx>
	}
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800143c:	08001471 	.word	0x08001471
 8001440:	080014ab 	.word	0x080014ab
 8001444:	20000228 	.word	0x20000228
 8001448:	200001fc 	.word	0x200001fc
 800144c:	2000020c 	.word	0x2000020c
 8001450:	0800a9d0 	.word	0x0800a9d0
 8001454:	2000022c 	.word	0x2000022c
 8001458:	20000204 	.word	0x20000204
 800145c:	20000218 	.word	0x20000218
 8001460:	0800a9f8 	.word	0x0800a9f8
 8001464:	2000020a 	.word	0x2000020a
 8001468:	20000224 	.word	0x20000224
 800146c:	0800aa20 	.word	0x0800aa20

08001470 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
		uint16_t len) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af04      	add	r7, sp, #16
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	461a      	mov	r2, r3
 800147c:	460b      	mov	r3, r1
 800147e:	72fb      	strb	r3, [r7, #11]
 8001480:	4613      	mov	r3, r2
 8001482:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Write(handle, LSM6DS3_I2C_ADD_L, reg,
 8001484:	7afb      	ldrb	r3, [r7, #11]
 8001486:	b29a      	uxth	r2, r3
 8001488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	893b      	ldrh	r3, [r7, #8]
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2301      	movs	r3, #1
 8001498:	21d5      	movs	r1, #213	; 0xd5
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f001 fbea 	bl	8002c74 <HAL_I2C_Mem_Write>
	I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b088      	sub	sp, #32
 80014ae:	af04      	add	r7, sp, #16
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	461a      	mov	r2, r3
 80014b6:	460b      	mov	r3, r1
 80014b8:	72fb      	strb	r3, [r7, #11]
 80014ba:	4613      	mov	r3, r2
 80014bc:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LSM6DS3_I2C_ADD_L, reg,
 80014be:	7afb      	ldrb	r3, [r7, #11]
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	893b      	ldrh	r3, [r7, #8]
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2301      	movs	r3, #1
 80014d2:	21d5      	movs	r1, #213	; 0xd5
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f001 fce1 	bl	8002e9c <HAL_I2C_Mem_Read>
	I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <platform_delay>:
 * @brief  platform specific delay (platform dependent)
 *
 * @param  ms        delay in ms
 *
 */
void platform_delay(uint32_t ms) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 ffe3 	bl	80024b8 <HAL_Delay>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
void platform_init(void) {
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <lsm6ds3_read_reg>:
  *
  */
int32_t lsm6ds3_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	461a      	mov	r2, r3
 8001514:	460b      	mov	r3, r1
 8001516:	72fb      	strb	r3, [r7, #11]
 8001518:	4613      	mov	r3, r2
 800151a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	685c      	ldr	r4, [r3, #4]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6898      	ldr	r0, [r3, #8]
 8001524:	893b      	ldrh	r3, [r7, #8]
 8001526:	7af9      	ldrb	r1, [r7, #11]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	47a0      	blx	r4
 800152c:	6178      	str	r0, [r7, #20]

  return ret;
 800152e:	697b      	ldr	r3, [r7, #20]
}
 8001530:	4618      	mov	r0, r3
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd90      	pop	{r4, r7, pc}

08001538 <lsm6ds3_write_reg>:
  *
  */
int32_t lsm6ds3_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	461a      	mov	r2, r3
 8001544:	460b      	mov	r3, r1
 8001546:	72fb      	strb	r3, [r7, #11]
 8001548:	4613      	mov	r3, r2
 800154a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681c      	ldr	r4, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6898      	ldr	r0, [r3, #8]
 8001554:	893b      	ldrh	r3, [r7, #8]
 8001556:	7af9      	ldrb	r1, [r7, #11]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	47a0      	blx	r4
 800155c:	6178      	str	r0, [r7, #20]

  return ret;
 800155e:	697b      	ldr	r3, [r7, #20]
}
 8001560:	4618      	mov	r0, r3
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd90      	pop	{r4, r7, pc}

08001568 <lsm6ds3_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6ds3_from_fs2g_to_mg(int16_t lsb)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 61.0f / 1000.0f);
 8001572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80015a0 <lsm6ds3_from_fs2g_to_mg+0x38>
 8001582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001586:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80015a4 <lsm6ds3_from_fs2g_to_mg+0x3c>
 800158a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800158e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001592:	eeb0 0a67 	vmov.f32	s0, s15
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	42740000 	.word	0x42740000
 80015a4:	447a0000 	.word	0x447a0000

080015a8 <lsm6ds3_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6ds3_from_fs2000dps_to_mdps(int16_t lsb)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80015b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015be:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80015d4 <lsm6ds3_from_fs2000dps_to_mdps+0x2c>
 80015c2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80015c6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	428c0000 	.word	0x428c0000

080015d8 <lsm6ds3_from_lsb_to_celsius>:

float_t lsm6ds3_from_lsb_to_celsius(int16_t lsb)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f + 25.0f);
 80015e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80015f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80015fa:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80015fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <lsm6ds3_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_xl_fs_t val)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001618:	f107 0208 	add.w	r2, r7, #8
 800161c:	2301      	movs	r3, #1
 800161e:	2110      	movs	r1, #16
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff71 	bl	8001508 <lsm6ds3_read_reg>
 8001626:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10f      	bne.n	800164e <lsm6ds3_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	b2da      	uxtb	r2, r3
 8001636:	7a3b      	ldrb	r3, [r7, #8]
 8001638:	f362 0383 	bfi	r3, r2, #2, #2
 800163c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800163e:	f107 0208 	add.w	r2, r7, #8
 8001642:	2301      	movs	r3, #1
 8001644:	2110      	movs	r1, #16
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff76 	bl	8001538 <lsm6ds3_write_reg>
 800164c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <lsm6ds3_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_xl_t val)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001664:	f107 0208 	add.w	r2, r7, #8
 8001668:	2301      	movs	r3, #1
 800166a:	2110      	movs	r1, #16
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff4b 	bl	8001508 <lsm6ds3_read_reg>
 8001672:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10f      	bne.n	800169a <lsm6ds3_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t)val;
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	b2da      	uxtb	r2, r3
 8001682:	7a3b      	ldrb	r3, [r7, #8]
 8001684:	f362 1307 	bfi	r3, r2, #4, #4
 8001688:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800168a:	f107 0208 	add.w	r2, r7, #8
 800168e:	2301      	movs	r3, #1
 8001690:	2110      	movs	r1, #16
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff50 	bl	8001538 <lsm6ds3_write_reg>
 8001698:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <lsm6ds3_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_fs_g_t val)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80016b0:	f107 0208 	add.w	r2, r7, #8
 80016b4:	2301      	movs	r3, #1
 80016b6:	2111      	movs	r1, #17
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff25 	bl	8001508 <lsm6ds3_read_reg>
 80016be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10f      	bne.n	80016e6 <lsm6ds3_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	7a3b      	ldrb	r3, [r7, #8]
 80016d0:	f362 0343 	bfi	r3, r2, #1, #3
 80016d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80016d6:	f107 0208 	add.w	r2, r7, #8
 80016da:	2301      	movs	r3, #1
 80016dc:	2111      	movs	r1, #17
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ff2a 	bl	8001538 <lsm6ds3_write_reg>
 80016e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <lsm6ds3_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_g_t val)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80016fc:	f107 0208 	add.w	r2, r7, #8
 8001700:	2301      	movs	r3, #1
 8001702:	2111      	movs	r1, #17
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff feff 	bl	8001508 <lsm6ds3_read_reg>
 800170a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10f      	bne.n	8001732 <lsm6ds3_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t)val;
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	b2da      	uxtb	r2, r3
 800171a:	7a3b      	ldrb	r3, [r7, #8]
 800171c:	f362 1307 	bfi	r3, r2, #4, #4
 8001720:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001722:	f107 0208 	add.w	r2, r7, #8
 8001726:	2301      	movs	r3, #1
 8001728:	2111      	movs	r1, #17
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff04 	bl	8001538 <lsm6ds3_write_reg>
 8001730:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <lsm6ds3_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001748:	f107 0208 	add.w	r2, r7, #8
 800174c:	2301      	movs	r3, #1
 800174e:	2112      	movs	r1, #18
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fed9 	bl	8001508 <lsm6ds3_read_reg>
 8001756:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10f      	bne.n	800177e <lsm6ds3_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	b2da      	uxtb	r2, r3
 8001766:	7a3b      	ldrb	r3, [r7, #8]
 8001768:	f362 1386 	bfi	r3, r2, #6, #1
 800176c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800176e:	f107 0208 	add.w	r2, r7, #8
 8001772:	2301      	movs	r3, #1
 8001774:	2112      	movs	r1, #18
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fede 	bl	8001538 <lsm6ds3_write_reg>
 800177c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <lsm6ds3_xl_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG,
 8001792:	f107 0208 	add.w	r2, r7, #8
 8001796:	2301      	movs	r3, #1
 8001798:	211e      	movs	r1, #30
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff feb4 	bl	8001508 <lsm6ds3_read_reg>
 80017a0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = (uint8_t)status_reg.xlda;
 80017a2:	7a3b      	ldrb	r3, [r7, #8]
 80017a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	701a      	strb	r2, [r3, #0]

  return ret;
 80017b0:	68fb      	ldr	r3, [r7, #12]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <lsm6ds3_gy_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG,
 80017c4:	f107 0208 	add.w	r2, r7, #8
 80017c8:	2301      	movs	r3, #1
 80017ca:	211e      	movs	r1, #30
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fe9b 	bl	8001508 <lsm6ds3_read_reg>
 80017d2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = (uint8_t)status_reg.gda;
 80017d4:	7a3b      	ldrb	r3, [r7, #8]
 80017d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	701a      	strb	r2, [r3, #0]

  return ret;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <lsm6ds3_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG,
 80017f6:	f107 0208 	add.w	r2, r7, #8
 80017fa:	2301      	movs	r3, #1
 80017fc:	211e      	movs	r1, #30
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fe82 	bl	8001508 <lsm6ds3_read_reg>
 8001804:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = (uint8_t)status_reg.tda;
 8001806:	7a3b      	ldrb	r3, [r7, #8]
 8001808:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	701a      	strb	r2, [r3, #0]

  return ret;
 8001814:	68fb      	ldr	r3, [r7, #12]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <lsm6ds3_temperature_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUT_TEMP_L, buff, 2);
 8001828:	f107 0208 	add.w	r2, r7, #8
 800182c:	2302      	movs	r3, #2
 800182e:	2120      	movs	r1, #32
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fe69 	bl	8001508 <lsm6ds3_read_reg>
 8001836:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001838:	7a7b      	ldrb	r3, [r7, #9]
 800183a:	b21a      	sxth	r2, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001846:	b29b      	uxth	r3, r3
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b29a      	uxth	r2, r3
 800184c:	7a3b      	ldrb	r3, [r7, #8]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4413      	add	r3, r2
 8001852:	b29b      	uxth	r3, r3
 8001854:	b21a      	sxth	r2, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	801a      	strh	r2, [r3, #0]

  return ret;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <lsm6ds3_angular_rate_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 800186e:	f107 020c 	add.w	r2, r7, #12
 8001872:	2306      	movs	r3, #6
 8001874:	2122      	movs	r1, #34	; 0x22
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fe46 	bl	8001508 <lsm6ds3_read_reg>
 800187c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800187e:	7b7b      	ldrb	r3, [r7, #13]
 8001880:	b21a      	sxth	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188c:	b29b      	uxth	r3, r3
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b29a      	uxth	r2, r3
 8001892:	7b3b      	ldrb	r3, [r7, #12]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	b21a      	sxth	r2, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3302      	adds	r3, #2
 80018a6:	b212      	sxth	r2, r2
 80018a8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	3302      	adds	r3, #2
 80018ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	4413      	add	r3, r2
 80018be:	b29a      	uxth	r2, r3
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	3302      	adds	r3, #2
 80018c4:	b212      	sxth	r2, r2
 80018c6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80018c8:	7c7a      	ldrb	r2, [r7, #17]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	3304      	adds	r3, #4
 80018ce:	b212      	sxth	r2, r2
 80018d0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	3304      	adds	r3, #4
 80018d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b29a      	uxth	r2, r3
 80018e0:	7c3b      	ldrb	r3, [r7, #16]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	3304      	adds	r3, #4
 80018ec:	b212      	sxth	r2, r2
 80018ee:	801a      	strh	r2, [r3, #0]

  return ret;
 80018f0:	697b      	ldr	r3, [r7, #20]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <lsm6ds3_acceleration_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 8001904:	f107 020c 	add.w	r2, r7, #12
 8001908:	2306      	movs	r3, #6
 800190a:	2128      	movs	r1, #40	; 0x28
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff fdfb 	bl	8001508 <lsm6ds3_read_reg>
 8001912:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001914:	7b7b      	ldrb	r3, [r7, #13]
 8001916:	b21a      	sxth	r2, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001922:	b29b      	uxth	r3, r3
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b29a      	uxth	r2, r3
 8001928:	7b3b      	ldrb	r3, [r7, #12]
 800192a:	b29b      	uxth	r3, r3
 800192c:	4413      	add	r3, r2
 800192e:	b29b      	uxth	r3, r3
 8001930:	b21a      	sxth	r2, r3
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	3302      	adds	r3, #2
 800193c:	b212      	sxth	r2, r2
 800193e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	3302      	adds	r3, #2
 8001944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001948:	b29b      	uxth	r3, r3
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b29a      	uxth	r2, r3
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b29a      	uxth	r2, r3
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	3302      	adds	r3, #2
 800195a:	b212      	sxth	r2, r2
 800195c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800195e:	7c7a      	ldrb	r2, [r7, #17]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	3304      	adds	r3, #4
 8001964:	b212      	sxth	r2, r2
 8001966:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	3304      	adds	r3, #4
 800196c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001970:	b29b      	uxth	r3, r3
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	b29a      	uxth	r2, r3
 8001976:	7c3b      	ldrb	r3, [r7, #16]
 8001978:	b29b      	uxth	r3, r3
 800197a:	4413      	add	r3, r2
 800197c:	b29a      	uxth	r2, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	3304      	adds	r3, #4
 8001982:	b212      	sxth	r2, r2
 8001984:	801a      	strh	r2, [r3, #0]

  return ret;
 8001986:	697b      	ldr	r3, [r7, #20]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800199c:	f107 0208 	add.w	r2, r7, #8
 80019a0:	2301      	movs	r3, #1
 80019a2:	2112      	movs	r1, #18
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fdaf 	bl	8001508 <lsm6ds3_read_reg>
 80019aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10f      	bne.n	80019d2 <lsm6ds3_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	7a3b      	ldrb	r3, [r7, #8]
 80019bc:	f362 0300 	bfi	r3, r2, #0, #1
 80019c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80019c2:	f107 0208 	add.w	r2, r7, #8
 80019c6:	2301      	movs	r3, #1
 80019c8:	2112      	movs	r1, #18
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fdb4 	bl	8001538 <lsm6ds3_write_reg>
 80019d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <lsm6ds3_reset_get>:
  * @param  val      get the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80019e6:	f107 0208 	add.w	r2, r7, #8
 80019ea:	2301      	movs	r3, #1
 80019ec:	2112      	movs	r1, #18
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fd8a 	bl	8001508 <lsm6ds3_read_reg>
 80019f4:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)ctrl3_c.sw_reset;
 80019f6:	7a3b      	ldrb	r3, [r7, #8]
 80019f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	701a      	strb	r2, [r3, #0]

  return ret;
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a14:	f000 fd23 	bl	800245e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a18:	f000 f828 	bl	8001a6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a1c:	f000 f8f2 	bl	8001c04 <MX_GPIO_Init>
	MX_I2C2_Init();
 8001a20:	f000 f880 	bl	8001b24 <MX_I2C2_Init>
	MX_USART3_UART_Init();
 8001a24:	f000 f8be 	bl	8001ba4 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	println(&huart3, "System initialized successfully!");
 8001a28:	490d      	ldr	r1, [pc, #52]	; (8001a60 <main+0x50>)
 8001a2a:	480e      	ldr	r0, [pc, #56]	; (8001a64 <main+0x54>)
 8001a2c:	f000 f96c 	bl	8001d08 <println>
	i2c_scan(&hi2c2, &huart3);
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <main+0x54>)
 8001a32:	480d      	ldr	r0, [pc, #52]	; (8001a68 <main+0x58>)
 8001a34:	f000 fc22 	bl	800227c <i2c_scan>
	delay(100);
 8001a38:	2064      	movs	r0, #100	; 0x64
 8001a3a:	f7ff fb05 	bl	8001048 <delay>
	check_lps22(&hi2c2, &huart3);
 8001a3e:	4909      	ldr	r1, [pc, #36]	; (8001a64 <main+0x54>)
 8001a40:	4809      	ldr	r0, [pc, #36]	; (8001a68 <main+0x58>)
 8001a42:	f7ff fb25 	bl	8001090 <check_lps22>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		lps22_print(&hi2c2, &huart3);
 8001a46:	4907      	ldr	r1, [pc, #28]	; (8001a64 <main+0x54>)
 8001a48:	4807      	ldr	r0, [pc, #28]	; (8001a68 <main+0x58>)
 8001a4a:	f7ff fb3f 	bl	80010cc <lps22_print>

		lsm6d_print(&hi2c2, &huart3);
 8001a4e:	4905      	ldr	r1, [pc, #20]	; (8001a64 <main+0x54>)
 8001a50:	4805      	ldr	r0, [pc, #20]	; (8001a68 <main+0x58>)
 8001a52:	f7ff fbcd 	bl	80011f0 <lsm6d_print>

		delay(1000);
 8001a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a5a:	f7ff faf5 	bl	8001048 <delay>
		lps22_print(&hi2c2, &huart3);
 8001a5e:	e7f2      	b.n	8001a46 <main+0x36>
 8001a60:	0800aa3c 	.word	0x0800aa3c
 8001a64:	20000660 	.word	0x20000660
 8001a68:	20000614 	.word	0x20000614

08001a6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b094      	sub	sp, #80	; 0x50
 8001a70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a72:	f107 0320 	add.w	r3, r7, #32
 8001a76:	2230      	movs	r2, #48	; 0x30
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 faea 	bl	8006054 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <SystemClock_Config+0xb0>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	4a21      	ldr	r2, [pc, #132]	; (8001b1c <SystemClock_Config+0xb0>)
 8001a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <SystemClock_Config+0xb0>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <SystemClock_Config+0xb4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <SystemClock_Config+0xb4>)
 8001ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <SystemClock_Config+0xb4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001acc:	2310      	movs	r3, #16
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 ff3f 	bl	800395c <HAL_RCC_OscConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0x7c>
		Error_Handler();
 8001ae4:	f000 f8f6 	bl	8001cd4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ae8:	230f      	movs	r3, #15
 8001aea:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 f9ce 	bl	8003ea4 <HAL_RCC_ClockConfig>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <SystemClock_Config+0xa6>
		Error_Handler();
 8001b0e:	f000 f8e1 	bl	8001cd4 <Error_Handler>
	}
}
 8001b12:	bf00      	nop
 8001b14:	3750      	adds	r7, #80	; 0x50
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40007000 	.word	0x40007000

08001b24 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <MX_I2C2_Init+0x78>)
 8001b2c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00303D5B;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <MX_I2C2_Init+0x7c>)
 8001b32:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001b5e:	480e      	ldr	r0, [pc, #56]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b60:	f000 fff8 	bl	8002b54 <HAL_I2C_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_I2C2_Init+0x4a>
		Error_Handler();
 8001b6a:	f000 f8b3 	bl	8001cd4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4809      	ldr	r0, [pc, #36]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b72:	f001 fe5b 	bl	800382c <HAL_I2CEx_ConfigAnalogFilter>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001b7c:	f000 f8aa 	bl	8001cd4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001b80:	2100      	movs	r1, #0
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b84:	f001 fe9d 	bl	80038c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_I2C2_Init+0x6e>
		Error_Handler();
 8001b8e:	f000 f8a1 	bl	8001cd4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000614 	.word	0x20000614
 8001b9c:	40005800 	.word	0x40005800
 8001ba0:	00303d5b 	.word	0x00303d5b

08001ba4 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_USART3_UART_Init+0x58>)
 8001baa:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <MX_USART3_UART_Init+0x5c>)
 8001bac:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <MX_USART3_UART_Init+0x58>)
 8001bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_USART3_UART_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_USART3_UART_Init+0x58>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_USART3_UART_Init+0x58>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_USART3_UART_Init+0x58>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <MX_USART3_UART_Init+0x58>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_USART3_UART_Init+0x58>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <MX_USART3_UART_Init+0x58>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <MX_USART3_UART_Init+0x58>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_USART3_UART_Init+0x58>)
 8001be8:	f003 f99e 	bl	8004f28 <HAL_UART_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8001bf2:	f000 f86f 	bl	8001cd4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000660 	.word	0x20000660
 8001c00:	40004800 	.word	0x40004800

08001c04 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c20:	f043 0310 	orr.w	r3, r3, #16
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2108      	movs	r1, #8
 8001c7e:	480b      	ldr	r0, [pc, #44]	; (8001cac <MX_GPIO_Init+0xa8>)
 8001c80:	f000 ff4e 	bl	8002b20 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c84:	2308      	movs	r3, #8
 8001c86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_GPIO_Init+0xa8>)
 8001c9c:	f000 fda4 	bl	80027e8 <HAL_GPIO_Init>

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM13) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001cc2:	f000 fbd9 	bl	8002478 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40001c00 	.word	0x40001c00

08001cd4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd8:	b672      	cpsid	i
}
 8001cda:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cdc:	e7fe      	b.n	8001cdc <Error_Handler+0x8>

08001cde <print>:


#include "serial.h"


HAL_StatusTypeDef print(UART_HandleTypeDef *huart, const char *msg){
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(huart,(uint8_t *)msg, strlen(( char * )msg), HAL_MAX_DELAY);
 8001ce8:	6838      	ldr	r0, [r7, #0]
 8001cea:	f7fe fa99 	bl	8000220 <strlen>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf6:	6839      	ldr	r1, [r7, #0]
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f003 f963 	bl	8004fc4 <HAL_UART_Transmit>
 8001cfe:	4603      	mov	r3, r0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <println>:

HAL_StatusTypeDef println(UART_HandleTypeDef *huart, const char *msg){
 8001d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
 8001d14:	466b      	mov	r3, sp
 8001d16:	461e      	mov	r6, r3
	char data[strlen(( char * )msg)+1];
 8001d18:	6838      	ldr	r0, [r7, #0]
 8001d1a:	f7fe fa81 	bl	8000220 <strlen>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	1c59      	adds	r1, r3, #1
 8001d22:	460b      	mov	r3, r1
 8001d24:	3b01      	subs	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	4688      	mov	r8, r1
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d42:	2300      	movs	r3, #0
 8001d44:	460c      	mov	r4, r1
 8001d46:	461d      	mov	r5, r3
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	00eb      	lsls	r3, r5, #3
 8001d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d56:	00e2      	lsls	r2, r4, #3
 8001d58:	1dcb      	adds	r3, r1, #7
 8001d5a:	08db      	lsrs	r3, r3, #3
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	ebad 0d03 	sub.w	sp, sp, r3
 8001d62:	466b      	mov	r3, sp
 8001d64:	3300      	adds	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
	sprintf(data,"%s\n",( char * )msg);
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	490b      	ldr	r1, [pc, #44]	; (8001d98 <println+0x90>)
 8001d6c:	68b8      	ldr	r0, [r7, #8]
 8001d6e:	f004 fff9 	bl	8006d64 <siprintf>
	return HAL_UART_Transmit(huart,(uint8_t *)data, strlen(data), HAL_MAX_DELAY);
 8001d72:	68b8      	ldr	r0, [r7, #8]
 8001d74:	f7fe fa54 	bl	8000220 <strlen>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f003 f91e 	bl	8004fc4 <HAL_UART_Transmit>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	46b5      	mov	sp, r6
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d96:	bf00      	nop
 8001d98:	0800aa60 	.word	0x0800aa60

08001d9c <uart_tx>:

HAL_StatusTypeDef uart_tx(UART_HandleTypeDef *huart, const uint8_t *msg){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(huart,(uint8_t *)msg, strlen(( char * )msg), HAL_MAX_DELAY);
 8001da6:	6838      	ldr	r0, [r7, #0]
 8001da8:	f7fe fa3a 	bl	8000220 <strlen>
 8001dac:	4603      	mov	r3, r0
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	6839      	ldr	r1, [r7, #0]
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f003 f904 	bl	8004fc4 <HAL_UART_Transmit>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_MspInit+0x44>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <HAL_MspInit+0x44>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_MspInit+0x44>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_MspInit+0x44>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_MspInit+0x44>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_MspInit+0x44>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800

08001e10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b0aa      	sub	sp, #168	; 0xa8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 f90f 	bl	8006054 <memset>
  if(hi2c->Instance==I2C2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <HAL_I2C_MspInit+0xb4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d13c      	bne.n	8001eba <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 fa40 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e5a:	f7ff ff3b 	bl	8001cd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_I2C_MspInit+0xb8>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_I2C_MspInit+0xb8>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_I2C_MspInit+0xb8>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e7e:	2312      	movs	r3, #18
 8001e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e90:	2304      	movs	r3, #4
 8001e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e96:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480b      	ldr	r0, [pc, #44]	; (8001ecc <HAL_I2C_MspInit+0xbc>)
 8001e9e:	f000 fca3 	bl	80027e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_I2C_MspInit+0xb8>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <HAL_I2C_MspInit+0xb8>)
 8001ea8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_I2C_MspInit+0xb8>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001eba:	bf00      	nop
 8001ebc:	37a8      	adds	r7, #168	; 0xa8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40005800 	.word	0x40005800
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020400 	.word	0x40020400

08001ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b0aa      	sub	sp, #168	; 0xa8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2280      	movs	r2, #128	; 0x80
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 f8af 	bl	8006054 <memset>
  if(huart->Instance==USART3)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <HAL_UART_MspInit+0xc4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d144      	bne.n	8001f8a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f04:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f06:	2300      	movs	r3, #0
 8001f08:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 f9e0 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f1a:	f7ff fedb 	bl	8001cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_UART_MspInit+0xc8>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <HAL_UART_MspInit+0xc8>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_UART_MspInit+0xc8>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_UART_MspInit+0xc8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <HAL_UART_MspInit+0xc8>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_UART_MspInit+0xc8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f68:	2307      	movs	r3, #7
 8001f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f72:	4619      	mov	r1, r3
 8001f74:	4809      	ldr	r0, [pc, #36]	; (8001f9c <HAL_UART_MspInit+0xcc>)
 8001f76:	f000 fc37 	bl	80027e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2027      	movs	r0, #39	; 0x27
 8001f80:	f000 fb76 	bl	8002670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f84:	2027      	movs	r0, #39	; 0x27
 8001f86:	f000 fb8f 	bl	80026a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	37a8      	adds	r7, #168	; 0xa8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40004800 	.word	0x40004800
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020800 	.word	0x40020800

08001fa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	202c      	movs	r0, #44	; 0x2c
 8001fb6:	f000 fb5b 	bl	8002670 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001fba:	202c      	movs	r0, #44	; 0x2c
 8001fbc:	f000 fb74 	bl	80026a8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	; (800203c <HAL_InitTick+0x9c>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	4a1d      	ldr	r2, [pc, #116]	; (800203c <HAL_InitTick+0x9c>)
 8001fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fca:	6413      	str	r3, [r2, #64]	; 0x40
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_InitTick+0x9c>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fd8:	f107 0210 	add.w	r2, r7, #16
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 f944 	bl	8004270 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fe8:	f002 f91a 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 8001fec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff0:	4a13      	ldr	r2, [pc, #76]	; (8002040 <HAL_InitTick+0xa0>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0c9b      	lsrs	r3, r3, #18
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_InitTick+0xa4>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <HAL_InitTick+0xa8>)
 8002000:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_InitTick+0xa4>)
 8002004:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002008:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 800200a:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <HAL_InitTick+0xa4>)
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <HAL_InitTick+0xa4>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_InitTick+0xa4>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 800201c:	4809      	ldr	r0, [pc, #36]	; (8002044 <HAL_InitTick+0xa4>)
 800201e:	f002 fca3 	bl	8004968 <HAL_TIM_Base_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d104      	bne.n	8002032 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8002028:	4806      	ldr	r0, [pc, #24]	; (8002044 <HAL_InitTick+0xa4>)
 800202a:	f002 fcff 	bl	8004a2c <HAL_TIM_Base_Start_IT>
 800202e:	4603      	mov	r3, r0
 8002030:	e000      	b.n	8002034 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	3730      	adds	r7, #48	; 0x30
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800
 8002040:	431bde83 	.word	0x431bde83
 8002044:	200006e4 	.word	0x200006e4
 8002048:	40001c00 	.word	0x40001c00

0800204c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <NMI_Handler+0x4>

08002052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <HardFault_Handler+0x4>

08002058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <MemManage_Handler+0x4>

0800205e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <BusFault_Handler+0x4>

08002064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <UsageFault_Handler+0x4>

0800206a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <USART3_IRQHandler+0x10>)
 80020aa:	f003 f81f 	bl	80050ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000660 	.word	0x20000660

080020b8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80020be:	f002 fd2d 	bl	8004b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200006e4 	.word	0x200006e4

080020cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
	return 1;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_kill>:

int _kill(int pid, int sig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020e6:	f003 ff8b 	bl	8006000 <__errno>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2216      	movs	r2, #22
 80020ee:	601a      	str	r2, [r3, #0]
	return -1;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_exit>:

void _exit (int status)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ffe7 	bl	80020dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800210e:	e7fe      	b.n	800210e <_exit+0x12>

08002110 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e00a      	b.n	8002138 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002122:	f3af 8000 	nop.w
 8002126:	4601      	mov	r1, r0
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	b2ca      	uxtb	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbf0      	blt.n	8002122 <_read+0x12>
	}

return len;
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	e009      	b.n	8002170 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	60ba      	str	r2, [r7, #8]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	3301      	adds	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	429a      	cmp	r2, r3
 8002176:	dbf1      	blt.n	800215c <_write+0x12>
	}
	return len;
 8002178:	687b      	ldr	r3, [r7, #4]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <_close>:

int _close(int file)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
	return -1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021aa:	605a      	str	r2, [r3, #4]
	return 0;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_isatty>:

int _isatty(int file)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
	return 1;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
	return 0;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <_sbrk+0x5c>)
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <_sbrk+0x60>)
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <_sbrk+0x64>)
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <_sbrk+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d207      	bcs.n	800222c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800221c:	f003 fef0 	bl	8006000 <__errno>
 8002220:	4603      	mov	r3, r0
 8002222:	220c      	movs	r2, #12
 8002224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	e009      	b.n	8002240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <_sbrk+0x64>)
 800223c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20040000 	.word	0x20040000
 800224c:	00000400 	.word	0x00000400
 8002250:	20000730 	.word	0x20000730
 8002254:	20000748 	.word	0x20000748

08002258 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <SystemInit+0x20>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <SystemInit+0x20>)
 8002264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <i2c_scan>:
#include "serial.h"

#define I2C_TIMEOUT HAL_MAX_DELAY
//#define I2C_TIMEOUT 0x10

void i2c_scan(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b094      	sub	sp, #80	; 0x50
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
	// i2c scan
	char buff[64];
	println(huart, "\nStarting the I2C Scanner...\n");
 8002286:	491e      	ldr	r1, [pc, #120]	; (8002300 <i2c_scan+0x84>)
 8002288:	6838      	ldr	r0, [r7, #0]
 800228a:	f7ff fd3d 	bl	8001d08 <println>
	// scan for device address from 0 to 127
	byte var, ret = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	for (var = 0; var < 127; var++) {
 8002294:	2300      	movs	r3, #0
 8002296:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800229a:	e024      	b.n	80022e6 <i2c_scan+0x6a>
		ret = HAL_I2C_IsDeviceReady(hi2c, var << 1, 3, I2C_TIMEOUT);
 800229c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	b299      	uxth	r1, r3
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	2203      	movs	r2, #3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 ff0f 	bl	80030d0 <HAL_I2C_IsDeviceReady>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		if (ret == HAL_OK) {
 80022b8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10d      	bne.n	80022dc <i2c_scan+0x60>
			sprintf(buff, "Found an i2c device at 0x%X \n", var);
 80022c0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <i2c_scan+0x88>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f004 fd4a 	bl	8006d64 <siprintf>
			print(huart, buff);
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	4619      	mov	r1, r3
 80022d6:	6838      	ldr	r0, [r7, #0]
 80022d8:	f7ff fd01 	bl	8001cde <print>
	for (var = 0; var < 127; var++) {
 80022dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80022e0:	3301      	adds	r3, #1
 80022e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80022e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80022ea:	2b7e      	cmp	r3, #126	; 0x7e
 80022ec:	d9d6      	bls.n	800229c <i2c_scan+0x20>
		}
	}
	println(huart, "\nI2C device scanning process finished.");
 80022ee:	4906      	ldr	r1, [pc, #24]	; (8002308 <i2c_scan+0x8c>)
 80022f0:	6838      	ldr	r0, [r7, #0]
 80022f2:	f7ff fd09 	bl	8001d08 <println>
	// end of i2c scan
}
 80022f6:	bf00      	nop
 80022f8:	3750      	adds	r7, #80	; 0x50
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	0800aa64 	.word	0x0800aa64
 8002304:	0800aa84 	.word	0x0800aa84
 8002308:	0800aaa4 	.word	0x0800aaa4

0800230c <device_ready>:

status device_ready(I2C_HandleTypeDef *hi2c, uint16_t addr) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
	return HAL_I2C_IsDeviceReady(hi2c, addr << 1, 3, I2C_TIMEOUT);
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	b299      	uxth	r1, r3
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	2203      	movs	r2, #3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fed3 	bl	80030d0 <HAL_I2C_IsDeviceReady>
 800232a:	4603      	mov	r3, r0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <i2c_write_byte>:
 function:
 I2C Write and Read
 ******************************************************************************/

status i2c_write_byte(I2C_HandleTypeDef *hi2c, byte dev_addr, byte mem_addr,
		byte data) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af04      	add	r7, sp, #16
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	4608      	mov	r0, r1
 800233e:	4611      	mov	r1, r2
 8002340:	461a      	mov	r2, r3
 8002342:	4603      	mov	r3, r0
 8002344:	70fb      	strb	r3, [r7, #3]
 8002346:	460b      	mov	r3, r1
 8002348:	70bb      	strb	r3, [r7, #2]
 800234a:	4613      	mov	r3, r2
 800234c:	707b      	strb	r3, [r7, #1]
	byte buf[1] = { 0 };
 800234e:	2300      	movs	r3, #0
 8002350:	733b      	strb	r3, [r7, #12]
	buf[0] = data;
 8002352:	787b      	ldrb	r3, [r7, #1]
 8002354:	733b      	strb	r3, [r7, #12]
	return HAL_I2C_Mem_Write(hi2c, dev_addr, mem_addr, sizeof(byte), buf,
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	b299      	uxth	r1, r3
 800235a:	78bb      	ldrb	r3, [r7, #2]
 800235c:	b29a      	uxth	r2, r3
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
 8002362:	9302      	str	r3, [sp, #8]
 8002364:	2301      	movs	r3, #1
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2301      	movs	r3, #1
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fc7f 	bl	8002c74 <HAL_I2C_Mem_Write>
 8002376:	4603      	mov	r3, r0
			1, I2C_TIMEOUT);
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <i2c_read_byte>:
	buf[1] = data;
	return HAL_I2C_Mem_Write(hi2c, dev_addr, mem_addr, sizeof(byte), buf,
			2, I2C_TIMEOUT);
}

byte i2c_read_byte(I2C_HandleTypeDef *hi2c, byte dev_addr, byte mem_addr) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af04      	add	r7, sp, #16
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
 800238c:	4613      	mov	r3, r2
 800238e:	70bb      	strb	r3, [r7, #2]
	byte buf[1] = { mem_addr };
 8002390:	78bb      	ldrb	r3, [r7, #2]
 8002392:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(hi2c, dev_addr, mem_addr, sizeof(byte), buf, 1,
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	b299      	uxth	r1, r3
 8002398:	78bb      	ldrb	r3, [r7, #2]
 800239a:	b29a      	uxth	r2, r3
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
 80023a0:	9302      	str	r3, [sp, #8]
 80023a2:	2301      	movs	r3, #1
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	2301      	movs	r3, #1
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fd74 	bl	8002e9c <HAL_I2C_Mem_Read>
	I2C_TIMEOUT);
	return buf[0];
 80023b4:	7b3b      	ldrb	r3, [r7, #12]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <i2c_read_word>:

word i2c_read_word(I2C_HandleTypeDef *hi2c, byte dev_addr, byte mem_addr) {
 80023be:	b580      	push	{r7, lr}
 80023c0:	b088      	sub	sp, #32
 80023c2:	af04      	add	r7, sp, #16
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	70fb      	strb	r3, [r7, #3]
 80023ca:	4613      	mov	r3, r2
 80023cc:	70bb      	strb	r3, [r7, #2]
	byte buf[2] = { 0, 0 };
 80023ce:	2300      	movs	r3, #0
 80023d0:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Mem_Read(hi2c, dev_addr, mem_addr, sizeof(byte), buf, 2,
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	b299      	uxth	r1, r3
 80023d6:	78bb      	ldrb	r3, [r7, #2]
 80023d8:	b29a      	uxth	r2, r3
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
 80023de:	9302      	str	r3, [sp, #8]
 80023e0:	2302      	movs	r3, #2
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2301      	movs	r3, #1
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fd55 	bl	8002e9c <HAL_I2C_Mem_Read>
	I2C_TIMEOUT);
	return ((buf[1] << 8) | (buf[0] & 0xff));
 80023f2:	7b7b      	ldrb	r3, [r7, #13]
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	7b3b      	ldrb	r3, [r7, #12]
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	4313      	orrs	r3, r2
 80023fe:	b21b      	sxth	r3, r3
 8002400:	b29b      	uxth	r3, r3
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800240c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002444 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002410:	480d      	ldr	r0, [pc, #52]	; (8002448 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002412:	490e      	ldr	r1, [pc, #56]	; (800244c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002414:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002418:	e002      	b.n	8002420 <LoopCopyDataInit>

0800241a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800241c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241e:	3304      	adds	r3, #4

08002420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002424:	d3f9      	bcc.n	800241a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002426:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002428:	4c0b      	ldr	r4, [pc, #44]	; (8002458 <LoopFillZerobss+0x26>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800242c:	e001      	b.n	8002432 <LoopFillZerobss>

0800242e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002430:	3204      	adds	r2, #4

08002432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002434:	d3fb      	bcc.n	800242e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002436:	f7ff ff0f 	bl	8002258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800243a:	f003 fde7 	bl	800600c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243e:	f7ff fae7 	bl	8001a10 <main>
  bx  lr    
 8002442:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002444:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002450:	0800af9c 	.word	0x0800af9c
  ldr r2, =_sbss
 8002454:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002458:	20000748 	.word	0x20000748

0800245c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800245c:	e7fe      	b.n	800245c <ADC_IRQHandler>

0800245e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002462:	2003      	movs	r0, #3
 8002464:	f000 f8f9 	bl	800265a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002468:	200f      	movs	r0, #15
 800246a:	f7ff fd99 	bl	8001fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800246e:	f7ff fcab 	bl	8001dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_IncTick+0x20>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_IncTick+0x24>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4413      	add	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_IncTick+0x24>)
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000008 	.word	0x20000008
 800249c:	20000734 	.word	0x20000734

080024a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HAL_GetTick+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000734 	.word	0x20000734

080024b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff ffee 	bl	80024a0 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d005      	beq.n	80024de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_Delay+0x44>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024de:	bf00      	nop
 80024e0:	f7ff ffde 	bl	80024a0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d8f7      	bhi.n	80024e0 <HAL_Delay+0x28>
  {
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008

08002500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <__NVIC_SetPriorityGrouping+0x40>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800251c:	4013      	ands	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 800252a:	4313      	orrs	r3, r2
 800252c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252e:	4a04      	ldr	r2, [pc, #16]	; (8002540 <__NVIC_SetPriorityGrouping+0x40>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	60d3      	str	r3, [r2, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00
 8002544:	05fa0000 	.word	0x05fa0000

08002548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <__NVIC_GetPriorityGrouping+0x18>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	f003 0307 	and.w	r3, r3, #7
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	2b00      	cmp	r3, #0
 8002574:	db0b      	blt.n	800258e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4907      	ldr	r1, [pc, #28]	; (800259c <__NVIC_EnableIRQ+0x38>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	2001      	movs	r0, #1
 8002586:	fa00 f202 	lsl.w	r2, r0, r2
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000e100 	.word	0xe000e100

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	; (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	; (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2b04      	cmp	r3, #4
 8002610:	bf28      	it	cs
 8002612:	2304      	movcs	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3304      	adds	r3, #4
 800261a:	2b06      	cmp	r3, #6
 800261c:	d902      	bls.n	8002624 <NVIC_EncodePriority+0x30>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b03      	subs	r3, #3
 8002622:	e000      	b.n	8002626 <NVIC_EncodePriority+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43d9      	mvns	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	4313      	orrs	r3, r2
         );
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ff4c 	bl	8002500 <__NVIC_SetPriorityGrouping>
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002682:	f7ff ff61 	bl	8002548 <__NVIC_GetPriorityGrouping>
 8002686:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	6978      	ldr	r0, [r7, #20]
 800268e:	f7ff ffb1 	bl	80025f4 <NVIC_EncodePriority>
 8002692:	4602      	mov	r2, r0
 8002694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff80 	bl	80025a0 <__NVIC_SetPriority>
}
 80026a0:	bf00      	nop
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff54 	bl	8002564 <__NVIC_EnableIRQ>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026d2:	f7ff fee5 	bl	80024a0 <HAL_GetTick>
 80026d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d008      	beq.n	80026f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e052      	b.n	800279c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0216 	bic.w	r2, r2, #22
 8002704:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002714:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d103      	bne.n	8002726 <HAL_DMA_Abort+0x62>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0208 	bic.w	r2, r2, #8
 8002734:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002746:	e013      	b.n	8002770 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002748:	f7ff feaa 	bl	80024a0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b05      	cmp	r3, #5
 8002754:	d90c      	bls.n	8002770 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2220      	movs	r2, #32
 800275a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2203      	movs	r2, #3
 8002760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e015      	b.n	800279c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1e4      	bne.n	8002748 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	223f      	movs	r2, #63	; 0x3f
 8002784:	409a      	lsls	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d004      	beq.n	80027c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e00c      	b.n	80027dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2205      	movs	r2, #5
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0201 	bic.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	e169      	b.n	8002adc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002808:	2201      	movs	r2, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	429a      	cmp	r2, r3
 8002822:	f040 8158 	bne.w	8002ad6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d005      	beq.n	800283e <HAL_GPIO_Init+0x56>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d130      	bne.n	80028a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 0201 	and.w	r2, r3, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d017      	beq.n	80028dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d123      	bne.n	8002930 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	08da      	lsrs	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3208      	adds	r2, #8
 80028f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	08da      	lsrs	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3208      	adds	r2, #8
 800292a:	69b9      	ldr	r1, [r7, #24]
 800292c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80b2 	beq.w	8002ad6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002972:	4b60      	ldr	r3, [pc, #384]	; (8002af4 <HAL_GPIO_Init+0x30c>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	4a5f      	ldr	r2, [pc, #380]	; (8002af4 <HAL_GPIO_Init+0x30c>)
 8002978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297c:	6453      	str	r3, [r2, #68]	; 0x44
 800297e:	4b5d      	ldr	r3, [pc, #372]	; (8002af4 <HAL_GPIO_Init+0x30c>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800298a:	4a5b      	ldr	r2, [pc, #364]	; (8002af8 <HAL_GPIO_Init+0x310>)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	3302      	adds	r3, #2
 8002992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	220f      	movs	r2, #15
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a52      	ldr	r2, [pc, #328]	; (8002afc <HAL_GPIO_Init+0x314>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d02b      	beq.n	8002a0e <HAL_GPIO_Init+0x226>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a51      	ldr	r2, [pc, #324]	; (8002b00 <HAL_GPIO_Init+0x318>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d025      	beq.n	8002a0a <HAL_GPIO_Init+0x222>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a50      	ldr	r2, [pc, #320]	; (8002b04 <HAL_GPIO_Init+0x31c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d01f      	beq.n	8002a06 <HAL_GPIO_Init+0x21e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4f      	ldr	r2, [pc, #316]	; (8002b08 <HAL_GPIO_Init+0x320>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d019      	beq.n	8002a02 <HAL_GPIO_Init+0x21a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4e      	ldr	r2, [pc, #312]	; (8002b0c <HAL_GPIO_Init+0x324>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_GPIO_Init+0x216>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4d      	ldr	r2, [pc, #308]	; (8002b10 <HAL_GPIO_Init+0x328>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00d      	beq.n	80029fa <HAL_GPIO_Init+0x212>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4c      	ldr	r2, [pc, #304]	; (8002b14 <HAL_GPIO_Init+0x32c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <HAL_GPIO_Init+0x20e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4b      	ldr	r2, [pc, #300]	; (8002b18 <HAL_GPIO_Init+0x330>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_GPIO_Init+0x20a>
 80029ee:	2307      	movs	r3, #7
 80029f0:	e00e      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 80029f2:	2308      	movs	r3, #8
 80029f4:	e00c      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 80029f6:	2306      	movs	r3, #6
 80029f8:	e00a      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 80029fa:	2305      	movs	r3, #5
 80029fc:	e008      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e006      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 8002a02:	2303      	movs	r3, #3
 8002a04:	e004      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e002      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	f002 0203 	and.w	r2, r2, #3
 8002a16:	0092      	lsls	r2, r2, #2
 8002a18:	4093      	lsls	r3, r2
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a20:	4935      	ldr	r1, [pc, #212]	; (8002af8 <HAL_GPIO_Init+0x310>)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	3302      	adds	r3, #2
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a52:	4a32      	ldr	r2, [pc, #200]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a58:	4b30      	ldr	r3, [pc, #192]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a7c:	4a27      	ldr	r2, [pc, #156]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa6:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad0:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	f67f ae92 	bls.w	8002808 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3724      	adds	r7, #36	; 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40013800 	.word	0x40013800
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40020800 	.word	0x40020800
 8002b08:	40020c00 	.word	0x40020c00
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40021400 	.word	0x40021400
 8002b14:	40021800 	.word	0x40021800
 8002b18:	40021c00 	.word	0x40021c00
 8002b1c:	40013c00 	.word	0x40013c00

08002b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	807b      	strh	r3, [r7, #2]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b30:	787b      	ldrb	r3, [r7, #1]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b3c:	e003      	b.n	8002b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b3e:	887b      	ldrh	r3, [r7, #2]
 8002b40:	041a      	lsls	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	619a      	str	r2, [r3, #24]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e07f      	b.n	8002c66 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff f948 	bl	8001e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2224      	movs	r2, #36	; 0x24
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ba4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d107      	bne.n	8002bce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	e006      	b.n	8002bdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d104      	bne.n	8002bee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <HAL_I2C_Init+0x11c>)
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69d9      	ldr	r1, [r3, #28]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1a      	ldr	r2, [r3, #32]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	02008000 	.word	0x02008000

08002c74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	817b      	strh	r3, [r7, #10]
 8002c86:	460b      	mov	r3, r1
 8002c88:	813b      	strh	r3, [r7, #8]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	f040 80f9 	bne.w	8002e8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_I2C_Mem_Write+0x34>
 8002ca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0ed      	b.n	8002e90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2C_Mem_Write+0x4e>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e0e6      	b.n	8002e90 <HAL_I2C_Mem_Write+0x21c>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cca:	f7ff fbe9 	bl	80024a0 <HAL_GetTick>
 8002cce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2319      	movs	r3, #25
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fbcb 	bl	8003478 <I2C_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0d1      	b.n	8002e90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2221      	movs	r2, #33	; 0x21
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2240      	movs	r2, #64	; 0x40
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a3a      	ldr	r2, [r7, #32]
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d14:	88f8      	ldrh	r0, [r7, #6]
 8002d16:	893a      	ldrh	r2, [r7, #8]
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	4603      	mov	r3, r0
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fadb 	bl	80032e0 <I2C_RequestMemoryWrite>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0a9      	b.n	8002e90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2bff      	cmp	r3, #255	; 0xff
 8002d44:	d90e      	bls.n	8002d64 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	22ff      	movs	r2, #255	; 0xff
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	8979      	ldrh	r1, [r7, #10]
 8002d54:	2300      	movs	r3, #0
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fd33 	bl	80037c8 <I2C_TransferConfig>
 8002d62:	e00f      	b.n	8002d84 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	8979      	ldrh	r1, [r7, #10]
 8002d76:	2300      	movs	r3, #0
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fd22 	bl	80037c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fbb5 	bl	80034f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e07b      	b.n	8002e90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	781a      	ldrb	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d034      	beq.n	8002e3c <HAL_I2C_Mem_Write+0x1c8>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d130      	bne.n	8002e3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	2200      	movs	r2, #0
 8002de2:	2180      	movs	r1, #128	; 0x80
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 fb47 	bl	8003478 <I2C_WaitOnFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e04d      	b.n	8002e90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2bff      	cmp	r3, #255	; 0xff
 8002dfc:	d90e      	bls.n	8002e1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	22ff      	movs	r2, #255	; 0xff
 8002e02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	8979      	ldrh	r1, [r7, #10]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fcd7 	bl	80037c8 <I2C_TransferConfig>
 8002e1a:	e00f      	b.n	8002e3c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	8979      	ldrh	r1, [r7, #10]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fcc6 	bl	80037c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d19e      	bne.n	8002d84 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fb94 	bl	8003578 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e01a      	b.n	8002e90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <HAL_I2C_Mem_Write+0x224>)
 8002e6e:	400b      	ands	r3, r1
 8002e70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
  }
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	fe00e800 	.word	0xfe00e800

08002e9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	817b      	strh	r3, [r7, #10]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	813b      	strh	r3, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	f040 80fd 	bne.w	80030be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_I2C_Mem_Read+0x34>
 8002eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0f1      	b.n	80030c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Mem_Read+0x4e>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e0ea      	b.n	80030c0 <HAL_I2C_Mem_Read+0x224>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ef2:	f7ff fad5 	bl	80024a0 <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2319      	movs	r3, #25
 8002efe:	2201      	movs	r2, #1
 8002f00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fab7 	bl	8003478 <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0d5      	b.n	80030c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2222      	movs	r2, #34	; 0x22
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2240      	movs	r2, #64	; 0x40
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f3c:	88f8      	ldrh	r0, [r7, #6]
 8002f3e:	893a      	ldrh	r2, [r7, #8]
 8002f40:	8979      	ldrh	r1, [r7, #10]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fa1b 	bl	8003388 <I2C_RequestMemoryRead>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0ad      	b.n	80030c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2bff      	cmp	r3, #255	; 0xff
 8002f6c:	d90e      	bls.n	8002f8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	22ff      	movs	r2, #255	; 0xff
 8002f72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	8979      	ldrh	r1, [r7, #10]
 8002f7c:	4b52      	ldr	r3, [pc, #328]	; (80030c8 <HAL_I2C_Mem_Read+0x22c>)
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fc1f 	bl	80037c8 <I2C_TransferConfig>
 8002f8a:	e00f      	b.n	8002fac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	8979      	ldrh	r1, [r7, #10]
 8002f9e:	4b4a      	ldr	r3, [pc, #296]	; (80030c8 <HAL_I2C_Mem_Read+0x22c>)
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 fc0e 	bl	80037c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fa5e 	bl	8003478 <I2C_WaitOnFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07c      	b.n	80030c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d034      	beq.n	800306c <HAL_I2C_Mem_Read+0x1d0>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	2b00      	cmp	r3, #0
 8003008:	d130      	bne.n	800306c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	2200      	movs	r2, #0
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 fa2f 	bl	8003478 <I2C_WaitOnFlagUntilTimeout>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e04d      	b.n	80030c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2bff      	cmp	r3, #255	; 0xff
 800302c:	d90e      	bls.n	800304c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	22ff      	movs	r2, #255	; 0xff
 8003032:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	b2da      	uxtb	r2, r3
 800303a:	8979      	ldrh	r1, [r7, #10]
 800303c:	2300      	movs	r3, #0
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fbbf 	bl	80037c8 <I2C_TransferConfig>
 800304a:	e00f      	b.n	800306c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305a:	b2da      	uxtb	r2, r3
 800305c:	8979      	ldrh	r1, [r7, #10]
 800305e:	2300      	movs	r3, #0
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fbae 	bl	80037c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d19a      	bne.n	8002fac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 fa7c 	bl	8003578 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e01a      	b.n	80030c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2220      	movs	r2, #32
 8003090:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_I2C_Mem_Read+0x230>)
 800309e:	400b      	ands	r3, r1
 80030a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
  }
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	80002400 	.word	0x80002400
 80030cc:	fe00e800 	.word	0xfe00e800

080030d0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	460b      	mov	r3, r1
 80030de:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	f040 80ef 	bne.w	80032d0 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003100:	d101      	bne.n	8003106 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003102:	2302      	movs	r3, #2
 8003104:	e0e5      	b.n	80032d2 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_I2C_IsDeviceReady+0x44>
 8003110:	2302      	movs	r3, #2
 8003112:	e0de      	b.n	80032d2 <HAL_I2C_IsDeviceReady+0x202>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2224      	movs	r2, #36	; 0x24
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d105      	bne.n	800313e <HAL_I2C_IsDeviceReady+0x6e>
 8003132:	897b      	ldrh	r3, [r7, #10]
 8003134:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003138:	4b68      	ldr	r3, [pc, #416]	; (80032dc <HAL_I2C_IsDeviceReady+0x20c>)
 800313a:	4313      	orrs	r3, r2
 800313c:	e004      	b.n	8003148 <HAL_I2C_IsDeviceReady+0x78>
 800313e:	897b      	ldrh	r3, [r7, #10]
 8003140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003144:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800314e:	f7ff f9a7 	bl	80024a0 <HAL_GetTick>
 8003152:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b20      	cmp	r3, #32
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b10      	cmp	r3, #16
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003180:	e034      	b.n	80031ec <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d01a      	beq.n	80031c0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800318a:	f7ff f989 	bl	80024a0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d302      	bcc.n	80031a0 <HAL_I2C_IsDeviceReady+0xd0>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10f      	bne.n	80031c0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e088      	b.n	80032d2 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	bf0c      	ite	eq
 80031ce:	2301      	moveq	r3, #1
 80031d0:	2300      	movne	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80031ec:	7ffb      	ldrb	r3, [r7, #31]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <HAL_I2C_IsDeviceReady+0x128>
 80031f2:	7fbb      	ldrb	r3, [r7, #30]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0c4      	beq.n	8003182 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b10      	cmp	r3, #16
 8003204:	d01a      	beq.n	800323c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2200      	movs	r2, #0
 800320e:	2120      	movs	r1, #32
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f931 	bl	8003478 <I2C_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e058      	b.n	80032d2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2220      	movs	r2, #32
 8003226:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e04a      	b.n	80032d2 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2200      	movs	r2, #0
 8003244:	2120      	movs	r1, #32
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f916 	bl	8003478 <I2C_WaitOnFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e03d      	b.n	80032d2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2210      	movs	r2, #16
 800325c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2220      	movs	r2, #32
 8003264:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	d118      	bne.n	80032a0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800327c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2200      	movs	r2, #0
 8003286:	2120      	movs	r1, #32
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f8f5 	bl	8003478 <I2C_WaitOnFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e01c      	b.n	80032d2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2220      	movs	r2, #32
 800329e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	3301      	adds	r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	f63f af3d 	bhi.w	800312a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	02002000 	.word	0x02002000

080032e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	4608      	mov	r0, r1
 80032ea:	4611      	mov	r1, r2
 80032ec:	461a      	mov	r2, r3
 80032ee:	4603      	mov	r3, r0
 80032f0:	817b      	strh	r3, [r7, #10]
 80032f2:	460b      	mov	r3, r1
 80032f4:	813b      	strh	r3, [r7, #8]
 80032f6:	4613      	mov	r3, r2
 80032f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	8979      	ldrh	r1, [r7, #10]
 8003300:	4b20      	ldr	r3, [pc, #128]	; (8003384 <I2C_RequestMemoryWrite+0xa4>)
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 fa5d 	bl	80037c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	69b9      	ldr	r1, [r7, #24]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f8f0 	bl	80034f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e02c      	b.n	800337c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d105      	bne.n	8003334 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003328:	893b      	ldrh	r3, [r7, #8]
 800332a:	b2da      	uxtb	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	629a      	str	r2, [r3, #40]	; 0x28
 8003332:	e015      	b.n	8003360 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003334:	893b      	ldrh	r3, [r7, #8]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	b29b      	uxth	r3, r3
 800333a:	b2da      	uxtb	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	69b9      	ldr	r1, [r7, #24]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f8d6 	bl	80034f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e012      	b.n	800337c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003356:	893b      	ldrh	r3, [r7, #8]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2200      	movs	r2, #0
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f884 	bl	8003478 <I2C_WaitOnFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	80002000 	.word	0x80002000

08003388 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	4608      	mov	r0, r1
 8003392:	4611      	mov	r1, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4603      	mov	r3, r0
 8003398:	817b      	strh	r3, [r7, #10]
 800339a:	460b      	mov	r3, r1
 800339c:	813b      	strh	r3, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	8979      	ldrh	r1, [r7, #10]
 80033a8:	4b20      	ldr	r3, [pc, #128]	; (800342c <I2C_RequestMemoryRead+0xa4>)
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	2300      	movs	r3, #0
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa0a 	bl	80037c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	69b9      	ldr	r1, [r7, #24]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f89d 	bl	80034f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e02c      	b.n	8003422 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d105      	bne.n	80033da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033ce:	893b      	ldrh	r3, [r7, #8]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28
 80033d8:	e015      	b.n	8003406 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033da:	893b      	ldrh	r3, [r7, #8]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	b29b      	uxth	r3, r3
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	69b9      	ldr	r1, [r7, #24]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f883 	bl	80034f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e012      	b.n	8003422 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033fc:	893b      	ldrh	r3, [r7, #8]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2200      	movs	r2, #0
 800340e:	2140      	movs	r1, #64	; 0x40
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f831 	bl	8003478 <I2C_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	80002000 	.word	0x80002000

08003430 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b02      	cmp	r3, #2
 8003444:	d103      	bne.n	800344e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2200      	movs	r2, #0
 800344c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d007      	beq.n	800346c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	619a      	str	r2, [r3, #24]
  }
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003488:	e022      	b.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d01e      	beq.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003492:	f7ff f805 	bl	80024a0 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d302      	bcc.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d113      	bne.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ac:	f043 0220 	orr.w	r2, r3, #32
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e00f      	b.n	80034f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	429a      	cmp	r2, r3
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d0cd      	beq.n	800348a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003504:	e02c      	b.n	8003560 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f870 	bl	80035f0 <I2C_IsErrorOccurred>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e02a      	b.n	8003570 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d01e      	beq.n	8003560 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003522:	f7fe ffbd 	bl	80024a0 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d113      	bne.n	8003560 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e007      	b.n	8003570 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d1cb      	bne.n	8003506 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003584:	e028      	b.n	80035d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f830 	bl	80035f0 <I2C_IsErrorOccurred>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e026      	b.n	80035e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7fe ff81 	bl	80024a0 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d113      	bne.n	80035d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e007      	b.n	80035e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d1cf      	bne.n	8003586 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d075      	beq.n	8003708 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2210      	movs	r2, #16
 8003622:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003624:	e056      	b.n	80036d4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d052      	beq.n	80036d4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800362e:	f7fe ff37 	bl	80024a0 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <I2C_IsErrorOccurred+0x54>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d147      	bne.n	80036d4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003656:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003666:	d12e      	bne.n	80036c6 <I2C_IsErrorOccurred+0xd6>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800366e:	d02a      	beq.n	80036c6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	2b20      	cmp	r3, #32
 8003674:	d027      	beq.n	80036c6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003684:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003686:	f7fe ff0b 	bl	80024a0 <HAL_GetTick>
 800368a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800368c:	e01b      	b.n	80036c6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800368e:	f7fe ff07 	bl	80024a0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b19      	cmp	r3, #25
 800369a:	d914      	bls.n	80036c6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d1dc      	bne.n	800368e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d003      	beq.n	80036ea <I2C_IsErrorOccurred+0xfa>
 80036e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d09d      	beq.n	8003626 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2220      	movs	r2, #32
 80036f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	f043 0304 	orr.w	r3, r3, #4
 8003700:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800372a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00b      	beq.n	8003754 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	f043 0308 	orr.w	r3, r3, #8
 8003742:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800374c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800376e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01c      	beq.n	80037b8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f7ff fe56 	bl	8003430 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6859      	ldr	r1, [r3, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <I2C_IsErrorOccurred+0x1d4>)
 8003790:	400b      	ands	r3, r1
 8003792:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	431a      	orrs	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3728      	adds	r7, #40	; 0x28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	fe00e800 	.word	0xfe00e800

080037c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	817b      	strh	r3, [r7, #10]
 80037d6:	4613      	mov	r3, r2
 80037d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037da:	897b      	ldrh	r3, [r7, #10]
 80037dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037e0:	7a7b      	ldrb	r3, [r7, #9]
 80037e2:	041b      	lsls	r3, r3, #16
 80037e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037e8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037f6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	0d5b      	lsrs	r3, r3, #21
 8003802:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003806:	4b08      	ldr	r3, [pc, #32]	; (8003828 <I2C_TransferConfig+0x60>)
 8003808:	430b      	orrs	r3, r1
 800380a:	43db      	mvns	r3, r3
 800380c:	ea02 0103 	and.w	r1, r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	03ff63ff 	.word	0x03ff63ff

0800382c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b20      	cmp	r3, #32
 8003840:	d138      	bne.n	80038b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800384c:	2302      	movs	r3, #2
 800384e:	e032      	b.n	80038b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2224      	movs	r2, #36	; 0x24
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800387e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e000      	b.n	80038b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038b4:	2302      	movs	r3, #2
  }
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d139      	bne.n	800394c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e033      	b.n	800394e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2224      	movs	r2, #36	; 0x24
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003914:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	e000      	b.n	800394e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003964:	2300      	movs	r3, #0
 8003966:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e291      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8087 	beq.w	8003a8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003980:	4b96      	ldr	r3, [pc, #600]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	2b04      	cmp	r3, #4
 800398a:	d00c      	beq.n	80039a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398c:	4b93      	ldr	r3, [pc, #588]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	2b08      	cmp	r3, #8
 8003996:	d112      	bne.n	80039be <HAL_RCC_OscConfig+0x62>
 8003998:	4b90      	ldr	r3, [pc, #576]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a4:	d10b      	bne.n	80039be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a6:	4b8d      	ldr	r3, [pc, #564]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d06c      	beq.n	8003a8c <HAL_RCC_OscConfig+0x130>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d168      	bne.n	8003a8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e26b      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c6:	d106      	bne.n	80039d6 <HAL_RCC_OscConfig+0x7a>
 80039c8:	4b84      	ldr	r3, [pc, #528]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a83      	ldr	r2, [pc, #524]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 80039ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e02e      	b.n	8003a34 <HAL_RCC_OscConfig+0xd8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x9c>
 80039de:	4b7f      	ldr	r3, [pc, #508]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a7e      	ldr	r2, [pc, #504]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 80039e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b7c      	ldr	r3, [pc, #496]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a7b      	ldr	r2, [pc, #492]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 80039f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e01d      	b.n	8003a34 <HAL_RCC_OscConfig+0xd8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCC_OscConfig+0xc0>
 8003a02:	4b76      	ldr	r3, [pc, #472]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a75      	ldr	r2, [pc, #468]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	4b73      	ldr	r3, [pc, #460]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a72      	ldr	r2, [pc, #456]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCC_OscConfig+0xd8>
 8003a1c:	4b6f      	ldr	r3, [pc, #444]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a6e      	ldr	r2, [pc, #440]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	4b6c      	ldr	r3, [pc, #432]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a6b      	ldr	r2, [pc, #428]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d013      	beq.n	8003a64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fd30 	bl	80024a0 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fe fd2c 	bl	80024a0 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e21f      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	4b61      	ldr	r3, [pc, #388]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0xe8>
 8003a62:	e014      	b.n	8003a8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fe fd1c 	bl	80024a0 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a6c:	f7fe fd18 	bl	80024a0 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b64      	cmp	r3, #100	; 0x64
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e20b      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7e:	4b57      	ldr	r3, [pc, #348]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x110>
 8003a8a:	e000      	b.n	8003a8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d069      	beq.n	8003b6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a9a:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa6:	4b4d      	ldr	r3, [pc, #308]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d11c      	bne.n	8003aec <HAL_RCC_OscConfig+0x190>
 8003ab2:	4b4a      	ldr	r3, [pc, #296]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d116      	bne.n	8003aec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x17a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d001      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e1df      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad6:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	493d      	ldr	r1, [pc, #244]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aea:	e040      	b.n	8003b6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d023      	beq.n	8003b3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af4:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a38      	ldr	r2, [pc, #224]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fe fcce 	bl	80024a0 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b08:	f7fe fcca 	bl	80024a0 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e1bd      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1a:	4b30      	ldr	r3, [pc, #192]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b26:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4929      	ldr	r1, [pc, #164]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]
 8003b3a:	e018      	b.n	8003b6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3c:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a26      	ldr	r2, [pc, #152]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fe fcaa 	bl	80024a0 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b50:	f7fe fca6 	bl	80024a0 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e199      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b62:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d038      	beq.n	8003bec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d019      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b82:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8e:	f7fe fc87 	bl	80024a0 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b96:	f7fe fc83 	bl	80024a0 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e176      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x23a>
 8003bb4:	e01a      	b.n	8003bec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb6:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bba:	4a08      	ldr	r2, [pc, #32]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc2:	f7fe fc6d 	bl	80024a0 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bca:	f7fe fc69 	bl	80024a0 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d903      	bls.n	8003be0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e15c      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
 8003bdc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be0:	4b91      	ldr	r3, [pc, #580]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ee      	bne.n	8003bca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80a4 	beq.w	8003d42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfa:	4b8b      	ldr	r3, [pc, #556]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10d      	bne.n	8003c22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c06:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	4a87      	ldr	r2, [pc, #540]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c10:	6413      	str	r3, [r2, #64]	; 0x40
 8003c12:	4b85      	ldr	r3, [pc, #532]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c22:	4b82      	ldr	r3, [pc, #520]	; (8003e2c <HAL_RCC_OscConfig+0x4d0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d118      	bne.n	8003c60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c2e:	4b7f      	ldr	r3, [pc, #508]	; (8003e2c <HAL_RCC_OscConfig+0x4d0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a7e      	ldr	r2, [pc, #504]	; (8003e2c <HAL_RCC_OscConfig+0x4d0>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7fe fc31 	bl	80024a0 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c42:	f7fe fc2d 	bl	80024a0 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b64      	cmp	r3, #100	; 0x64
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e120      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c54:	4b75      	ldr	r3, [pc, #468]	; (8003e2c <HAL_RCC_OscConfig+0x4d0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x31a>
 8003c68:	4b6f      	ldr	r3, [pc, #444]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	4a6e      	ldr	r2, [pc, #440]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6713      	str	r3, [r2, #112]	; 0x70
 8003c74:	e02d      	b.n	8003cd2 <HAL_RCC_OscConfig+0x376>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x33c>
 8003c7e:	4b6a      	ldr	r3, [pc, #424]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	4a69      	ldr	r2, [pc, #420]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8a:	4b67      	ldr	r3, [pc, #412]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4a66      	ldr	r2, [pc, #408]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
 8003c96:	e01c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x376>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b05      	cmp	r3, #5
 8003c9e:	d10c      	bne.n	8003cba <HAL_RCC_OscConfig+0x35e>
 8003ca0:	4b61      	ldr	r3, [pc, #388]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a60      	ldr	r2, [pc, #384]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cac:	4b5e      	ldr	r3, [pc, #376]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a5d      	ldr	r2, [pc, #372]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb8:	e00b      	b.n	8003cd2 <HAL_RCC_OscConfig+0x376>
 8003cba:	4b5b      	ldr	r3, [pc, #364]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	4a5a      	ldr	r2, [pc, #360]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc6:	4b58      	ldr	r3, [pc, #352]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a57      	ldr	r2, [pc, #348]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003ccc:	f023 0304 	bic.w	r3, r3, #4
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d015      	beq.n	8003d06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fe fbe1 	bl	80024a0 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fe fbdd 	bl	80024a0 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e0ce      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ee      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x386>
 8003d04:	e014      	b.n	8003d30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d06:	f7fe fbcb 	bl	80024a0 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fe fbc7 	bl	80024a0 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e0b8      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d24:	4b40      	ldr	r3, [pc, #256]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1ee      	bne.n	8003d0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d105      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d36:	4b3c      	ldr	r3, [pc, #240]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	4a3b      	ldr	r2, [pc, #236]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80a4 	beq.w	8003e94 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d4c:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d06b      	beq.n	8003e30 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d149      	bne.n	8003df4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d60:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a30      	ldr	r2, [pc, #192]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fb98 	bl	80024a0 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d74:	f7fe fb94 	bl	80024a0 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e087      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d86:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	019b      	lsls	r3, r3, #6
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	3b01      	subs	r3, #1
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	4313      	orrs	r3, r2
 8003db8:	4a1b      	ldr	r2, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003dba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dbe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a18      	ldr	r2, [pc, #96]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fe fb68 	bl	80024a0 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd4:	f7fe fb64 	bl	80024a0 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e057      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x478>
 8003df2:	e04f      	b.n	8003e94 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a0b      	ldr	r2, [pc, #44]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fe fb4e 	bl	80024a0 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fe fb4a 	bl	80024a0 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e03d      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1a:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4ac>
 8003e26:	e035      	b.n	8003e94 <HAL_RCC_OscConfig+0x538>
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e30:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <HAL_RCC_OscConfig+0x544>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d028      	beq.n	8003e90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d121      	bne.n	8003e90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d11a      	bne.n	8003e90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e60:	4013      	ands	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d111      	bne.n	8003e90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0d0      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b6a      	ldr	r3, [pc, #424]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d910      	bls.n	8003eec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b67      	ldr	r3, [pc, #412]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 020f 	bic.w	r2, r3, #15
 8003ed2:	4965      	ldr	r1, [pc, #404]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b63      	ldr	r3, [pc, #396]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0b8      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f04:	4b59      	ldr	r3, [pc, #356]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a58      	ldr	r2, [pc, #352]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f1c:	4b53      	ldr	r3, [pc, #332]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a52      	ldr	r2, [pc, #328]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f28:	4b50      	ldr	r3, [pc, #320]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	494d      	ldr	r1, [pc, #308]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d040      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4e:	4b47      	ldr	r3, [pc, #284]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d115      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e07f      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f66:	4b41      	ldr	r3, [pc, #260]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e073      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f76:	4b3d      	ldr	r3, [pc, #244]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e06b      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b39      	ldr	r3, [pc, #228]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4936      	ldr	r1, [pc, #216]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f98:	f7fe fa82 	bl	80024a0 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fe fa7e 	bl	80024a0 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e053      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b2d      	ldr	r3, [pc, #180]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b27      	ldr	r3, [pc, #156]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d210      	bcs.n	8003ff8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 020f 	bic.w	r2, r3, #15
 8003fde:	4922      	ldr	r1, [pc, #136]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e032      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004004:	4b19      	ldr	r3, [pc, #100]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4916      	ldr	r1, [pc, #88]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	490e      	ldr	r1, [pc, #56]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004036:	f000 f821 	bl	800407c <HAL_RCC_GetSysClockFreq>
 800403a:	4602      	mov	r2, r0
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	490a      	ldr	r1, [pc, #40]	; (8004070 <HAL_RCC_ClockConfig+0x1cc>)
 8004048:	5ccb      	ldrb	r3, [r1, r3]
 800404a:	fa22 f303 	lsr.w	r3, r2, r3
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <HAL_RCC_ClockConfig+0x1d0>)
 8004050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <HAL_RCC_ClockConfig+0x1d4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fd ffa2 	bl	8001fa0 <HAL_InitTick>

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40023c00 	.word	0x40023c00
 800406c:	40023800 	.word	0x40023800
 8004070:	0800aacc 	.word	0x0800aacc
 8004074:	20000000 	.word	0x20000000
 8004078:	20000004 	.word	0x20000004

0800407c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800407c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004080:	b090      	sub	sp, #64	; 0x40
 8004082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	637b      	str	r3, [r7, #52]	; 0x34
 8004088:	2300      	movs	r3, #0
 800408a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800408c:	2300      	movs	r3, #0
 800408e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004094:	4b59      	ldr	r3, [pc, #356]	; (80041fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	2b08      	cmp	r3, #8
 800409e:	d00d      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x40>
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	f200 80a1 	bhi.w	80041e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x34>
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d003      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ae:	e09b      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b0:	4b53      	ldr	r3, [pc, #332]	; (8004200 <HAL_RCC_GetSysClockFreq+0x184>)
 80040b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040b4:	e09b      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040b6:	4b53      	ldr	r3, [pc, #332]	; (8004204 <HAL_RCC_GetSysClockFreq+0x188>)
 80040b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040ba:	e098      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040bc:	4b4f      	ldr	r3, [pc, #316]	; (80041fc <HAL_RCC_GetSysClockFreq+0x180>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040c6:	4b4d      	ldr	r3, [pc, #308]	; (80041fc <HAL_RCC_GetSysClockFreq+0x180>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d028      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d2:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <HAL_RCC_GetSysClockFreq+0x180>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	099b      	lsrs	r3, r3, #6
 80040d8:	2200      	movs	r2, #0
 80040da:	623b      	str	r3, [r7, #32]
 80040dc:	627a      	str	r2, [r7, #36]	; 0x24
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040e4:	2100      	movs	r1, #0
 80040e6:	4b47      	ldr	r3, [pc, #284]	; (8004204 <HAL_RCC_GetSysClockFreq+0x188>)
 80040e8:	fb03 f201 	mul.w	r2, r3, r1
 80040ec:	2300      	movs	r3, #0
 80040ee:	fb00 f303 	mul.w	r3, r0, r3
 80040f2:	4413      	add	r3, r2
 80040f4:	4a43      	ldr	r2, [pc, #268]	; (8004204 <HAL_RCC_GetSysClockFreq+0x188>)
 80040f6:	fba0 1202 	umull	r1, r2, r0, r2
 80040fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040fc:	460a      	mov	r2, r1
 80040fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8004100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004102:	4413      	add	r3, r2
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004108:	2200      	movs	r2, #0
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	61fa      	str	r2, [r7, #28]
 800410e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004112:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004116:	f7fc fddf 	bl	8000cd8 <__aeabi_uldivmod>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4613      	mov	r3, r2
 8004120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004122:	e053      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004124:	4b35      	ldr	r3, [pc, #212]	; (80041fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	099b      	lsrs	r3, r3, #6
 800412a:	2200      	movs	r2, #0
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	617a      	str	r2, [r7, #20]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004136:	f04f 0b00 	mov.w	fp, #0
 800413a:	4652      	mov	r2, sl
 800413c:	465b      	mov	r3, fp
 800413e:	f04f 0000 	mov.w	r0, #0
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	0159      	lsls	r1, r3, #5
 8004148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800414c:	0150      	lsls	r0, r2, #5
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	ebb2 080a 	subs.w	r8, r2, sl
 8004156:	eb63 090b 	sbc.w	r9, r3, fp
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004166:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800416a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800416e:	ebb2 0408 	subs.w	r4, r2, r8
 8004172:	eb63 0509 	sbc.w	r5, r3, r9
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	00eb      	lsls	r3, r5, #3
 8004180:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004184:	00e2      	lsls	r2, r4, #3
 8004186:	4614      	mov	r4, r2
 8004188:	461d      	mov	r5, r3
 800418a:	eb14 030a 	adds.w	r3, r4, sl
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	eb45 030b 	adc.w	r3, r5, fp
 8004194:	607b      	str	r3, [r7, #4]
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041a2:	4629      	mov	r1, r5
 80041a4:	028b      	lsls	r3, r1, #10
 80041a6:	4621      	mov	r1, r4
 80041a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041ac:	4621      	mov	r1, r4
 80041ae:	028a      	lsls	r2, r1, #10
 80041b0:	4610      	mov	r0, r2
 80041b2:	4619      	mov	r1, r3
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b6:	2200      	movs	r2, #0
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	60fa      	str	r2, [r7, #12]
 80041bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041c0:	f7fc fd8a 	bl	8000cd8 <__aeabi_uldivmod>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4613      	mov	r3, r2
 80041ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_RCC_GetSysClockFreq+0x180>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	3301      	adds	r3, #1
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80041dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041e6:	e002      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <HAL_RCC_GetSysClockFreq+0x184>)
 80041ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3740      	adds	r7, #64	; 0x40
 80041f4:	46bd      	mov	sp, r7
 80041f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041fa:	bf00      	nop
 80041fc:	40023800 	.word	0x40023800
 8004200:	00f42400 	.word	0x00f42400
 8004204:	017d7840 	.word	0x017d7840

08004208 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800420c:	4b03      	ldr	r3, [pc, #12]	; (800421c <HAL_RCC_GetHCLKFreq+0x14>)
 800420e:	681b      	ldr	r3, [r3, #0]
}
 8004210:	4618      	mov	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000000 	.word	0x20000000

08004220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004224:	f7ff fff0 	bl	8004208 <HAL_RCC_GetHCLKFreq>
 8004228:	4602      	mov	r2, r0
 800422a:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	0a9b      	lsrs	r3, r3, #10
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	4903      	ldr	r1, [pc, #12]	; (8004244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004236:	5ccb      	ldrb	r3, [r1, r3]
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800423c:	4618      	mov	r0, r3
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40023800 	.word	0x40023800
 8004244:	0800aadc 	.word	0x0800aadc

08004248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800424c:	f7ff ffdc 	bl	8004208 <HAL_RCC_GetHCLKFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b05      	ldr	r3, [pc, #20]	; (8004268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	0b5b      	lsrs	r3, r3, #13
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4903      	ldr	r1, [pc, #12]	; (800426c <HAL_RCC_GetPCLK2Freq+0x24>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004264:	4618      	mov	r0, r3
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40023800 	.word	0x40023800
 800426c:	0800aadc 	.word	0x0800aadc

08004270 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	220f      	movs	r2, #15
 800427e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004280:	4b12      	ldr	r3, [pc, #72]	; (80042cc <HAL_RCC_GetClockConfig+0x5c>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0203 	and.w	r2, r3, #3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800428c:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_RCC_GetClockConfig+0x5c>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004298:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <HAL_RCC_GetClockConfig+0x5c>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_RCC_GetClockConfig+0x5c>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	08db      	lsrs	r3, r3, #3
 80042aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042b2:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <HAL_RCC_GetClockConfig+0x60>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 020f 	and.w	r2, r3, #15
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	601a      	str	r2, [r3, #0]
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800
 80042d0:	40023c00 	.word	0x40023c00

080042d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d012      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042f8:	4b65      	ldr	r3, [pc, #404]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a64      	ldr	r2, [pc, #400]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004302:	6093      	str	r3, [r2, #8]
 8004304:	4b62      	ldr	r3, [pc, #392]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	4960      	ldr	r1, [pc, #384]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800431a:	2301      	movs	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d017      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800432a:	4b59      	ldr	r3, [pc, #356]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800432c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004330:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	4955      	ldr	r1, [pc, #340]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004348:	d101      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800434a:	2301      	movs	r3, #1
 800434c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8004356:	2301      	movs	r3, #1
 8004358:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d017      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004366:	4b4a      	ldr	r3, [pc, #296]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800436c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	4946      	ldr	r1, [pc, #280]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004384:	d101      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004386:	2301      	movs	r3, #1
 8004388:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004392:	2301      	movs	r3, #1
 8004394:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 808b 	beq.w	80044ba <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043a4:	4b3a      	ldr	r3, [pc, #232]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	4a39      	ldr	r2, [pc, #228]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ae:	6413      	str	r3, [r2, #64]	; 0x40
 80043b0:	4b37      	ldr	r3, [pc, #220]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043bc:	4b35      	ldr	r3, [pc, #212]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a34      	ldr	r2, [pc, #208]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c8:	f7fe f86a 	bl	80024a0 <HAL_GetTick>
 80043cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d0:	f7fe f866 	bl	80024a0 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	; 0x64
 80043dc:	d901      	bls.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e2bc      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043e2:	4b2c      	ldr	r3, [pc, #176]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ee:	4b28      	ldr	r3, [pc, #160]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d035      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	429a      	cmp	r2, r3
 800440a:	d02e      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800440c:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004414:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004416:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004420:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004422:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	4a1a      	ldr	r2, [pc, #104]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800442c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800442e:	4a18      	ldr	r2, [pc, #96]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004434:	4b16      	ldr	r3, [pc, #88]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d114      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fe f82e 	bl	80024a0 <HAL_GetTick>
 8004444:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004446:	e00a      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004448:	f7fe f82a 	bl	80024a0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	; 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e27e      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0ee      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004476:	d111      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004486:	400b      	ands	r3, r1
 8004488:	4901      	ldr	r1, [pc, #4]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
 800448e:	e00b      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004490:	40023800 	.word	0x40023800
 8004494:	40007000 	.word	0x40007000
 8004498:	0ffffcff 	.word	0x0ffffcff
 800449c:	4ba4      	ldr	r3, [pc, #656]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4aa3      	ldr	r2, [pc, #652]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044a6:	6093      	str	r3, [r2, #8]
 80044a8:	4ba1      	ldr	r3, [pc, #644]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b4:	499e      	ldr	r1, [pc, #632]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d010      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044c6:	4b9a      	ldr	r3, [pc, #616]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044cc:	4a98      	ldr	r2, [pc, #608]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044d6:	4b96      	ldr	r3, [pc, #600]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	4993      	ldr	r1, [pc, #588]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044f4:	4b8e      	ldr	r3, [pc, #568]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004502:	498b      	ldr	r1, [pc, #556]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004516:	4b86      	ldr	r3, [pc, #536]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004524:	4982      	ldr	r1, [pc, #520]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004538:	4b7d      	ldr	r3, [pc, #500]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004546:	497a      	ldr	r1, [pc, #488]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800455a:	4b75      	ldr	r3, [pc, #468]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004560:	f023 0203 	bic.w	r2, r3, #3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004568:	4971      	ldr	r1, [pc, #452]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800457c:	4b6c      	ldr	r3, [pc, #432]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f023 020c 	bic.w	r2, r3, #12
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	4969      	ldr	r1, [pc, #420]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800459e:	4b64      	ldr	r3, [pc, #400]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	4960      	ldr	r1, [pc, #384]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045c0:	4b5b      	ldr	r3, [pc, #364]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ce:	4958      	ldr	r1, [pc, #352]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045e2:	4b53      	ldr	r3, [pc, #332]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f0:	494f      	ldr	r1, [pc, #316]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004604:	4b4a      	ldr	r3, [pc, #296]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004612:	4947      	ldr	r1, [pc, #284]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004626:	4b42      	ldr	r3, [pc, #264]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004634:	493e      	ldr	r1, [pc, #248]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004648:	4b39      	ldr	r3, [pc, #228]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004656:	4936      	ldr	r1, [pc, #216]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d011      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800466a:	4b31      	ldr	r3, [pc, #196]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004670:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004678:	492d      	ldr	r1, [pc, #180]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004688:	d101      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800468a:	2301      	movs	r3, #1
 800468c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800469a:	4b25      	ldr	r3, [pc, #148]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800469c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046a8:	4921      	ldr	r1, [pc, #132]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046bc:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ca:	4919      	ldr	r1, [pc, #100]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80046de:	4b14      	ldr	r3, [pc, #80]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ec:	4910      	ldr	r1, [pc, #64]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d006      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 809d 	beq.w	8004842 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004708:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a08      	ldr	r2, [pc, #32]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800470e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004714:	f7fd fec4 	bl	80024a0 <HAL_GetTick>
 8004718:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800471a:	e00b      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800471c:	f7fd fec0 	bl	80024a0 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b64      	cmp	r3, #100	; 0x64
 8004728:	d904      	bls.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e116      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x688>
 800472e:	bf00      	nop
 8004730:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004734:	4b8b      	ldr	r3, [pc, #556]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1ed      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d017      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	2b00      	cmp	r3, #0
 8004752:	d113      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004754:	4b83      	ldr	r3, [pc, #524]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475a:	0e1b      	lsrs	r3, r3, #24
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	019a      	lsls	r2, r3, #6
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	061b      	lsls	r3, r3, #24
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	071b      	lsls	r3, r3, #28
 8004774:	497b      	ldr	r1, [pc, #492]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800479a:	2b00      	cmp	r3, #0
 800479c:	d024      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a6:	d11f      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047a8:	4b6e      	ldr	r3, [pc, #440]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ae:	0f1b      	lsrs	r3, r3, #28
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	019a      	lsls	r2, r3, #6
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	431a      	orrs	r2, r3
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	071b      	lsls	r3, r3, #28
 80047c8:	4966      	ldr	r1, [pc, #408]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047d0:	4b64      	ldr	r3, [pc, #400]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d6:	f023 021f 	bic.w	r2, r3, #31
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	3b01      	subs	r3, #1
 80047e0:	4960      	ldr	r1, [pc, #384]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00d      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	019a      	lsls	r2, r3, #6
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	061b      	lsls	r3, r3, #24
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	071b      	lsls	r3, r3, #28
 8004808:	4956      	ldr	r1, [pc, #344]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004810:	4b54      	ldr	r3, [pc, #336]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a53      	ldr	r2, [pc, #332]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800481a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481c:	f7fd fe40 	bl	80024a0 <HAL_GetTick>
 8004820:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004824:	f7fd fe3c 	bl	80024a0 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b64      	cmp	r3, #100	; 0x64
 8004830:	d901      	bls.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e092      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004836:	4b4b      	ldr	r3, [pc, #300]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f0      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b01      	cmp	r3, #1
 8004846:	f040 8088 	bne.w	800495a <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800484a:	4b46      	ldr	r3, [pc, #280]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a45      	ldr	r2, [pc, #276]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004856:	f7fd fe23 	bl	80024a0 <HAL_GetTick>
 800485a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800485c:	e008      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800485e:	f7fd fe1f 	bl	80024a0 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b64      	cmp	r3, #100	; 0x64
 800486a:	d901      	bls.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e075      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004870:	4b3c      	ldr	r3, [pc, #240]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800487c:	d0ef      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800489a:	2b00      	cmp	r3, #0
 800489c:	d024      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d120      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048a6:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	0c1b      	lsrs	r3, r3, #16
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	019a      	lsls	r2, r3, #6
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	041b      	lsls	r3, r3, #16
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	061b      	lsls	r3, r3, #24
 80048c6:	4927      	ldr	r1, [pc, #156]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048ce:	4b25      	ldr	r3, [pc, #148]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	3b01      	subs	r3, #1
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	4920      	ldr	r1, [pc, #128]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d018      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x652>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048fc:	d113      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048fe:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004904:	0e1b      	lsrs	r3, r3, #24
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	019a      	lsls	r2, r3, #6
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	431a      	orrs	r2, r3
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	061b      	lsls	r3, r3, #24
 800491e:	4911      	ldr	r1, [pc, #68]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004926:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a0e      	ldr	r2, [pc, #56]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800492c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004932:	f7fd fdb5 	bl	80024a0 <HAL_GetTick>
 8004936:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004938:	e008      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800493a:	f7fd fdb1 	bl	80024a0 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b64      	cmp	r3, #100	; 0x64
 8004946:	d901      	bls.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e007      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004958:	d1ef      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3720      	adds	r7, #32
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40023800 	.word	0x40023800

08004968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e049      	b.n	8004a0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f841 	bl	8004a16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f000 fa00 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d001      	beq.n	8004a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e054      	b.n	8004aee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a26      	ldr	r2, [pc, #152]	; (8004afc <HAL_TIM_Base_Start_IT+0xd0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d022      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x80>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6e:	d01d      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x80>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a22      	ldr	r2, [pc, #136]	; (8004b00 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d018      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x80>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a21      	ldr	r2, [pc, #132]	; (8004b04 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x80>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1f      	ldr	r2, [pc, #124]	; (8004b08 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x80>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1e      	ldr	r2, [pc, #120]	; (8004b0c <HAL_TIM_Base_Start_IT+0xe0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x80>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x80>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1b      	ldr	r2, [pc, #108]	; (8004b14 <HAL_TIM_Base_Start_IT+0xe8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d115      	bne.n	8004ad8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <HAL_TIM_Base_Start_IT+0xec>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d015      	beq.n	8004aea <HAL_TIM_Base_Start_IT+0xbe>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac4:	d011      	beq.n	8004aea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	e008      	b.n	8004aea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	e000      	b.n	8004aec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40010000 	.word	0x40010000
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40000800 	.word	0x40000800
 8004b08:	40000c00 	.word	0x40000c00
 8004b0c:	40010400 	.word	0x40010400
 8004b10:	40014000 	.word	0x40014000
 8004b14:	40001800 	.word	0x40001800
 8004b18:	00010007 	.word	0x00010007

08004b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d122      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d11b      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0202 	mvn.w	r2, #2
 8004b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f905 	bl	8004d6e <HAL_TIM_IC_CaptureCallback>
 8004b64:	e005      	b.n	8004b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f8f7 	bl	8004d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f908 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d122      	bne.n	8004bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d11b      	bne.n	8004bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0204 	mvn.w	r2, #4
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f8db 	bl	8004d6e <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f8cd 	bl	8004d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f8de 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d122      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d11b      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0208 	mvn.w	r2, #8
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f8b1 	bl	8004d6e <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f8a3 	bl	8004d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f8b4 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d122      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d11b      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0210 	mvn.w	r2, #16
 8004c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2208      	movs	r2, #8
 8004c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f887 	bl	8004d6e <HAL_TIM_IC_CaptureCallback>
 8004c60:	e005      	b.n	8004c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f879 	bl	8004d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f88a 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d10e      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d107      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0201 	mvn.w	r2, #1
 8004c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fd f808 	bl	8001cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004caa:	2b80      	cmp	r3, #128	; 0x80
 8004cac:	d10e      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb8:	2b80      	cmp	r3, #128	; 0x80
 8004cba:	d107      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f91a 	bl	8004f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cda:	d10e      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d107      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f90d 	bl	8004f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d10e      	bne.n	8004d26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d107      	bne.n	8004d26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f838 	bl	8004d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d10e      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d107      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f06f 0220 	mvn.w	r2, #32
 8004d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f8cd 	bl	8004eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a40      	ldr	r2, [pc, #256]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dca:	d00f      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a3d      	ldr	r2, [pc, #244]	; (8004ec4 <TIM_Base_SetConfig+0x118>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a3c      	ldr	r2, [pc, #240]	; (8004ec8 <TIM_Base_SetConfig+0x11c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d007      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3b      	ldr	r2, [pc, #236]	; (8004ecc <TIM_Base_SetConfig+0x120>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3a      	ldr	r2, [pc, #232]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d108      	bne.n	8004dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a2f      	ldr	r2, [pc, #188]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d02b      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0c:	d027      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2c      	ldr	r2, [pc, #176]	; (8004ec4 <TIM_Base_SetConfig+0x118>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d023      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2b      	ldr	r2, [pc, #172]	; (8004ec8 <TIM_Base_SetConfig+0x11c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01f      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2a      	ldr	r2, [pc, #168]	; (8004ecc <TIM_Base_SetConfig+0x120>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01b      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d017      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a28      	ldr	r2, [pc, #160]	; (8004ed4 <TIM_Base_SetConfig+0x128>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a27      	ldr	r2, [pc, #156]	; (8004ed8 <TIM_Base_SetConfig+0x12c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00f      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a26      	ldr	r2, [pc, #152]	; (8004edc <TIM_Base_SetConfig+0x130>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a25      	ldr	r2, [pc, #148]	; (8004ee0 <TIM_Base_SetConfig+0x134>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a24      	ldr	r2, [pc, #144]	; (8004ee4 <TIM_Base_SetConfig+0x138>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a23      	ldr	r2, [pc, #140]	; (8004ee8 <TIM_Base_SetConfig+0x13c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_Base_SetConfig+0xf8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a0c      	ldr	r2, [pc, #48]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d103      	bne.n	8004eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	615a      	str	r2, [r3, #20]
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40010400 	.word	0x40010400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800
 8004ee0:	40001800 	.word	0x40001800
 8004ee4:	40001c00 	.word	0x40001c00
 8004ee8:	40002000 	.word	0x40002000

08004eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e040      	b.n	8004fbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fc ffc0 	bl	8001ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2224      	movs	r2, #36	; 0x24
 8004f54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0201 	bic.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fbaa 	bl	80056c0 <UART_SetConfig>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e022      	b.n	8004fbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fe02 	bl	8005b88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fe89 	bl	8005ccc <UART_CheckIdleState>
 8004fba:	4603      	mov	r3, r0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	f040 8081 	bne.w	80050e0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_UART_Transmit+0x26>
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e079      	b.n	80050e2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_UART_Transmit+0x38>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e072      	b.n	80050e2 <HAL_UART_Transmit+0x11e>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2221      	movs	r2, #33	; 0x21
 8005010:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005012:	f7fd fa45 	bl	80024a0 <HAL_GetTick>
 8005016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005030:	d108      	bne.n	8005044 <HAL_UART_Transmit+0x80>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d104      	bne.n	8005044 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	e003      	b.n	800504c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005054:	e02c      	b.n	80050b0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2200      	movs	r2, #0
 800505e:	2180      	movs	r1, #128	; 0x80
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fe66 	bl	8005d32 <UART_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e038      	b.n	80050e2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005084:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	3302      	adds	r3, #2
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	e007      	b.n	800509e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	3301      	adds	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1cc      	bne.n	8005056 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2200      	movs	r2, #0
 80050c4:	2140      	movs	r1, #64	; 0x40
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fe33 	bl	8005d32 <UART_WaitOnFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e005      	b.n	80050e2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	e000      	b.n	80050e2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80050e0:	2302      	movs	r3, #2
  }
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b0ba      	sub	sp, #232	; 0xe8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005112:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005116:	f640 030f 	movw	r3, #2063	; 0x80f
 800511a:	4013      	ands	r3, r2
 800511c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d115      	bne.n	8005154 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00f      	beq.n	8005154 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d009      	beq.n	8005154 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 828f 	beq.w	8005668 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	4798      	blx	r3
      }
      return;
 8005152:	e289      	b.n	8005668 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 8117 	beq.w	800538c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800515e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800516a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800516e:	4b85      	ldr	r3, [pc, #532]	; (8005384 <HAL_UART_IRQHandler+0x298>)
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 810a 	beq.w	800538c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d011      	beq.n	80051a8 <HAL_UART_IRQHandler+0xbc>
 8005184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2201      	movs	r2, #1
 8005196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800519e:	f043 0201 	orr.w	r2, r3, #1
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d011      	beq.n	80051d8 <HAL_UART_IRQHandler+0xec>
 80051b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2202      	movs	r2, #2
 80051c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ce:	f043 0204 	orr.w	r2, r3, #4
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d011      	beq.n	8005208 <HAL_UART_IRQHandler+0x11c>
 80051e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2204      	movs	r2, #4
 80051f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051fe:	f043 0202 	orr.w	r2, r3, #2
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d017      	beq.n	8005244 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d105      	bne.n	800522c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005224:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00b      	beq.n	8005244 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2208      	movs	r2, #8
 8005232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800523a:	f043 0208 	orr.w	r2, r3, #8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800524c:	2b00      	cmp	r3, #0
 800524e:	d012      	beq.n	8005276 <HAL_UART_IRQHandler+0x18a>
 8005250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005254:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00c      	beq.n	8005276 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 81f5 	beq.w	800566c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00d      	beq.n	80052aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800528e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d005      	beq.n	80052ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d04f      	beq.n	800536e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fdf3 	bl	8005eba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b40      	cmp	r3, #64	; 0x40
 80052e0:	d141      	bne.n	8005366 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3308      	adds	r3, #8
 80052e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3308      	adds	r3, #8
 800530a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800530e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800531a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1d9      	bne.n	80052e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005332:	2b00      	cmp	r3, #0
 8005334:	d013      	beq.n	800535e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533a:	4a13      	ldr	r2, [pc, #76]	; (8005388 <HAL_UART_IRQHandler+0x29c>)
 800533c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	4618      	mov	r0, r3
 8005344:	f7fd fa2e 	bl	80027a4 <HAL_DMA_Abort_IT>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d017      	beq.n	800537e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005358:	4610      	mov	r0, r2
 800535a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	e00f      	b.n	800537e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f998 	bl	8005694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	e00b      	b.n	800537e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f994 	bl	8005694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536c:	e007      	b.n	800537e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f990 	bl	8005694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800537c:	e176      	b.n	800566c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537e:	bf00      	nop
    return;
 8005380:	e174      	b.n	800566c <HAL_UART_IRQHandler+0x580>
 8005382:	bf00      	nop
 8005384:	04000120 	.word	0x04000120
 8005388:	08005f81 	.word	0x08005f81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005390:	2b01      	cmp	r3, #1
 8005392:	f040 8144 	bne.w	800561e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 813d 	beq.w	800561e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a8:	f003 0310 	and.w	r3, r3, #16
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8136 	beq.w	800561e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2210      	movs	r2, #16
 80053b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	f040 80b2 	bne.w	800552e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8148 	beq.w	8005670 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053ea:	429a      	cmp	r2, r3
 80053ec:	f080 8140 	bcs.w	8005670 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005404:	f000 8085 	beq.w	8005512 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800541c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005432:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005436:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800543e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800544a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1da      	bne.n	8005408 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3308      	adds	r3, #8
 8005458:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005464:	f023 0301 	bic.w	r3, r3, #1
 8005468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3308      	adds	r3, #8
 8005472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005476:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800547a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800547e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e1      	bne.n	8005452 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800549e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e3      	bne.n	800548e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e2:	f023 0310 	bic.w	r3, r3, #16
 80054e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80054f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e4      	bne.n	80054d2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	4618      	mov	r0, r3
 800550e:	f7fd f8d9 	bl	80026c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800551e:	b29b      	uxth	r3, r3
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	b29b      	uxth	r3, r3
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f8be 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800552c:	e0a0      	b.n	8005670 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800553a:	b29b      	uxth	r3, r3
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8092 	beq.w	8005674 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8005550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 808d 	beq.w	8005674 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800556e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800557c:	647b      	str	r3, [r7, #68]	; 0x44
 800557e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800558a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e4      	bne.n	800555a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	623b      	str	r3, [r7, #32]
   return(result);
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3308      	adds	r3, #8
 80055b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055b4:	633a      	str	r2, [r7, #48]	; 0x30
 80055b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e3      	bne.n	8005590 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0310 	bic.w	r3, r3, #16
 80055ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	69b9      	ldr	r1, [r7, #24]
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	617b      	str	r3, [r7, #20]
   return(result);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e4      	bne.n	80055da <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f846 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800561c:	e02a      	b.n	8005674 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800561e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00e      	beq.n	8005648 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800562a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005632:	2b00      	cmp	r3, #0
 8005634:	d008      	beq.n	8005648 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01c      	beq.n	8005678 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	4798      	blx	r3
    }
    return;
 8005646:	e017      	b.n	8005678 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d012      	beq.n	800567a <HAL_UART_IRQHandler+0x58e>
 8005654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00c      	beq.n	800567a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fca3 	bl	8005fac <UART_EndTransmit_IT>
    return;
 8005666:	e008      	b.n	800567a <HAL_UART_IRQHandler+0x58e>
      return;
 8005668:	bf00      	nop
 800566a:	e006      	b.n	800567a <HAL_UART_IRQHandler+0x58e>
    return;
 800566c:	bf00      	nop
 800566e:	e004      	b.n	800567a <HAL_UART_IRQHandler+0x58e>
      return;
 8005670:	bf00      	nop
 8005672:	e002      	b.n	800567a <HAL_UART_IRQHandler+0x58e>
      return;
 8005674:	bf00      	nop
 8005676:	e000      	b.n	800567a <HAL_UART_IRQHandler+0x58e>
    return;
 8005678:	bf00      	nop
  }

}
 800567a:	37e8      	adds	r7, #232	; 0xe8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4ba6      	ldr	r3, [pc, #664]	; (8005984 <UART_SetConfig+0x2c4>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	6979      	ldr	r1, [r7, #20]
 80056f4:	430b      	orrs	r3, r1
 80056f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	430a      	orrs	r2, r1
 8005730:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a94      	ldr	r2, [pc, #592]	; (8005988 <UART_SetConfig+0x2c8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d120      	bne.n	800577e <UART_SetConfig+0xbe>
 800573c:	4b93      	ldr	r3, [pc, #588]	; (800598c <UART_SetConfig+0x2cc>)
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b03      	cmp	r3, #3
 8005748:	d816      	bhi.n	8005778 <UART_SetConfig+0xb8>
 800574a:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <UART_SetConfig+0x90>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	08005761 	.word	0x08005761
 8005754:	0800576d 	.word	0x0800576d
 8005758:	08005767 	.word	0x08005767
 800575c:	08005773 	.word	0x08005773
 8005760:	2301      	movs	r3, #1
 8005762:	77fb      	strb	r3, [r7, #31]
 8005764:	e150      	b.n	8005a08 <UART_SetConfig+0x348>
 8005766:	2302      	movs	r3, #2
 8005768:	77fb      	strb	r3, [r7, #31]
 800576a:	e14d      	b.n	8005a08 <UART_SetConfig+0x348>
 800576c:	2304      	movs	r3, #4
 800576e:	77fb      	strb	r3, [r7, #31]
 8005770:	e14a      	b.n	8005a08 <UART_SetConfig+0x348>
 8005772:	2308      	movs	r3, #8
 8005774:	77fb      	strb	r3, [r7, #31]
 8005776:	e147      	b.n	8005a08 <UART_SetConfig+0x348>
 8005778:	2310      	movs	r3, #16
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e144      	b.n	8005a08 <UART_SetConfig+0x348>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a83      	ldr	r2, [pc, #524]	; (8005990 <UART_SetConfig+0x2d0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d132      	bne.n	80057ee <UART_SetConfig+0x12e>
 8005788:	4b80      	ldr	r3, [pc, #512]	; (800598c <UART_SetConfig+0x2cc>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578e:	f003 030c 	and.w	r3, r3, #12
 8005792:	2b0c      	cmp	r3, #12
 8005794:	d828      	bhi.n	80057e8 <UART_SetConfig+0x128>
 8005796:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0xdc>)
 8005798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579c:	080057d1 	.word	0x080057d1
 80057a0:	080057e9 	.word	0x080057e9
 80057a4:	080057e9 	.word	0x080057e9
 80057a8:	080057e9 	.word	0x080057e9
 80057ac:	080057dd 	.word	0x080057dd
 80057b0:	080057e9 	.word	0x080057e9
 80057b4:	080057e9 	.word	0x080057e9
 80057b8:	080057e9 	.word	0x080057e9
 80057bc:	080057d7 	.word	0x080057d7
 80057c0:	080057e9 	.word	0x080057e9
 80057c4:	080057e9 	.word	0x080057e9
 80057c8:	080057e9 	.word	0x080057e9
 80057cc:	080057e3 	.word	0x080057e3
 80057d0:	2300      	movs	r3, #0
 80057d2:	77fb      	strb	r3, [r7, #31]
 80057d4:	e118      	b.n	8005a08 <UART_SetConfig+0x348>
 80057d6:	2302      	movs	r3, #2
 80057d8:	77fb      	strb	r3, [r7, #31]
 80057da:	e115      	b.n	8005a08 <UART_SetConfig+0x348>
 80057dc:	2304      	movs	r3, #4
 80057de:	77fb      	strb	r3, [r7, #31]
 80057e0:	e112      	b.n	8005a08 <UART_SetConfig+0x348>
 80057e2:	2308      	movs	r3, #8
 80057e4:	77fb      	strb	r3, [r7, #31]
 80057e6:	e10f      	b.n	8005a08 <UART_SetConfig+0x348>
 80057e8:	2310      	movs	r3, #16
 80057ea:	77fb      	strb	r3, [r7, #31]
 80057ec:	e10c      	b.n	8005a08 <UART_SetConfig+0x348>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a68      	ldr	r2, [pc, #416]	; (8005994 <UART_SetConfig+0x2d4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d120      	bne.n	800583a <UART_SetConfig+0x17a>
 80057f8:	4b64      	ldr	r3, [pc, #400]	; (800598c <UART_SetConfig+0x2cc>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005802:	2b30      	cmp	r3, #48	; 0x30
 8005804:	d013      	beq.n	800582e <UART_SetConfig+0x16e>
 8005806:	2b30      	cmp	r3, #48	; 0x30
 8005808:	d814      	bhi.n	8005834 <UART_SetConfig+0x174>
 800580a:	2b20      	cmp	r3, #32
 800580c:	d009      	beq.n	8005822 <UART_SetConfig+0x162>
 800580e:	2b20      	cmp	r3, #32
 8005810:	d810      	bhi.n	8005834 <UART_SetConfig+0x174>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <UART_SetConfig+0x15c>
 8005816:	2b10      	cmp	r3, #16
 8005818:	d006      	beq.n	8005828 <UART_SetConfig+0x168>
 800581a:	e00b      	b.n	8005834 <UART_SetConfig+0x174>
 800581c:	2300      	movs	r3, #0
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	e0f2      	b.n	8005a08 <UART_SetConfig+0x348>
 8005822:	2302      	movs	r3, #2
 8005824:	77fb      	strb	r3, [r7, #31]
 8005826:	e0ef      	b.n	8005a08 <UART_SetConfig+0x348>
 8005828:	2304      	movs	r3, #4
 800582a:	77fb      	strb	r3, [r7, #31]
 800582c:	e0ec      	b.n	8005a08 <UART_SetConfig+0x348>
 800582e:	2308      	movs	r3, #8
 8005830:	77fb      	strb	r3, [r7, #31]
 8005832:	e0e9      	b.n	8005a08 <UART_SetConfig+0x348>
 8005834:	2310      	movs	r3, #16
 8005836:	77fb      	strb	r3, [r7, #31]
 8005838:	e0e6      	b.n	8005a08 <UART_SetConfig+0x348>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a56      	ldr	r2, [pc, #344]	; (8005998 <UART_SetConfig+0x2d8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d120      	bne.n	8005886 <UART_SetConfig+0x1c6>
 8005844:	4b51      	ldr	r3, [pc, #324]	; (800598c <UART_SetConfig+0x2cc>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800584e:	2bc0      	cmp	r3, #192	; 0xc0
 8005850:	d013      	beq.n	800587a <UART_SetConfig+0x1ba>
 8005852:	2bc0      	cmp	r3, #192	; 0xc0
 8005854:	d814      	bhi.n	8005880 <UART_SetConfig+0x1c0>
 8005856:	2b80      	cmp	r3, #128	; 0x80
 8005858:	d009      	beq.n	800586e <UART_SetConfig+0x1ae>
 800585a:	2b80      	cmp	r3, #128	; 0x80
 800585c:	d810      	bhi.n	8005880 <UART_SetConfig+0x1c0>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <UART_SetConfig+0x1a8>
 8005862:	2b40      	cmp	r3, #64	; 0x40
 8005864:	d006      	beq.n	8005874 <UART_SetConfig+0x1b4>
 8005866:	e00b      	b.n	8005880 <UART_SetConfig+0x1c0>
 8005868:	2300      	movs	r3, #0
 800586a:	77fb      	strb	r3, [r7, #31]
 800586c:	e0cc      	b.n	8005a08 <UART_SetConfig+0x348>
 800586e:	2302      	movs	r3, #2
 8005870:	77fb      	strb	r3, [r7, #31]
 8005872:	e0c9      	b.n	8005a08 <UART_SetConfig+0x348>
 8005874:	2304      	movs	r3, #4
 8005876:	77fb      	strb	r3, [r7, #31]
 8005878:	e0c6      	b.n	8005a08 <UART_SetConfig+0x348>
 800587a:	2308      	movs	r3, #8
 800587c:	77fb      	strb	r3, [r7, #31]
 800587e:	e0c3      	b.n	8005a08 <UART_SetConfig+0x348>
 8005880:	2310      	movs	r3, #16
 8005882:	77fb      	strb	r3, [r7, #31]
 8005884:	e0c0      	b.n	8005a08 <UART_SetConfig+0x348>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a44      	ldr	r2, [pc, #272]	; (800599c <UART_SetConfig+0x2dc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d125      	bne.n	80058dc <UART_SetConfig+0x21c>
 8005890:	4b3e      	ldr	r3, [pc, #248]	; (800598c <UART_SetConfig+0x2cc>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800589e:	d017      	beq.n	80058d0 <UART_SetConfig+0x210>
 80058a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058a4:	d817      	bhi.n	80058d6 <UART_SetConfig+0x216>
 80058a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058aa:	d00b      	beq.n	80058c4 <UART_SetConfig+0x204>
 80058ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b0:	d811      	bhi.n	80058d6 <UART_SetConfig+0x216>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <UART_SetConfig+0x1fe>
 80058b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ba:	d006      	beq.n	80058ca <UART_SetConfig+0x20a>
 80058bc:	e00b      	b.n	80058d6 <UART_SetConfig+0x216>
 80058be:	2300      	movs	r3, #0
 80058c0:	77fb      	strb	r3, [r7, #31]
 80058c2:	e0a1      	b.n	8005a08 <UART_SetConfig+0x348>
 80058c4:	2302      	movs	r3, #2
 80058c6:	77fb      	strb	r3, [r7, #31]
 80058c8:	e09e      	b.n	8005a08 <UART_SetConfig+0x348>
 80058ca:	2304      	movs	r3, #4
 80058cc:	77fb      	strb	r3, [r7, #31]
 80058ce:	e09b      	b.n	8005a08 <UART_SetConfig+0x348>
 80058d0:	2308      	movs	r3, #8
 80058d2:	77fb      	strb	r3, [r7, #31]
 80058d4:	e098      	b.n	8005a08 <UART_SetConfig+0x348>
 80058d6:	2310      	movs	r3, #16
 80058d8:	77fb      	strb	r3, [r7, #31]
 80058da:	e095      	b.n	8005a08 <UART_SetConfig+0x348>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a2f      	ldr	r2, [pc, #188]	; (80059a0 <UART_SetConfig+0x2e0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d125      	bne.n	8005932 <UART_SetConfig+0x272>
 80058e6:	4b29      	ldr	r3, [pc, #164]	; (800598c <UART_SetConfig+0x2cc>)
 80058e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058f4:	d017      	beq.n	8005926 <UART_SetConfig+0x266>
 80058f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058fa:	d817      	bhi.n	800592c <UART_SetConfig+0x26c>
 80058fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005900:	d00b      	beq.n	800591a <UART_SetConfig+0x25a>
 8005902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005906:	d811      	bhi.n	800592c <UART_SetConfig+0x26c>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <UART_SetConfig+0x254>
 800590c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005910:	d006      	beq.n	8005920 <UART_SetConfig+0x260>
 8005912:	e00b      	b.n	800592c <UART_SetConfig+0x26c>
 8005914:	2301      	movs	r3, #1
 8005916:	77fb      	strb	r3, [r7, #31]
 8005918:	e076      	b.n	8005a08 <UART_SetConfig+0x348>
 800591a:	2302      	movs	r3, #2
 800591c:	77fb      	strb	r3, [r7, #31]
 800591e:	e073      	b.n	8005a08 <UART_SetConfig+0x348>
 8005920:	2304      	movs	r3, #4
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e070      	b.n	8005a08 <UART_SetConfig+0x348>
 8005926:	2308      	movs	r3, #8
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	e06d      	b.n	8005a08 <UART_SetConfig+0x348>
 800592c:	2310      	movs	r3, #16
 800592e:	77fb      	strb	r3, [r7, #31]
 8005930:	e06a      	b.n	8005a08 <UART_SetConfig+0x348>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <UART_SetConfig+0x2e4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d138      	bne.n	80059ae <UART_SetConfig+0x2ee>
 800593c:	4b13      	ldr	r3, [pc, #76]	; (800598c <UART_SetConfig+0x2cc>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005946:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800594a:	d017      	beq.n	800597c <UART_SetConfig+0x2bc>
 800594c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005950:	d82a      	bhi.n	80059a8 <UART_SetConfig+0x2e8>
 8005952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005956:	d00b      	beq.n	8005970 <UART_SetConfig+0x2b0>
 8005958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800595c:	d824      	bhi.n	80059a8 <UART_SetConfig+0x2e8>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <UART_SetConfig+0x2aa>
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005966:	d006      	beq.n	8005976 <UART_SetConfig+0x2b6>
 8005968:	e01e      	b.n	80059a8 <UART_SetConfig+0x2e8>
 800596a:	2300      	movs	r3, #0
 800596c:	77fb      	strb	r3, [r7, #31]
 800596e:	e04b      	b.n	8005a08 <UART_SetConfig+0x348>
 8005970:	2302      	movs	r3, #2
 8005972:	77fb      	strb	r3, [r7, #31]
 8005974:	e048      	b.n	8005a08 <UART_SetConfig+0x348>
 8005976:	2304      	movs	r3, #4
 8005978:	77fb      	strb	r3, [r7, #31]
 800597a:	e045      	b.n	8005a08 <UART_SetConfig+0x348>
 800597c:	2308      	movs	r3, #8
 800597e:	77fb      	strb	r3, [r7, #31]
 8005980:	e042      	b.n	8005a08 <UART_SetConfig+0x348>
 8005982:	bf00      	nop
 8005984:	efff69f3 	.word	0xefff69f3
 8005988:	40011000 	.word	0x40011000
 800598c:	40023800 	.word	0x40023800
 8005990:	40004400 	.word	0x40004400
 8005994:	40004800 	.word	0x40004800
 8005998:	40004c00 	.word	0x40004c00
 800599c:	40005000 	.word	0x40005000
 80059a0:	40011400 	.word	0x40011400
 80059a4:	40007800 	.word	0x40007800
 80059a8:	2310      	movs	r3, #16
 80059aa:	77fb      	strb	r3, [r7, #31]
 80059ac:	e02c      	b.n	8005a08 <UART_SetConfig+0x348>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a72      	ldr	r2, [pc, #456]	; (8005b7c <UART_SetConfig+0x4bc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d125      	bne.n	8005a04 <UART_SetConfig+0x344>
 80059b8:	4b71      	ldr	r3, [pc, #452]	; (8005b80 <UART_SetConfig+0x4c0>)
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80059c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059c6:	d017      	beq.n	80059f8 <UART_SetConfig+0x338>
 80059c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059cc:	d817      	bhi.n	80059fe <UART_SetConfig+0x33e>
 80059ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d2:	d00b      	beq.n	80059ec <UART_SetConfig+0x32c>
 80059d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d8:	d811      	bhi.n	80059fe <UART_SetConfig+0x33e>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <UART_SetConfig+0x326>
 80059de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059e2:	d006      	beq.n	80059f2 <UART_SetConfig+0x332>
 80059e4:	e00b      	b.n	80059fe <UART_SetConfig+0x33e>
 80059e6:	2300      	movs	r3, #0
 80059e8:	77fb      	strb	r3, [r7, #31]
 80059ea:	e00d      	b.n	8005a08 <UART_SetConfig+0x348>
 80059ec:	2302      	movs	r3, #2
 80059ee:	77fb      	strb	r3, [r7, #31]
 80059f0:	e00a      	b.n	8005a08 <UART_SetConfig+0x348>
 80059f2:	2304      	movs	r3, #4
 80059f4:	77fb      	strb	r3, [r7, #31]
 80059f6:	e007      	b.n	8005a08 <UART_SetConfig+0x348>
 80059f8:	2308      	movs	r3, #8
 80059fa:	77fb      	strb	r3, [r7, #31]
 80059fc:	e004      	b.n	8005a08 <UART_SetConfig+0x348>
 80059fe:	2310      	movs	r3, #16
 8005a00:	77fb      	strb	r3, [r7, #31]
 8005a02:	e001      	b.n	8005a08 <UART_SetConfig+0x348>
 8005a04:	2310      	movs	r3, #16
 8005a06:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a10:	d15b      	bne.n	8005aca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005a12:	7ffb      	ldrb	r3, [r7, #31]
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d828      	bhi.n	8005a6a <UART_SetConfig+0x3aa>
 8005a18:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <UART_SetConfig+0x360>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a45 	.word	0x08005a45
 8005a24:	08005a4d 	.word	0x08005a4d
 8005a28:	08005a55 	.word	0x08005a55
 8005a2c:	08005a6b 	.word	0x08005a6b
 8005a30:	08005a5b 	.word	0x08005a5b
 8005a34:	08005a6b 	.word	0x08005a6b
 8005a38:	08005a6b 	.word	0x08005a6b
 8005a3c:	08005a6b 	.word	0x08005a6b
 8005a40:	08005a63 	.word	0x08005a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a44:	f7fe fbec 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 8005a48:	61b8      	str	r0, [r7, #24]
        break;
 8005a4a:	e013      	b.n	8005a74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a4c:	f7fe fbfc 	bl	8004248 <HAL_RCC_GetPCLK2Freq>
 8005a50:	61b8      	str	r0, [r7, #24]
        break;
 8005a52:	e00f      	b.n	8005a74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a54:	4b4b      	ldr	r3, [pc, #300]	; (8005b84 <UART_SetConfig+0x4c4>)
 8005a56:	61bb      	str	r3, [r7, #24]
        break;
 8005a58:	e00c      	b.n	8005a74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a5a:	f7fe fb0f 	bl	800407c <HAL_RCC_GetSysClockFreq>
 8005a5e:	61b8      	str	r0, [r7, #24]
        break;
 8005a60:	e008      	b.n	8005a74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a66:	61bb      	str	r3, [r7, #24]
        break;
 8005a68:	e004      	b.n	8005a74 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	77bb      	strb	r3, [r7, #30]
        break;
 8005a72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d074      	beq.n	8005b64 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	005a      	lsls	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	085b      	lsrs	r3, r3, #1
 8005a84:	441a      	add	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b0f      	cmp	r3, #15
 8005a94:	d916      	bls.n	8005ac4 <UART_SetConfig+0x404>
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a9c:	d212      	bcs.n	8005ac4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f023 030f 	bic.w	r3, r3, #15
 8005aa6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	89fb      	ldrh	r3, [r7, #14]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	89fa      	ldrh	r2, [r7, #14]
 8005ac0:	60da      	str	r2, [r3, #12]
 8005ac2:	e04f      	b.n	8005b64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	77bb      	strb	r3, [r7, #30]
 8005ac8:	e04c      	b.n	8005b64 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aca:	7ffb      	ldrb	r3, [r7, #31]
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d828      	bhi.n	8005b22 <UART_SetConfig+0x462>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <UART_SetConfig+0x418>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005afd 	.word	0x08005afd
 8005adc:	08005b05 	.word	0x08005b05
 8005ae0:	08005b0d 	.word	0x08005b0d
 8005ae4:	08005b23 	.word	0x08005b23
 8005ae8:	08005b13 	.word	0x08005b13
 8005aec:	08005b23 	.word	0x08005b23
 8005af0:	08005b23 	.word	0x08005b23
 8005af4:	08005b23 	.word	0x08005b23
 8005af8:	08005b1b 	.word	0x08005b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005afc:	f7fe fb90 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 8005b00:	61b8      	str	r0, [r7, #24]
        break;
 8005b02:	e013      	b.n	8005b2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b04:	f7fe fba0 	bl	8004248 <HAL_RCC_GetPCLK2Freq>
 8005b08:	61b8      	str	r0, [r7, #24]
        break;
 8005b0a:	e00f      	b.n	8005b2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b0c:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <UART_SetConfig+0x4c4>)
 8005b0e:	61bb      	str	r3, [r7, #24]
        break;
 8005b10:	e00c      	b.n	8005b2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b12:	f7fe fab3 	bl	800407c <HAL_RCC_GetSysClockFreq>
 8005b16:	61b8      	str	r0, [r7, #24]
        break;
 8005b18:	e008      	b.n	8005b2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b1e:	61bb      	str	r3, [r7, #24]
        break;
 8005b20:	e004      	b.n	8005b2c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	77bb      	strb	r3, [r7, #30]
        break;
 8005b2a:	bf00      	nop
    }

    if (pclk != 0U)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d018      	beq.n	8005b64 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	085a      	lsrs	r2, r3, #1
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	441a      	add	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b0f      	cmp	r3, #15
 8005b4a:	d909      	bls.n	8005b60 <UART_SetConfig+0x4a0>
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b52:	d205      	bcs.n	8005b60 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60da      	str	r2, [r3, #12]
 8005b5e:	e001      	b.n	8005b64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b70:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3720      	adds	r7, #32
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40007c00 	.word	0x40007c00
 8005b80:	40023800 	.word	0x40023800
 8005b84:	00f42400 	.word	0x00f42400

08005b88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01a      	beq.n	8005c9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c86:	d10a      	bne.n	8005c9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	605a      	str	r2, [r3, #4]
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cdc:	f7fc fbe0 	bl	80024a0 <HAL_GetTick>
 8005ce0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d10e      	bne.n	8005d0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f817 	bl	8005d32 <UART_WaitOnFlagUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e00d      	b.n	8005d2a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b09c      	sub	sp, #112	; 0x70
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	603b      	str	r3, [r7, #0]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d42:	e0a5      	b.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	f000 80a1 	beq.w	8005e90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fc fba7 	bl	80024a0 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d13e      	bne.n	8005de2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d78:	667b      	str	r3, [r7, #100]	; 0x64
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d84:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e6      	bne.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	663b      	str	r3, [r7, #96]	; 0x60
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3308      	adds	r3, #8
 8005db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005db6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005db8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e5      	bne.n	8005d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e067      	b.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d04f      	beq.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfe:	d147      	bne.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e6      	bne.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3308      	adds	r3, #8
 8005e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e5c:	623a      	str	r2, [r7, #32]
 8005e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	69f9      	ldr	r1, [r7, #28]
 8005e62:	6a3a      	ldr	r2, [r7, #32]
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e5      	bne.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e010      	b.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	69da      	ldr	r2, [r3, #28]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	bf0c      	ite	eq
 8005ea0:	2301      	moveq	r3, #1
 8005ea2:	2300      	movne	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	79fb      	ldrb	r3, [r7, #7]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	f43f af4a 	beq.w	8005d44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3770      	adds	r7, #112	; 0x70
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b095      	sub	sp, #84	; 0x54
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ee2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ee6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e6      	bne.n	8005ec2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3308      	adds	r3, #8
 8005efa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f023 0301 	bic.w	r3, r3, #1
 8005f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3308      	adds	r3, #8
 8005f12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e5      	bne.n	8005ef4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d118      	bne.n	8005f62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f023 0310 	bic.w	r3, r3, #16
 8005f44:	647b      	str	r3, [r7, #68]	; 0x44
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4e:	61bb      	str	r3, [r7, #24]
 8005f50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6979      	ldr	r1, [r7, #20]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e6      	bne.n	8005f30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005f74:	bf00      	nop
 8005f76:	3754      	adds	r7, #84	; 0x54
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f7ff fb78 	bl	8005694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc8:	61fb      	str	r3, [r7, #28]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6979      	ldr	r1, [r7, #20]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e6      	bne.n	8005fb4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff fb44 	bl	8005680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ff8:	bf00      	nop
 8005ffa:	3720      	adds	r7, #32
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <__errno>:
 8006000:	4b01      	ldr	r3, [pc, #4]	; (8006008 <__errno+0x8>)
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	2000000c 	.word	0x2000000c

0800600c <__libc_init_array>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4d0d      	ldr	r5, [pc, #52]	; (8006044 <__libc_init_array+0x38>)
 8006010:	4c0d      	ldr	r4, [pc, #52]	; (8006048 <__libc_init_array+0x3c>)
 8006012:	1b64      	subs	r4, r4, r5
 8006014:	10a4      	asrs	r4, r4, #2
 8006016:	2600      	movs	r6, #0
 8006018:	42a6      	cmp	r6, r4
 800601a:	d109      	bne.n	8006030 <__libc_init_array+0x24>
 800601c:	4d0b      	ldr	r5, [pc, #44]	; (800604c <__libc_init_array+0x40>)
 800601e:	4c0c      	ldr	r4, [pc, #48]	; (8006050 <__libc_init_array+0x44>)
 8006020:	f004 fc92 	bl	800a948 <_init>
 8006024:	1b64      	subs	r4, r4, r5
 8006026:	10a4      	asrs	r4, r4, #2
 8006028:	2600      	movs	r6, #0
 800602a:	42a6      	cmp	r6, r4
 800602c:	d105      	bne.n	800603a <__libc_init_array+0x2e>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	f855 3b04 	ldr.w	r3, [r5], #4
 8006034:	4798      	blx	r3
 8006036:	3601      	adds	r6, #1
 8006038:	e7ee      	b.n	8006018 <__libc_init_array+0xc>
 800603a:	f855 3b04 	ldr.w	r3, [r5], #4
 800603e:	4798      	blx	r3
 8006040:	3601      	adds	r6, #1
 8006042:	e7f2      	b.n	800602a <__libc_init_array+0x1e>
 8006044:	0800af94 	.word	0x0800af94
 8006048:	0800af94 	.word	0x0800af94
 800604c:	0800af94 	.word	0x0800af94
 8006050:	0800af98 	.word	0x0800af98

08006054 <memset>:
 8006054:	4402      	add	r2, r0
 8006056:	4603      	mov	r3, r0
 8006058:	4293      	cmp	r3, r2
 800605a:	d100      	bne.n	800605e <memset+0xa>
 800605c:	4770      	bx	lr
 800605e:	f803 1b01 	strb.w	r1, [r3], #1
 8006062:	e7f9      	b.n	8006058 <memset+0x4>

08006064 <__cvt>:
 8006064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006068:	ec55 4b10 	vmov	r4, r5, d0
 800606c:	2d00      	cmp	r5, #0
 800606e:	460e      	mov	r6, r1
 8006070:	4619      	mov	r1, r3
 8006072:	462b      	mov	r3, r5
 8006074:	bfbb      	ittet	lt
 8006076:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800607a:	461d      	movlt	r5, r3
 800607c:	2300      	movge	r3, #0
 800607e:	232d      	movlt	r3, #45	; 0x2d
 8006080:	700b      	strb	r3, [r1, #0]
 8006082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006084:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006088:	4691      	mov	r9, r2
 800608a:	f023 0820 	bic.w	r8, r3, #32
 800608e:	bfbc      	itt	lt
 8006090:	4622      	movlt	r2, r4
 8006092:	4614      	movlt	r4, r2
 8006094:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006098:	d005      	beq.n	80060a6 <__cvt+0x42>
 800609a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800609e:	d100      	bne.n	80060a2 <__cvt+0x3e>
 80060a0:	3601      	adds	r6, #1
 80060a2:	2102      	movs	r1, #2
 80060a4:	e000      	b.n	80060a8 <__cvt+0x44>
 80060a6:	2103      	movs	r1, #3
 80060a8:	ab03      	add	r3, sp, #12
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	ab02      	add	r3, sp, #8
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	ec45 4b10 	vmov	d0, r4, r5
 80060b4:	4653      	mov	r3, sl
 80060b6:	4632      	mov	r2, r6
 80060b8:	f001 fdae 	bl	8007c18 <_dtoa_r>
 80060bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80060c0:	4607      	mov	r7, r0
 80060c2:	d102      	bne.n	80060ca <__cvt+0x66>
 80060c4:	f019 0f01 	tst.w	r9, #1
 80060c8:	d022      	beq.n	8006110 <__cvt+0xac>
 80060ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060ce:	eb07 0906 	add.w	r9, r7, r6
 80060d2:	d110      	bne.n	80060f6 <__cvt+0x92>
 80060d4:	783b      	ldrb	r3, [r7, #0]
 80060d6:	2b30      	cmp	r3, #48	; 0x30
 80060d8:	d10a      	bne.n	80060f0 <__cvt+0x8c>
 80060da:	2200      	movs	r2, #0
 80060dc:	2300      	movs	r3, #0
 80060de:	4620      	mov	r0, r4
 80060e0:	4629      	mov	r1, r5
 80060e2:	f7fa fd19 	bl	8000b18 <__aeabi_dcmpeq>
 80060e6:	b918      	cbnz	r0, 80060f0 <__cvt+0x8c>
 80060e8:	f1c6 0601 	rsb	r6, r6, #1
 80060ec:	f8ca 6000 	str.w	r6, [sl]
 80060f0:	f8da 3000 	ldr.w	r3, [sl]
 80060f4:	4499      	add	r9, r3
 80060f6:	2200      	movs	r2, #0
 80060f8:	2300      	movs	r3, #0
 80060fa:	4620      	mov	r0, r4
 80060fc:	4629      	mov	r1, r5
 80060fe:	f7fa fd0b 	bl	8000b18 <__aeabi_dcmpeq>
 8006102:	b108      	cbz	r0, 8006108 <__cvt+0xa4>
 8006104:	f8cd 900c 	str.w	r9, [sp, #12]
 8006108:	2230      	movs	r2, #48	; 0x30
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	454b      	cmp	r3, r9
 800610e:	d307      	bcc.n	8006120 <__cvt+0xbc>
 8006110:	9b03      	ldr	r3, [sp, #12]
 8006112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006114:	1bdb      	subs	r3, r3, r7
 8006116:	4638      	mov	r0, r7
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	b004      	add	sp, #16
 800611c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006120:	1c59      	adds	r1, r3, #1
 8006122:	9103      	str	r1, [sp, #12]
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	e7f0      	b.n	800610a <__cvt+0xa6>

08006128 <__exponent>:
 8006128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800612a:	4603      	mov	r3, r0
 800612c:	2900      	cmp	r1, #0
 800612e:	bfb8      	it	lt
 8006130:	4249      	neglt	r1, r1
 8006132:	f803 2b02 	strb.w	r2, [r3], #2
 8006136:	bfb4      	ite	lt
 8006138:	222d      	movlt	r2, #45	; 0x2d
 800613a:	222b      	movge	r2, #43	; 0x2b
 800613c:	2909      	cmp	r1, #9
 800613e:	7042      	strb	r2, [r0, #1]
 8006140:	dd2a      	ble.n	8006198 <__exponent+0x70>
 8006142:	f10d 0407 	add.w	r4, sp, #7
 8006146:	46a4      	mov	ip, r4
 8006148:	270a      	movs	r7, #10
 800614a:	46a6      	mov	lr, r4
 800614c:	460a      	mov	r2, r1
 800614e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006152:	fb07 1516 	mls	r5, r7, r6, r1
 8006156:	3530      	adds	r5, #48	; 0x30
 8006158:	2a63      	cmp	r2, #99	; 0x63
 800615a:	f104 34ff 	add.w	r4, r4, #4294967295
 800615e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006162:	4631      	mov	r1, r6
 8006164:	dcf1      	bgt.n	800614a <__exponent+0x22>
 8006166:	3130      	adds	r1, #48	; 0x30
 8006168:	f1ae 0502 	sub.w	r5, lr, #2
 800616c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006170:	1c44      	adds	r4, r0, #1
 8006172:	4629      	mov	r1, r5
 8006174:	4561      	cmp	r1, ip
 8006176:	d30a      	bcc.n	800618e <__exponent+0x66>
 8006178:	f10d 0209 	add.w	r2, sp, #9
 800617c:	eba2 020e 	sub.w	r2, r2, lr
 8006180:	4565      	cmp	r5, ip
 8006182:	bf88      	it	hi
 8006184:	2200      	movhi	r2, #0
 8006186:	4413      	add	r3, r2
 8006188:	1a18      	subs	r0, r3, r0
 800618a:	b003      	add	sp, #12
 800618c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800618e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006192:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006196:	e7ed      	b.n	8006174 <__exponent+0x4c>
 8006198:	2330      	movs	r3, #48	; 0x30
 800619a:	3130      	adds	r1, #48	; 0x30
 800619c:	7083      	strb	r3, [r0, #2]
 800619e:	70c1      	strb	r1, [r0, #3]
 80061a0:	1d03      	adds	r3, r0, #4
 80061a2:	e7f1      	b.n	8006188 <__exponent+0x60>

080061a4 <_printf_float>:
 80061a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	ed2d 8b02 	vpush	{d8}
 80061ac:	b08d      	sub	sp, #52	; 0x34
 80061ae:	460c      	mov	r4, r1
 80061b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80061b4:	4616      	mov	r6, r2
 80061b6:	461f      	mov	r7, r3
 80061b8:	4605      	mov	r5, r0
 80061ba:	f002 fe8b 	bl	8008ed4 <_localeconv_r>
 80061be:	f8d0 a000 	ldr.w	sl, [r0]
 80061c2:	4650      	mov	r0, sl
 80061c4:	f7fa f82c 	bl	8000220 <strlen>
 80061c8:	2300      	movs	r3, #0
 80061ca:	930a      	str	r3, [sp, #40]	; 0x28
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	9305      	str	r3, [sp, #20]
 80061d0:	f8d8 3000 	ldr.w	r3, [r8]
 80061d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80061d8:	3307      	adds	r3, #7
 80061da:	f023 0307 	bic.w	r3, r3, #7
 80061de:	f103 0208 	add.w	r2, r3, #8
 80061e2:	f8c8 2000 	str.w	r2, [r8]
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80061ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80061f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80061f6:	9307      	str	r3, [sp, #28]
 80061f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80061fc:	ee08 0a10 	vmov	s16, r0
 8006200:	4b9f      	ldr	r3, [pc, #636]	; (8006480 <_printf_float+0x2dc>)
 8006202:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006206:	f04f 32ff 	mov.w	r2, #4294967295
 800620a:	f7fa fcb7 	bl	8000b7c <__aeabi_dcmpun>
 800620e:	bb88      	cbnz	r0, 8006274 <_printf_float+0xd0>
 8006210:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006214:	4b9a      	ldr	r3, [pc, #616]	; (8006480 <_printf_float+0x2dc>)
 8006216:	f04f 32ff 	mov.w	r2, #4294967295
 800621a:	f7fa fc91 	bl	8000b40 <__aeabi_dcmple>
 800621e:	bb48      	cbnz	r0, 8006274 <_printf_float+0xd0>
 8006220:	2200      	movs	r2, #0
 8006222:	2300      	movs	r3, #0
 8006224:	4640      	mov	r0, r8
 8006226:	4649      	mov	r1, r9
 8006228:	f7fa fc80 	bl	8000b2c <__aeabi_dcmplt>
 800622c:	b110      	cbz	r0, 8006234 <_printf_float+0x90>
 800622e:	232d      	movs	r3, #45	; 0x2d
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006234:	4b93      	ldr	r3, [pc, #588]	; (8006484 <_printf_float+0x2e0>)
 8006236:	4894      	ldr	r0, [pc, #592]	; (8006488 <_printf_float+0x2e4>)
 8006238:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800623c:	bf94      	ite	ls
 800623e:	4698      	movls	r8, r3
 8006240:	4680      	movhi	r8, r0
 8006242:	2303      	movs	r3, #3
 8006244:	6123      	str	r3, [r4, #16]
 8006246:	9b05      	ldr	r3, [sp, #20]
 8006248:	f023 0204 	bic.w	r2, r3, #4
 800624c:	6022      	str	r2, [r4, #0]
 800624e:	f04f 0900 	mov.w	r9, #0
 8006252:	9700      	str	r7, [sp, #0]
 8006254:	4633      	mov	r3, r6
 8006256:	aa0b      	add	r2, sp, #44	; 0x2c
 8006258:	4621      	mov	r1, r4
 800625a:	4628      	mov	r0, r5
 800625c:	f000 f9d8 	bl	8006610 <_printf_common>
 8006260:	3001      	adds	r0, #1
 8006262:	f040 8090 	bne.w	8006386 <_printf_float+0x1e2>
 8006266:	f04f 30ff 	mov.w	r0, #4294967295
 800626a:	b00d      	add	sp, #52	; 0x34
 800626c:	ecbd 8b02 	vpop	{d8}
 8006270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	4640      	mov	r0, r8
 800627a:	4649      	mov	r1, r9
 800627c:	f7fa fc7e 	bl	8000b7c <__aeabi_dcmpun>
 8006280:	b140      	cbz	r0, 8006294 <_printf_float+0xf0>
 8006282:	464b      	mov	r3, r9
 8006284:	2b00      	cmp	r3, #0
 8006286:	bfbc      	itt	lt
 8006288:	232d      	movlt	r3, #45	; 0x2d
 800628a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800628e:	487f      	ldr	r0, [pc, #508]	; (800648c <_printf_float+0x2e8>)
 8006290:	4b7f      	ldr	r3, [pc, #508]	; (8006490 <_printf_float+0x2ec>)
 8006292:	e7d1      	b.n	8006238 <_printf_float+0x94>
 8006294:	6863      	ldr	r3, [r4, #4]
 8006296:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800629a:	9206      	str	r2, [sp, #24]
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	d13f      	bne.n	8006320 <_printf_float+0x17c>
 80062a0:	2306      	movs	r3, #6
 80062a2:	6063      	str	r3, [r4, #4]
 80062a4:	9b05      	ldr	r3, [sp, #20]
 80062a6:	6861      	ldr	r1, [r4, #4]
 80062a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80062ac:	2300      	movs	r3, #0
 80062ae:	9303      	str	r3, [sp, #12]
 80062b0:	ab0a      	add	r3, sp, #40	; 0x28
 80062b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80062b6:	ab09      	add	r3, sp, #36	; 0x24
 80062b8:	ec49 8b10 	vmov	d0, r8, r9
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	6022      	str	r2, [r4, #0]
 80062c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80062c4:	4628      	mov	r0, r5
 80062c6:	f7ff fecd 	bl	8006064 <__cvt>
 80062ca:	9b06      	ldr	r3, [sp, #24]
 80062cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062ce:	2b47      	cmp	r3, #71	; 0x47
 80062d0:	4680      	mov	r8, r0
 80062d2:	d108      	bne.n	80062e6 <_printf_float+0x142>
 80062d4:	1cc8      	adds	r0, r1, #3
 80062d6:	db02      	blt.n	80062de <_printf_float+0x13a>
 80062d8:	6863      	ldr	r3, [r4, #4]
 80062da:	4299      	cmp	r1, r3
 80062dc:	dd41      	ble.n	8006362 <_printf_float+0x1be>
 80062de:	f1ab 0b02 	sub.w	fp, fp, #2
 80062e2:	fa5f fb8b 	uxtb.w	fp, fp
 80062e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062ea:	d820      	bhi.n	800632e <_printf_float+0x18a>
 80062ec:	3901      	subs	r1, #1
 80062ee:	465a      	mov	r2, fp
 80062f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80062f4:	9109      	str	r1, [sp, #36]	; 0x24
 80062f6:	f7ff ff17 	bl	8006128 <__exponent>
 80062fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062fc:	1813      	adds	r3, r2, r0
 80062fe:	2a01      	cmp	r2, #1
 8006300:	4681      	mov	r9, r0
 8006302:	6123      	str	r3, [r4, #16]
 8006304:	dc02      	bgt.n	800630c <_printf_float+0x168>
 8006306:	6822      	ldr	r2, [r4, #0]
 8006308:	07d2      	lsls	r2, r2, #31
 800630a:	d501      	bpl.n	8006310 <_printf_float+0x16c>
 800630c:	3301      	adds	r3, #1
 800630e:	6123      	str	r3, [r4, #16]
 8006310:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006314:	2b00      	cmp	r3, #0
 8006316:	d09c      	beq.n	8006252 <_printf_float+0xae>
 8006318:	232d      	movs	r3, #45	; 0x2d
 800631a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800631e:	e798      	b.n	8006252 <_printf_float+0xae>
 8006320:	9a06      	ldr	r2, [sp, #24]
 8006322:	2a47      	cmp	r2, #71	; 0x47
 8006324:	d1be      	bne.n	80062a4 <_printf_float+0x100>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1bc      	bne.n	80062a4 <_printf_float+0x100>
 800632a:	2301      	movs	r3, #1
 800632c:	e7b9      	b.n	80062a2 <_printf_float+0xfe>
 800632e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006332:	d118      	bne.n	8006366 <_printf_float+0x1c2>
 8006334:	2900      	cmp	r1, #0
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	dd0b      	ble.n	8006352 <_printf_float+0x1ae>
 800633a:	6121      	str	r1, [r4, #16]
 800633c:	b913      	cbnz	r3, 8006344 <_printf_float+0x1a0>
 800633e:	6822      	ldr	r2, [r4, #0]
 8006340:	07d0      	lsls	r0, r2, #31
 8006342:	d502      	bpl.n	800634a <_printf_float+0x1a6>
 8006344:	3301      	adds	r3, #1
 8006346:	440b      	add	r3, r1
 8006348:	6123      	str	r3, [r4, #16]
 800634a:	65a1      	str	r1, [r4, #88]	; 0x58
 800634c:	f04f 0900 	mov.w	r9, #0
 8006350:	e7de      	b.n	8006310 <_printf_float+0x16c>
 8006352:	b913      	cbnz	r3, 800635a <_printf_float+0x1b6>
 8006354:	6822      	ldr	r2, [r4, #0]
 8006356:	07d2      	lsls	r2, r2, #31
 8006358:	d501      	bpl.n	800635e <_printf_float+0x1ba>
 800635a:	3302      	adds	r3, #2
 800635c:	e7f4      	b.n	8006348 <_printf_float+0x1a4>
 800635e:	2301      	movs	r3, #1
 8006360:	e7f2      	b.n	8006348 <_printf_float+0x1a4>
 8006362:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006368:	4299      	cmp	r1, r3
 800636a:	db05      	blt.n	8006378 <_printf_float+0x1d4>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	6121      	str	r1, [r4, #16]
 8006370:	07d8      	lsls	r0, r3, #31
 8006372:	d5ea      	bpl.n	800634a <_printf_float+0x1a6>
 8006374:	1c4b      	adds	r3, r1, #1
 8006376:	e7e7      	b.n	8006348 <_printf_float+0x1a4>
 8006378:	2900      	cmp	r1, #0
 800637a:	bfd4      	ite	le
 800637c:	f1c1 0202 	rsble	r2, r1, #2
 8006380:	2201      	movgt	r2, #1
 8006382:	4413      	add	r3, r2
 8006384:	e7e0      	b.n	8006348 <_printf_float+0x1a4>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	055a      	lsls	r2, r3, #21
 800638a:	d407      	bmi.n	800639c <_printf_float+0x1f8>
 800638c:	6923      	ldr	r3, [r4, #16]
 800638e:	4642      	mov	r2, r8
 8006390:	4631      	mov	r1, r6
 8006392:	4628      	mov	r0, r5
 8006394:	47b8      	blx	r7
 8006396:	3001      	adds	r0, #1
 8006398:	d12c      	bne.n	80063f4 <_printf_float+0x250>
 800639a:	e764      	b.n	8006266 <_printf_float+0xc2>
 800639c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063a0:	f240 80e0 	bls.w	8006564 <_printf_float+0x3c0>
 80063a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063a8:	2200      	movs	r2, #0
 80063aa:	2300      	movs	r3, #0
 80063ac:	f7fa fbb4 	bl	8000b18 <__aeabi_dcmpeq>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d034      	beq.n	800641e <_printf_float+0x27a>
 80063b4:	4a37      	ldr	r2, [pc, #220]	; (8006494 <_printf_float+0x2f0>)
 80063b6:	2301      	movs	r3, #1
 80063b8:	4631      	mov	r1, r6
 80063ba:	4628      	mov	r0, r5
 80063bc:	47b8      	blx	r7
 80063be:	3001      	adds	r0, #1
 80063c0:	f43f af51 	beq.w	8006266 <_printf_float+0xc2>
 80063c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063c8:	429a      	cmp	r2, r3
 80063ca:	db02      	blt.n	80063d2 <_printf_float+0x22e>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	07d8      	lsls	r0, r3, #31
 80063d0:	d510      	bpl.n	80063f4 <_printf_float+0x250>
 80063d2:	ee18 3a10 	vmov	r3, s16
 80063d6:	4652      	mov	r2, sl
 80063d8:	4631      	mov	r1, r6
 80063da:	4628      	mov	r0, r5
 80063dc:	47b8      	blx	r7
 80063de:	3001      	adds	r0, #1
 80063e0:	f43f af41 	beq.w	8006266 <_printf_float+0xc2>
 80063e4:	f04f 0800 	mov.w	r8, #0
 80063e8:	f104 091a 	add.w	r9, r4, #26
 80063ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ee:	3b01      	subs	r3, #1
 80063f0:	4543      	cmp	r3, r8
 80063f2:	dc09      	bgt.n	8006408 <_printf_float+0x264>
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	079b      	lsls	r3, r3, #30
 80063f8:	f100 8105 	bmi.w	8006606 <_printf_float+0x462>
 80063fc:	68e0      	ldr	r0, [r4, #12]
 80063fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006400:	4298      	cmp	r0, r3
 8006402:	bfb8      	it	lt
 8006404:	4618      	movlt	r0, r3
 8006406:	e730      	b.n	800626a <_printf_float+0xc6>
 8006408:	2301      	movs	r3, #1
 800640a:	464a      	mov	r2, r9
 800640c:	4631      	mov	r1, r6
 800640e:	4628      	mov	r0, r5
 8006410:	47b8      	blx	r7
 8006412:	3001      	adds	r0, #1
 8006414:	f43f af27 	beq.w	8006266 <_printf_float+0xc2>
 8006418:	f108 0801 	add.w	r8, r8, #1
 800641c:	e7e6      	b.n	80063ec <_printf_float+0x248>
 800641e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	dc39      	bgt.n	8006498 <_printf_float+0x2f4>
 8006424:	4a1b      	ldr	r2, [pc, #108]	; (8006494 <_printf_float+0x2f0>)
 8006426:	2301      	movs	r3, #1
 8006428:	4631      	mov	r1, r6
 800642a:	4628      	mov	r0, r5
 800642c:	47b8      	blx	r7
 800642e:	3001      	adds	r0, #1
 8006430:	f43f af19 	beq.w	8006266 <_printf_float+0xc2>
 8006434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006438:	4313      	orrs	r3, r2
 800643a:	d102      	bne.n	8006442 <_printf_float+0x29e>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	07d9      	lsls	r1, r3, #31
 8006440:	d5d8      	bpl.n	80063f4 <_printf_float+0x250>
 8006442:	ee18 3a10 	vmov	r3, s16
 8006446:	4652      	mov	r2, sl
 8006448:	4631      	mov	r1, r6
 800644a:	4628      	mov	r0, r5
 800644c:	47b8      	blx	r7
 800644e:	3001      	adds	r0, #1
 8006450:	f43f af09 	beq.w	8006266 <_printf_float+0xc2>
 8006454:	f04f 0900 	mov.w	r9, #0
 8006458:	f104 0a1a 	add.w	sl, r4, #26
 800645c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645e:	425b      	negs	r3, r3
 8006460:	454b      	cmp	r3, r9
 8006462:	dc01      	bgt.n	8006468 <_printf_float+0x2c4>
 8006464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006466:	e792      	b.n	800638e <_printf_float+0x1ea>
 8006468:	2301      	movs	r3, #1
 800646a:	4652      	mov	r2, sl
 800646c:	4631      	mov	r1, r6
 800646e:	4628      	mov	r0, r5
 8006470:	47b8      	blx	r7
 8006472:	3001      	adds	r0, #1
 8006474:	f43f aef7 	beq.w	8006266 <_printf_float+0xc2>
 8006478:	f109 0901 	add.w	r9, r9, #1
 800647c:	e7ee      	b.n	800645c <_printf_float+0x2b8>
 800647e:	bf00      	nop
 8006480:	7fefffff 	.word	0x7fefffff
 8006484:	0800aae8 	.word	0x0800aae8
 8006488:	0800aaec 	.word	0x0800aaec
 800648c:	0800aaf4 	.word	0x0800aaf4
 8006490:	0800aaf0 	.word	0x0800aaf0
 8006494:	0800aaf8 	.word	0x0800aaf8
 8006498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800649a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800649c:	429a      	cmp	r2, r3
 800649e:	bfa8      	it	ge
 80064a0:	461a      	movge	r2, r3
 80064a2:	2a00      	cmp	r2, #0
 80064a4:	4691      	mov	r9, r2
 80064a6:	dc37      	bgt.n	8006518 <_printf_float+0x374>
 80064a8:	f04f 0b00 	mov.w	fp, #0
 80064ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064b0:	f104 021a 	add.w	r2, r4, #26
 80064b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064b6:	9305      	str	r3, [sp, #20]
 80064b8:	eba3 0309 	sub.w	r3, r3, r9
 80064bc:	455b      	cmp	r3, fp
 80064be:	dc33      	bgt.n	8006528 <_printf_float+0x384>
 80064c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064c4:	429a      	cmp	r2, r3
 80064c6:	db3b      	blt.n	8006540 <_printf_float+0x39c>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	07da      	lsls	r2, r3, #31
 80064cc:	d438      	bmi.n	8006540 <_printf_float+0x39c>
 80064ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d0:	9a05      	ldr	r2, [sp, #20]
 80064d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064d4:	1a9a      	subs	r2, r3, r2
 80064d6:	eba3 0901 	sub.w	r9, r3, r1
 80064da:	4591      	cmp	r9, r2
 80064dc:	bfa8      	it	ge
 80064de:	4691      	movge	r9, r2
 80064e0:	f1b9 0f00 	cmp.w	r9, #0
 80064e4:	dc35      	bgt.n	8006552 <_printf_float+0x3ae>
 80064e6:	f04f 0800 	mov.w	r8, #0
 80064ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064ee:	f104 0a1a 	add.w	sl, r4, #26
 80064f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064f6:	1a9b      	subs	r3, r3, r2
 80064f8:	eba3 0309 	sub.w	r3, r3, r9
 80064fc:	4543      	cmp	r3, r8
 80064fe:	f77f af79 	ble.w	80063f4 <_printf_float+0x250>
 8006502:	2301      	movs	r3, #1
 8006504:	4652      	mov	r2, sl
 8006506:	4631      	mov	r1, r6
 8006508:	4628      	mov	r0, r5
 800650a:	47b8      	blx	r7
 800650c:	3001      	adds	r0, #1
 800650e:	f43f aeaa 	beq.w	8006266 <_printf_float+0xc2>
 8006512:	f108 0801 	add.w	r8, r8, #1
 8006516:	e7ec      	b.n	80064f2 <_printf_float+0x34e>
 8006518:	4613      	mov	r3, r2
 800651a:	4631      	mov	r1, r6
 800651c:	4642      	mov	r2, r8
 800651e:	4628      	mov	r0, r5
 8006520:	47b8      	blx	r7
 8006522:	3001      	adds	r0, #1
 8006524:	d1c0      	bne.n	80064a8 <_printf_float+0x304>
 8006526:	e69e      	b.n	8006266 <_printf_float+0xc2>
 8006528:	2301      	movs	r3, #1
 800652a:	4631      	mov	r1, r6
 800652c:	4628      	mov	r0, r5
 800652e:	9205      	str	r2, [sp, #20]
 8006530:	47b8      	blx	r7
 8006532:	3001      	adds	r0, #1
 8006534:	f43f ae97 	beq.w	8006266 <_printf_float+0xc2>
 8006538:	9a05      	ldr	r2, [sp, #20]
 800653a:	f10b 0b01 	add.w	fp, fp, #1
 800653e:	e7b9      	b.n	80064b4 <_printf_float+0x310>
 8006540:	ee18 3a10 	vmov	r3, s16
 8006544:	4652      	mov	r2, sl
 8006546:	4631      	mov	r1, r6
 8006548:	4628      	mov	r0, r5
 800654a:	47b8      	blx	r7
 800654c:	3001      	adds	r0, #1
 800654e:	d1be      	bne.n	80064ce <_printf_float+0x32a>
 8006550:	e689      	b.n	8006266 <_printf_float+0xc2>
 8006552:	9a05      	ldr	r2, [sp, #20]
 8006554:	464b      	mov	r3, r9
 8006556:	4442      	add	r2, r8
 8006558:	4631      	mov	r1, r6
 800655a:	4628      	mov	r0, r5
 800655c:	47b8      	blx	r7
 800655e:	3001      	adds	r0, #1
 8006560:	d1c1      	bne.n	80064e6 <_printf_float+0x342>
 8006562:	e680      	b.n	8006266 <_printf_float+0xc2>
 8006564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006566:	2a01      	cmp	r2, #1
 8006568:	dc01      	bgt.n	800656e <_printf_float+0x3ca>
 800656a:	07db      	lsls	r3, r3, #31
 800656c:	d538      	bpl.n	80065e0 <_printf_float+0x43c>
 800656e:	2301      	movs	r3, #1
 8006570:	4642      	mov	r2, r8
 8006572:	4631      	mov	r1, r6
 8006574:	4628      	mov	r0, r5
 8006576:	47b8      	blx	r7
 8006578:	3001      	adds	r0, #1
 800657a:	f43f ae74 	beq.w	8006266 <_printf_float+0xc2>
 800657e:	ee18 3a10 	vmov	r3, s16
 8006582:	4652      	mov	r2, sl
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	f43f ae6b 	beq.w	8006266 <_printf_float+0xc2>
 8006590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006594:	2200      	movs	r2, #0
 8006596:	2300      	movs	r3, #0
 8006598:	f7fa fabe 	bl	8000b18 <__aeabi_dcmpeq>
 800659c:	b9d8      	cbnz	r0, 80065d6 <_printf_float+0x432>
 800659e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a0:	f108 0201 	add.w	r2, r8, #1
 80065a4:	3b01      	subs	r3, #1
 80065a6:	4631      	mov	r1, r6
 80065a8:	4628      	mov	r0, r5
 80065aa:	47b8      	blx	r7
 80065ac:	3001      	adds	r0, #1
 80065ae:	d10e      	bne.n	80065ce <_printf_float+0x42a>
 80065b0:	e659      	b.n	8006266 <_printf_float+0xc2>
 80065b2:	2301      	movs	r3, #1
 80065b4:	4652      	mov	r2, sl
 80065b6:	4631      	mov	r1, r6
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b8      	blx	r7
 80065bc:	3001      	adds	r0, #1
 80065be:	f43f ae52 	beq.w	8006266 <_printf_float+0xc2>
 80065c2:	f108 0801 	add.w	r8, r8, #1
 80065c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c8:	3b01      	subs	r3, #1
 80065ca:	4543      	cmp	r3, r8
 80065cc:	dcf1      	bgt.n	80065b2 <_printf_float+0x40e>
 80065ce:	464b      	mov	r3, r9
 80065d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80065d4:	e6dc      	b.n	8006390 <_printf_float+0x1ec>
 80065d6:	f04f 0800 	mov.w	r8, #0
 80065da:	f104 0a1a 	add.w	sl, r4, #26
 80065de:	e7f2      	b.n	80065c6 <_printf_float+0x422>
 80065e0:	2301      	movs	r3, #1
 80065e2:	4642      	mov	r2, r8
 80065e4:	e7df      	b.n	80065a6 <_printf_float+0x402>
 80065e6:	2301      	movs	r3, #1
 80065e8:	464a      	mov	r2, r9
 80065ea:	4631      	mov	r1, r6
 80065ec:	4628      	mov	r0, r5
 80065ee:	47b8      	blx	r7
 80065f0:	3001      	adds	r0, #1
 80065f2:	f43f ae38 	beq.w	8006266 <_printf_float+0xc2>
 80065f6:	f108 0801 	add.w	r8, r8, #1
 80065fa:	68e3      	ldr	r3, [r4, #12]
 80065fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065fe:	1a5b      	subs	r3, r3, r1
 8006600:	4543      	cmp	r3, r8
 8006602:	dcf0      	bgt.n	80065e6 <_printf_float+0x442>
 8006604:	e6fa      	b.n	80063fc <_printf_float+0x258>
 8006606:	f04f 0800 	mov.w	r8, #0
 800660a:	f104 0919 	add.w	r9, r4, #25
 800660e:	e7f4      	b.n	80065fa <_printf_float+0x456>

08006610 <_printf_common>:
 8006610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	4616      	mov	r6, r2
 8006616:	4699      	mov	r9, r3
 8006618:	688a      	ldr	r2, [r1, #8]
 800661a:	690b      	ldr	r3, [r1, #16]
 800661c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006620:	4293      	cmp	r3, r2
 8006622:	bfb8      	it	lt
 8006624:	4613      	movlt	r3, r2
 8006626:	6033      	str	r3, [r6, #0]
 8006628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800662c:	4607      	mov	r7, r0
 800662e:	460c      	mov	r4, r1
 8006630:	b10a      	cbz	r2, 8006636 <_printf_common+0x26>
 8006632:	3301      	adds	r3, #1
 8006634:	6033      	str	r3, [r6, #0]
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	0699      	lsls	r1, r3, #26
 800663a:	bf42      	ittt	mi
 800663c:	6833      	ldrmi	r3, [r6, #0]
 800663e:	3302      	addmi	r3, #2
 8006640:	6033      	strmi	r3, [r6, #0]
 8006642:	6825      	ldr	r5, [r4, #0]
 8006644:	f015 0506 	ands.w	r5, r5, #6
 8006648:	d106      	bne.n	8006658 <_printf_common+0x48>
 800664a:	f104 0a19 	add.w	sl, r4, #25
 800664e:	68e3      	ldr	r3, [r4, #12]
 8006650:	6832      	ldr	r2, [r6, #0]
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	42ab      	cmp	r3, r5
 8006656:	dc26      	bgt.n	80066a6 <_printf_common+0x96>
 8006658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800665c:	1e13      	subs	r3, r2, #0
 800665e:	6822      	ldr	r2, [r4, #0]
 8006660:	bf18      	it	ne
 8006662:	2301      	movne	r3, #1
 8006664:	0692      	lsls	r2, r2, #26
 8006666:	d42b      	bmi.n	80066c0 <_printf_common+0xb0>
 8006668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800666c:	4649      	mov	r1, r9
 800666e:	4638      	mov	r0, r7
 8006670:	47c0      	blx	r8
 8006672:	3001      	adds	r0, #1
 8006674:	d01e      	beq.n	80066b4 <_printf_common+0xa4>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	68e5      	ldr	r5, [r4, #12]
 800667a:	6832      	ldr	r2, [r6, #0]
 800667c:	f003 0306 	and.w	r3, r3, #6
 8006680:	2b04      	cmp	r3, #4
 8006682:	bf08      	it	eq
 8006684:	1aad      	subeq	r5, r5, r2
 8006686:	68a3      	ldr	r3, [r4, #8]
 8006688:	6922      	ldr	r2, [r4, #16]
 800668a:	bf0c      	ite	eq
 800668c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006690:	2500      	movne	r5, #0
 8006692:	4293      	cmp	r3, r2
 8006694:	bfc4      	itt	gt
 8006696:	1a9b      	subgt	r3, r3, r2
 8006698:	18ed      	addgt	r5, r5, r3
 800669a:	2600      	movs	r6, #0
 800669c:	341a      	adds	r4, #26
 800669e:	42b5      	cmp	r5, r6
 80066a0:	d11a      	bne.n	80066d8 <_printf_common+0xc8>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e008      	b.n	80066b8 <_printf_common+0xa8>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4652      	mov	r2, sl
 80066aa:	4649      	mov	r1, r9
 80066ac:	4638      	mov	r0, r7
 80066ae:	47c0      	blx	r8
 80066b0:	3001      	adds	r0, #1
 80066b2:	d103      	bne.n	80066bc <_printf_common+0xac>
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295
 80066b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066bc:	3501      	adds	r5, #1
 80066be:	e7c6      	b.n	800664e <_printf_common+0x3e>
 80066c0:	18e1      	adds	r1, r4, r3
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	2030      	movs	r0, #48	; 0x30
 80066c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066ca:	4422      	add	r2, r4
 80066cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066d4:	3302      	adds	r3, #2
 80066d6:	e7c7      	b.n	8006668 <_printf_common+0x58>
 80066d8:	2301      	movs	r3, #1
 80066da:	4622      	mov	r2, r4
 80066dc:	4649      	mov	r1, r9
 80066de:	4638      	mov	r0, r7
 80066e0:	47c0      	blx	r8
 80066e2:	3001      	adds	r0, #1
 80066e4:	d0e6      	beq.n	80066b4 <_printf_common+0xa4>
 80066e6:	3601      	adds	r6, #1
 80066e8:	e7d9      	b.n	800669e <_printf_common+0x8e>
	...

080066ec <_printf_i>:
 80066ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	7e0f      	ldrb	r7, [r1, #24]
 80066f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066f4:	2f78      	cmp	r7, #120	; 0x78
 80066f6:	4691      	mov	r9, r2
 80066f8:	4680      	mov	r8, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	469a      	mov	sl, r3
 80066fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006702:	d807      	bhi.n	8006714 <_printf_i+0x28>
 8006704:	2f62      	cmp	r7, #98	; 0x62
 8006706:	d80a      	bhi.n	800671e <_printf_i+0x32>
 8006708:	2f00      	cmp	r7, #0
 800670a:	f000 80d8 	beq.w	80068be <_printf_i+0x1d2>
 800670e:	2f58      	cmp	r7, #88	; 0x58
 8006710:	f000 80a3 	beq.w	800685a <_printf_i+0x16e>
 8006714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800671c:	e03a      	b.n	8006794 <_printf_i+0xa8>
 800671e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006722:	2b15      	cmp	r3, #21
 8006724:	d8f6      	bhi.n	8006714 <_printf_i+0x28>
 8006726:	a101      	add	r1, pc, #4	; (adr r1, 800672c <_printf_i+0x40>)
 8006728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800672c:	08006785 	.word	0x08006785
 8006730:	08006799 	.word	0x08006799
 8006734:	08006715 	.word	0x08006715
 8006738:	08006715 	.word	0x08006715
 800673c:	08006715 	.word	0x08006715
 8006740:	08006715 	.word	0x08006715
 8006744:	08006799 	.word	0x08006799
 8006748:	08006715 	.word	0x08006715
 800674c:	08006715 	.word	0x08006715
 8006750:	08006715 	.word	0x08006715
 8006754:	08006715 	.word	0x08006715
 8006758:	080068a5 	.word	0x080068a5
 800675c:	080067c9 	.word	0x080067c9
 8006760:	08006887 	.word	0x08006887
 8006764:	08006715 	.word	0x08006715
 8006768:	08006715 	.word	0x08006715
 800676c:	080068c7 	.word	0x080068c7
 8006770:	08006715 	.word	0x08006715
 8006774:	080067c9 	.word	0x080067c9
 8006778:	08006715 	.word	0x08006715
 800677c:	08006715 	.word	0x08006715
 8006780:	0800688f 	.word	0x0800688f
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	1d1a      	adds	r2, r3, #4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	602a      	str	r2, [r5, #0]
 800678c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006794:	2301      	movs	r3, #1
 8006796:	e0a3      	b.n	80068e0 <_printf_i+0x1f4>
 8006798:	6820      	ldr	r0, [r4, #0]
 800679a:	6829      	ldr	r1, [r5, #0]
 800679c:	0606      	lsls	r6, r0, #24
 800679e:	f101 0304 	add.w	r3, r1, #4
 80067a2:	d50a      	bpl.n	80067ba <_printf_i+0xce>
 80067a4:	680e      	ldr	r6, [r1, #0]
 80067a6:	602b      	str	r3, [r5, #0]
 80067a8:	2e00      	cmp	r6, #0
 80067aa:	da03      	bge.n	80067b4 <_printf_i+0xc8>
 80067ac:	232d      	movs	r3, #45	; 0x2d
 80067ae:	4276      	negs	r6, r6
 80067b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067b4:	485e      	ldr	r0, [pc, #376]	; (8006930 <_printf_i+0x244>)
 80067b6:	230a      	movs	r3, #10
 80067b8:	e019      	b.n	80067ee <_printf_i+0x102>
 80067ba:	680e      	ldr	r6, [r1, #0]
 80067bc:	602b      	str	r3, [r5, #0]
 80067be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067c2:	bf18      	it	ne
 80067c4:	b236      	sxthne	r6, r6
 80067c6:	e7ef      	b.n	80067a8 <_printf_i+0xbc>
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	6820      	ldr	r0, [r4, #0]
 80067cc:	1d19      	adds	r1, r3, #4
 80067ce:	6029      	str	r1, [r5, #0]
 80067d0:	0601      	lsls	r1, r0, #24
 80067d2:	d501      	bpl.n	80067d8 <_printf_i+0xec>
 80067d4:	681e      	ldr	r6, [r3, #0]
 80067d6:	e002      	b.n	80067de <_printf_i+0xf2>
 80067d8:	0646      	lsls	r6, r0, #25
 80067da:	d5fb      	bpl.n	80067d4 <_printf_i+0xe8>
 80067dc:	881e      	ldrh	r6, [r3, #0]
 80067de:	4854      	ldr	r0, [pc, #336]	; (8006930 <_printf_i+0x244>)
 80067e0:	2f6f      	cmp	r7, #111	; 0x6f
 80067e2:	bf0c      	ite	eq
 80067e4:	2308      	moveq	r3, #8
 80067e6:	230a      	movne	r3, #10
 80067e8:	2100      	movs	r1, #0
 80067ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067ee:	6865      	ldr	r5, [r4, #4]
 80067f0:	60a5      	str	r5, [r4, #8]
 80067f2:	2d00      	cmp	r5, #0
 80067f4:	bfa2      	ittt	ge
 80067f6:	6821      	ldrge	r1, [r4, #0]
 80067f8:	f021 0104 	bicge.w	r1, r1, #4
 80067fc:	6021      	strge	r1, [r4, #0]
 80067fe:	b90e      	cbnz	r6, 8006804 <_printf_i+0x118>
 8006800:	2d00      	cmp	r5, #0
 8006802:	d04d      	beq.n	80068a0 <_printf_i+0x1b4>
 8006804:	4615      	mov	r5, r2
 8006806:	fbb6 f1f3 	udiv	r1, r6, r3
 800680a:	fb03 6711 	mls	r7, r3, r1, r6
 800680e:	5dc7      	ldrb	r7, [r0, r7]
 8006810:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006814:	4637      	mov	r7, r6
 8006816:	42bb      	cmp	r3, r7
 8006818:	460e      	mov	r6, r1
 800681a:	d9f4      	bls.n	8006806 <_printf_i+0x11a>
 800681c:	2b08      	cmp	r3, #8
 800681e:	d10b      	bne.n	8006838 <_printf_i+0x14c>
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	07de      	lsls	r6, r3, #31
 8006824:	d508      	bpl.n	8006838 <_printf_i+0x14c>
 8006826:	6923      	ldr	r3, [r4, #16]
 8006828:	6861      	ldr	r1, [r4, #4]
 800682a:	4299      	cmp	r1, r3
 800682c:	bfde      	ittt	le
 800682e:	2330      	movle	r3, #48	; 0x30
 8006830:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006834:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006838:	1b52      	subs	r2, r2, r5
 800683a:	6122      	str	r2, [r4, #16]
 800683c:	f8cd a000 	str.w	sl, [sp]
 8006840:	464b      	mov	r3, r9
 8006842:	aa03      	add	r2, sp, #12
 8006844:	4621      	mov	r1, r4
 8006846:	4640      	mov	r0, r8
 8006848:	f7ff fee2 	bl	8006610 <_printf_common>
 800684c:	3001      	adds	r0, #1
 800684e:	d14c      	bne.n	80068ea <_printf_i+0x1fe>
 8006850:	f04f 30ff 	mov.w	r0, #4294967295
 8006854:	b004      	add	sp, #16
 8006856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800685a:	4835      	ldr	r0, [pc, #212]	; (8006930 <_printf_i+0x244>)
 800685c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006860:	6829      	ldr	r1, [r5, #0]
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	f851 6b04 	ldr.w	r6, [r1], #4
 8006868:	6029      	str	r1, [r5, #0]
 800686a:	061d      	lsls	r5, r3, #24
 800686c:	d514      	bpl.n	8006898 <_printf_i+0x1ac>
 800686e:	07df      	lsls	r7, r3, #31
 8006870:	bf44      	itt	mi
 8006872:	f043 0320 	orrmi.w	r3, r3, #32
 8006876:	6023      	strmi	r3, [r4, #0]
 8006878:	b91e      	cbnz	r6, 8006882 <_printf_i+0x196>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	f023 0320 	bic.w	r3, r3, #32
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	2310      	movs	r3, #16
 8006884:	e7b0      	b.n	80067e8 <_printf_i+0xfc>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	f043 0320 	orr.w	r3, r3, #32
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	2378      	movs	r3, #120	; 0x78
 8006890:	4828      	ldr	r0, [pc, #160]	; (8006934 <_printf_i+0x248>)
 8006892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006896:	e7e3      	b.n	8006860 <_printf_i+0x174>
 8006898:	0659      	lsls	r1, r3, #25
 800689a:	bf48      	it	mi
 800689c:	b2b6      	uxthmi	r6, r6
 800689e:	e7e6      	b.n	800686e <_printf_i+0x182>
 80068a0:	4615      	mov	r5, r2
 80068a2:	e7bb      	b.n	800681c <_printf_i+0x130>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	6826      	ldr	r6, [r4, #0]
 80068a8:	6961      	ldr	r1, [r4, #20]
 80068aa:	1d18      	adds	r0, r3, #4
 80068ac:	6028      	str	r0, [r5, #0]
 80068ae:	0635      	lsls	r5, r6, #24
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	d501      	bpl.n	80068b8 <_printf_i+0x1cc>
 80068b4:	6019      	str	r1, [r3, #0]
 80068b6:	e002      	b.n	80068be <_printf_i+0x1d2>
 80068b8:	0670      	lsls	r0, r6, #25
 80068ba:	d5fb      	bpl.n	80068b4 <_printf_i+0x1c8>
 80068bc:	8019      	strh	r1, [r3, #0]
 80068be:	2300      	movs	r3, #0
 80068c0:	6123      	str	r3, [r4, #16]
 80068c2:	4615      	mov	r5, r2
 80068c4:	e7ba      	b.n	800683c <_printf_i+0x150>
 80068c6:	682b      	ldr	r3, [r5, #0]
 80068c8:	1d1a      	adds	r2, r3, #4
 80068ca:	602a      	str	r2, [r5, #0]
 80068cc:	681d      	ldr	r5, [r3, #0]
 80068ce:	6862      	ldr	r2, [r4, #4]
 80068d0:	2100      	movs	r1, #0
 80068d2:	4628      	mov	r0, r5
 80068d4:	f7f9 fcac 	bl	8000230 <memchr>
 80068d8:	b108      	cbz	r0, 80068de <_printf_i+0x1f2>
 80068da:	1b40      	subs	r0, r0, r5
 80068dc:	6060      	str	r0, [r4, #4]
 80068de:	6863      	ldr	r3, [r4, #4]
 80068e0:	6123      	str	r3, [r4, #16]
 80068e2:	2300      	movs	r3, #0
 80068e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068e8:	e7a8      	b.n	800683c <_printf_i+0x150>
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	462a      	mov	r2, r5
 80068ee:	4649      	mov	r1, r9
 80068f0:	4640      	mov	r0, r8
 80068f2:	47d0      	blx	sl
 80068f4:	3001      	adds	r0, #1
 80068f6:	d0ab      	beq.n	8006850 <_printf_i+0x164>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	079b      	lsls	r3, r3, #30
 80068fc:	d413      	bmi.n	8006926 <_printf_i+0x23a>
 80068fe:	68e0      	ldr	r0, [r4, #12]
 8006900:	9b03      	ldr	r3, [sp, #12]
 8006902:	4298      	cmp	r0, r3
 8006904:	bfb8      	it	lt
 8006906:	4618      	movlt	r0, r3
 8006908:	e7a4      	b.n	8006854 <_printf_i+0x168>
 800690a:	2301      	movs	r3, #1
 800690c:	4632      	mov	r2, r6
 800690e:	4649      	mov	r1, r9
 8006910:	4640      	mov	r0, r8
 8006912:	47d0      	blx	sl
 8006914:	3001      	adds	r0, #1
 8006916:	d09b      	beq.n	8006850 <_printf_i+0x164>
 8006918:	3501      	adds	r5, #1
 800691a:	68e3      	ldr	r3, [r4, #12]
 800691c:	9903      	ldr	r1, [sp, #12]
 800691e:	1a5b      	subs	r3, r3, r1
 8006920:	42ab      	cmp	r3, r5
 8006922:	dcf2      	bgt.n	800690a <_printf_i+0x21e>
 8006924:	e7eb      	b.n	80068fe <_printf_i+0x212>
 8006926:	2500      	movs	r5, #0
 8006928:	f104 0619 	add.w	r6, r4, #25
 800692c:	e7f5      	b.n	800691a <_printf_i+0x22e>
 800692e:	bf00      	nop
 8006930:	0800aafa 	.word	0x0800aafa
 8006934:	0800ab0b 	.word	0x0800ab0b

08006938 <_scanf_float>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	b087      	sub	sp, #28
 800693e:	4617      	mov	r7, r2
 8006940:	9303      	str	r3, [sp, #12]
 8006942:	688b      	ldr	r3, [r1, #8]
 8006944:	1e5a      	subs	r2, r3, #1
 8006946:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800694a:	bf83      	ittte	hi
 800694c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006950:	195b      	addhi	r3, r3, r5
 8006952:	9302      	strhi	r3, [sp, #8]
 8006954:	2300      	movls	r3, #0
 8006956:	bf86      	itte	hi
 8006958:	f240 135d 	movwhi	r3, #349	; 0x15d
 800695c:	608b      	strhi	r3, [r1, #8]
 800695e:	9302      	strls	r3, [sp, #8]
 8006960:	680b      	ldr	r3, [r1, #0]
 8006962:	468b      	mov	fp, r1
 8006964:	2500      	movs	r5, #0
 8006966:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800696a:	f84b 3b1c 	str.w	r3, [fp], #28
 800696e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006972:	4680      	mov	r8, r0
 8006974:	460c      	mov	r4, r1
 8006976:	465e      	mov	r6, fp
 8006978:	46aa      	mov	sl, r5
 800697a:	46a9      	mov	r9, r5
 800697c:	9501      	str	r5, [sp, #4]
 800697e:	68a2      	ldr	r2, [r4, #8]
 8006980:	b152      	cbz	r2, 8006998 <_scanf_float+0x60>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	2b4e      	cmp	r3, #78	; 0x4e
 8006988:	d864      	bhi.n	8006a54 <_scanf_float+0x11c>
 800698a:	2b40      	cmp	r3, #64	; 0x40
 800698c:	d83c      	bhi.n	8006a08 <_scanf_float+0xd0>
 800698e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006992:	b2c8      	uxtb	r0, r1
 8006994:	280e      	cmp	r0, #14
 8006996:	d93a      	bls.n	8006a0e <_scanf_float+0xd6>
 8006998:	f1b9 0f00 	cmp.w	r9, #0
 800699c:	d003      	beq.n	80069a6 <_scanf_float+0x6e>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069a4:	6023      	str	r3, [r4, #0]
 80069a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069aa:	f1ba 0f01 	cmp.w	sl, #1
 80069ae:	f200 8113 	bhi.w	8006bd8 <_scanf_float+0x2a0>
 80069b2:	455e      	cmp	r6, fp
 80069b4:	f200 8105 	bhi.w	8006bc2 <_scanf_float+0x28a>
 80069b8:	2501      	movs	r5, #1
 80069ba:	4628      	mov	r0, r5
 80069bc:	b007      	add	sp, #28
 80069be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80069c6:	2a0d      	cmp	r2, #13
 80069c8:	d8e6      	bhi.n	8006998 <_scanf_float+0x60>
 80069ca:	a101      	add	r1, pc, #4	; (adr r1, 80069d0 <_scanf_float+0x98>)
 80069cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069d0:	08006b0f 	.word	0x08006b0f
 80069d4:	08006999 	.word	0x08006999
 80069d8:	08006999 	.word	0x08006999
 80069dc:	08006999 	.word	0x08006999
 80069e0:	08006b6f 	.word	0x08006b6f
 80069e4:	08006b47 	.word	0x08006b47
 80069e8:	08006999 	.word	0x08006999
 80069ec:	08006999 	.word	0x08006999
 80069f0:	08006b1d 	.word	0x08006b1d
 80069f4:	08006999 	.word	0x08006999
 80069f8:	08006999 	.word	0x08006999
 80069fc:	08006999 	.word	0x08006999
 8006a00:	08006999 	.word	0x08006999
 8006a04:	08006ad5 	.word	0x08006ad5
 8006a08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006a0c:	e7db      	b.n	80069c6 <_scanf_float+0x8e>
 8006a0e:	290e      	cmp	r1, #14
 8006a10:	d8c2      	bhi.n	8006998 <_scanf_float+0x60>
 8006a12:	a001      	add	r0, pc, #4	; (adr r0, 8006a18 <_scanf_float+0xe0>)
 8006a14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006a18:	08006ac7 	.word	0x08006ac7
 8006a1c:	08006999 	.word	0x08006999
 8006a20:	08006ac7 	.word	0x08006ac7
 8006a24:	08006b5b 	.word	0x08006b5b
 8006a28:	08006999 	.word	0x08006999
 8006a2c:	08006a75 	.word	0x08006a75
 8006a30:	08006ab1 	.word	0x08006ab1
 8006a34:	08006ab1 	.word	0x08006ab1
 8006a38:	08006ab1 	.word	0x08006ab1
 8006a3c:	08006ab1 	.word	0x08006ab1
 8006a40:	08006ab1 	.word	0x08006ab1
 8006a44:	08006ab1 	.word	0x08006ab1
 8006a48:	08006ab1 	.word	0x08006ab1
 8006a4c:	08006ab1 	.word	0x08006ab1
 8006a50:	08006ab1 	.word	0x08006ab1
 8006a54:	2b6e      	cmp	r3, #110	; 0x6e
 8006a56:	d809      	bhi.n	8006a6c <_scanf_float+0x134>
 8006a58:	2b60      	cmp	r3, #96	; 0x60
 8006a5a:	d8b2      	bhi.n	80069c2 <_scanf_float+0x8a>
 8006a5c:	2b54      	cmp	r3, #84	; 0x54
 8006a5e:	d077      	beq.n	8006b50 <_scanf_float+0x218>
 8006a60:	2b59      	cmp	r3, #89	; 0x59
 8006a62:	d199      	bne.n	8006998 <_scanf_float+0x60>
 8006a64:	2d07      	cmp	r5, #7
 8006a66:	d197      	bne.n	8006998 <_scanf_float+0x60>
 8006a68:	2508      	movs	r5, #8
 8006a6a:	e029      	b.n	8006ac0 <_scanf_float+0x188>
 8006a6c:	2b74      	cmp	r3, #116	; 0x74
 8006a6e:	d06f      	beq.n	8006b50 <_scanf_float+0x218>
 8006a70:	2b79      	cmp	r3, #121	; 0x79
 8006a72:	e7f6      	b.n	8006a62 <_scanf_float+0x12a>
 8006a74:	6821      	ldr	r1, [r4, #0]
 8006a76:	05c8      	lsls	r0, r1, #23
 8006a78:	d51a      	bpl.n	8006ab0 <_scanf_float+0x178>
 8006a7a:	9b02      	ldr	r3, [sp, #8]
 8006a7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006a80:	6021      	str	r1, [r4, #0]
 8006a82:	f109 0901 	add.w	r9, r9, #1
 8006a86:	b11b      	cbz	r3, 8006a90 <_scanf_float+0x158>
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	3201      	adds	r2, #1
 8006a8c:	9302      	str	r3, [sp, #8]
 8006a8e:	60a2      	str	r2, [r4, #8]
 8006a90:	68a3      	ldr	r3, [r4, #8]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	60a3      	str	r3, [r4, #8]
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	6123      	str	r3, [r4, #16]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	607b      	str	r3, [r7, #4]
 8006aa4:	f340 8084 	ble.w	8006bb0 <_scanf_float+0x278>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	e766      	b.n	800697e <_scanf_float+0x46>
 8006ab0:	eb1a 0f05 	cmn.w	sl, r5
 8006ab4:	f47f af70 	bne.w	8006998 <_scanf_float+0x60>
 8006ab8:	6822      	ldr	r2, [r4, #0]
 8006aba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006abe:	6022      	str	r2, [r4, #0]
 8006ac0:	f806 3b01 	strb.w	r3, [r6], #1
 8006ac4:	e7e4      	b.n	8006a90 <_scanf_float+0x158>
 8006ac6:	6822      	ldr	r2, [r4, #0]
 8006ac8:	0610      	lsls	r0, r2, #24
 8006aca:	f57f af65 	bpl.w	8006998 <_scanf_float+0x60>
 8006ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ad2:	e7f4      	b.n	8006abe <_scanf_float+0x186>
 8006ad4:	f1ba 0f00 	cmp.w	sl, #0
 8006ad8:	d10e      	bne.n	8006af8 <_scanf_float+0x1c0>
 8006ada:	f1b9 0f00 	cmp.w	r9, #0
 8006ade:	d10e      	bne.n	8006afe <_scanf_float+0x1c6>
 8006ae0:	6822      	ldr	r2, [r4, #0]
 8006ae2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006ae6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006aea:	d108      	bne.n	8006afe <_scanf_float+0x1c6>
 8006aec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006af0:	6022      	str	r2, [r4, #0]
 8006af2:	f04f 0a01 	mov.w	sl, #1
 8006af6:	e7e3      	b.n	8006ac0 <_scanf_float+0x188>
 8006af8:	f1ba 0f02 	cmp.w	sl, #2
 8006afc:	d055      	beq.n	8006baa <_scanf_float+0x272>
 8006afe:	2d01      	cmp	r5, #1
 8006b00:	d002      	beq.n	8006b08 <_scanf_float+0x1d0>
 8006b02:	2d04      	cmp	r5, #4
 8006b04:	f47f af48 	bne.w	8006998 <_scanf_float+0x60>
 8006b08:	3501      	adds	r5, #1
 8006b0a:	b2ed      	uxtb	r5, r5
 8006b0c:	e7d8      	b.n	8006ac0 <_scanf_float+0x188>
 8006b0e:	f1ba 0f01 	cmp.w	sl, #1
 8006b12:	f47f af41 	bne.w	8006998 <_scanf_float+0x60>
 8006b16:	f04f 0a02 	mov.w	sl, #2
 8006b1a:	e7d1      	b.n	8006ac0 <_scanf_float+0x188>
 8006b1c:	b97d      	cbnz	r5, 8006b3e <_scanf_float+0x206>
 8006b1e:	f1b9 0f00 	cmp.w	r9, #0
 8006b22:	f47f af3c 	bne.w	800699e <_scanf_float+0x66>
 8006b26:	6822      	ldr	r2, [r4, #0]
 8006b28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b30:	f47f af39 	bne.w	80069a6 <_scanf_float+0x6e>
 8006b34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b38:	6022      	str	r2, [r4, #0]
 8006b3a:	2501      	movs	r5, #1
 8006b3c:	e7c0      	b.n	8006ac0 <_scanf_float+0x188>
 8006b3e:	2d03      	cmp	r5, #3
 8006b40:	d0e2      	beq.n	8006b08 <_scanf_float+0x1d0>
 8006b42:	2d05      	cmp	r5, #5
 8006b44:	e7de      	b.n	8006b04 <_scanf_float+0x1cc>
 8006b46:	2d02      	cmp	r5, #2
 8006b48:	f47f af26 	bne.w	8006998 <_scanf_float+0x60>
 8006b4c:	2503      	movs	r5, #3
 8006b4e:	e7b7      	b.n	8006ac0 <_scanf_float+0x188>
 8006b50:	2d06      	cmp	r5, #6
 8006b52:	f47f af21 	bne.w	8006998 <_scanf_float+0x60>
 8006b56:	2507      	movs	r5, #7
 8006b58:	e7b2      	b.n	8006ac0 <_scanf_float+0x188>
 8006b5a:	6822      	ldr	r2, [r4, #0]
 8006b5c:	0591      	lsls	r1, r2, #22
 8006b5e:	f57f af1b 	bpl.w	8006998 <_scanf_float+0x60>
 8006b62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006b66:	6022      	str	r2, [r4, #0]
 8006b68:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b6c:	e7a8      	b.n	8006ac0 <_scanf_float+0x188>
 8006b6e:	6822      	ldr	r2, [r4, #0]
 8006b70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006b74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006b78:	d006      	beq.n	8006b88 <_scanf_float+0x250>
 8006b7a:	0550      	lsls	r0, r2, #21
 8006b7c:	f57f af0c 	bpl.w	8006998 <_scanf_float+0x60>
 8006b80:	f1b9 0f00 	cmp.w	r9, #0
 8006b84:	f43f af0f 	beq.w	80069a6 <_scanf_float+0x6e>
 8006b88:	0591      	lsls	r1, r2, #22
 8006b8a:	bf58      	it	pl
 8006b8c:	9901      	ldrpl	r1, [sp, #4]
 8006b8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b92:	bf58      	it	pl
 8006b94:	eba9 0101 	subpl.w	r1, r9, r1
 8006b98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006b9c:	bf58      	it	pl
 8006b9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ba2:	6022      	str	r2, [r4, #0]
 8006ba4:	f04f 0900 	mov.w	r9, #0
 8006ba8:	e78a      	b.n	8006ac0 <_scanf_float+0x188>
 8006baa:	f04f 0a03 	mov.w	sl, #3
 8006bae:	e787      	b.n	8006ac0 <_scanf_float+0x188>
 8006bb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	4640      	mov	r0, r8
 8006bb8:	4798      	blx	r3
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	f43f aedf 	beq.w	800697e <_scanf_float+0x46>
 8006bc0:	e6ea      	b.n	8006998 <_scanf_float+0x60>
 8006bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bca:	463a      	mov	r2, r7
 8006bcc:	4640      	mov	r0, r8
 8006bce:	4798      	blx	r3
 8006bd0:	6923      	ldr	r3, [r4, #16]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	6123      	str	r3, [r4, #16]
 8006bd6:	e6ec      	b.n	80069b2 <_scanf_float+0x7a>
 8006bd8:	1e6b      	subs	r3, r5, #1
 8006bda:	2b06      	cmp	r3, #6
 8006bdc:	d825      	bhi.n	8006c2a <_scanf_float+0x2f2>
 8006bde:	2d02      	cmp	r5, #2
 8006be0:	d836      	bhi.n	8006c50 <_scanf_float+0x318>
 8006be2:	455e      	cmp	r6, fp
 8006be4:	f67f aee8 	bls.w	80069b8 <_scanf_float+0x80>
 8006be8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bf0:	463a      	mov	r2, r7
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4798      	blx	r3
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	6123      	str	r3, [r4, #16]
 8006bfc:	e7f1      	b.n	8006be2 <_scanf_float+0x2aa>
 8006bfe:	9802      	ldr	r0, [sp, #8]
 8006c00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c04:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006c08:	9002      	str	r0, [sp, #8]
 8006c0a:	463a      	mov	r2, r7
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	4798      	blx	r3
 8006c10:	6923      	ldr	r3, [r4, #16]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c1a:	fa5f fa8a 	uxtb.w	sl, sl
 8006c1e:	f1ba 0f02 	cmp.w	sl, #2
 8006c22:	d1ec      	bne.n	8006bfe <_scanf_float+0x2c6>
 8006c24:	3d03      	subs	r5, #3
 8006c26:	b2ed      	uxtb	r5, r5
 8006c28:	1b76      	subs	r6, r6, r5
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	05da      	lsls	r2, r3, #23
 8006c2e:	d52f      	bpl.n	8006c90 <_scanf_float+0x358>
 8006c30:	055b      	lsls	r3, r3, #21
 8006c32:	d510      	bpl.n	8006c56 <_scanf_float+0x31e>
 8006c34:	455e      	cmp	r6, fp
 8006c36:	f67f aebf 	bls.w	80069b8 <_scanf_float+0x80>
 8006c3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c42:	463a      	mov	r2, r7
 8006c44:	4640      	mov	r0, r8
 8006c46:	4798      	blx	r3
 8006c48:	6923      	ldr	r3, [r4, #16]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	6123      	str	r3, [r4, #16]
 8006c4e:	e7f1      	b.n	8006c34 <_scanf_float+0x2fc>
 8006c50:	46aa      	mov	sl, r5
 8006c52:	9602      	str	r6, [sp, #8]
 8006c54:	e7df      	b.n	8006c16 <_scanf_float+0x2de>
 8006c56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c5a:	6923      	ldr	r3, [r4, #16]
 8006c5c:	2965      	cmp	r1, #101	; 0x65
 8006c5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c62:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c66:	6123      	str	r3, [r4, #16]
 8006c68:	d00c      	beq.n	8006c84 <_scanf_float+0x34c>
 8006c6a:	2945      	cmp	r1, #69	; 0x45
 8006c6c:	d00a      	beq.n	8006c84 <_scanf_float+0x34c>
 8006c6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c72:	463a      	mov	r2, r7
 8006c74:	4640      	mov	r0, r8
 8006c76:	4798      	blx	r3
 8006c78:	6923      	ldr	r3, [r4, #16]
 8006c7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	1eb5      	subs	r5, r6, #2
 8006c82:	6123      	str	r3, [r4, #16]
 8006c84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c88:	463a      	mov	r2, r7
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	4798      	blx	r3
 8006c8e:	462e      	mov	r6, r5
 8006c90:	6825      	ldr	r5, [r4, #0]
 8006c92:	f015 0510 	ands.w	r5, r5, #16
 8006c96:	d159      	bne.n	8006d4c <_scanf_float+0x414>
 8006c98:	7035      	strb	r5, [r6, #0]
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca4:	d11b      	bne.n	8006cde <_scanf_float+0x3a6>
 8006ca6:	9b01      	ldr	r3, [sp, #4]
 8006ca8:	454b      	cmp	r3, r9
 8006caa:	eba3 0209 	sub.w	r2, r3, r9
 8006cae:	d123      	bne.n	8006cf8 <_scanf_float+0x3c0>
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	4659      	mov	r1, fp
 8006cb4:	4640      	mov	r0, r8
 8006cb6:	f000 fe99 	bl	80079ec <_strtod_r>
 8006cba:	6822      	ldr	r2, [r4, #0]
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	f012 0f02 	tst.w	r2, #2
 8006cc2:	ec57 6b10 	vmov	r6, r7, d0
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	d021      	beq.n	8006d0e <_scanf_float+0x3d6>
 8006cca:	9903      	ldr	r1, [sp, #12]
 8006ccc:	1d1a      	adds	r2, r3, #4
 8006cce:	600a      	str	r2, [r1, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	e9c3 6700 	strd	r6, r7, [r3]
 8006cd6:	68e3      	ldr	r3, [r4, #12]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	60e3      	str	r3, [r4, #12]
 8006cdc:	e66d      	b.n	80069ba <_scanf_float+0x82>
 8006cde:	9b04      	ldr	r3, [sp, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0e5      	beq.n	8006cb0 <_scanf_float+0x378>
 8006ce4:	9905      	ldr	r1, [sp, #20]
 8006ce6:	230a      	movs	r3, #10
 8006ce8:	462a      	mov	r2, r5
 8006cea:	3101      	adds	r1, #1
 8006cec:	4640      	mov	r0, r8
 8006cee:	f000 ff05 	bl	8007afc <_strtol_r>
 8006cf2:	9b04      	ldr	r3, [sp, #16]
 8006cf4:	9e05      	ldr	r6, [sp, #20]
 8006cf6:	1ac2      	subs	r2, r0, r3
 8006cf8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006cfc:	429e      	cmp	r6, r3
 8006cfe:	bf28      	it	cs
 8006d00:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006d04:	4912      	ldr	r1, [pc, #72]	; (8006d50 <_scanf_float+0x418>)
 8006d06:	4630      	mov	r0, r6
 8006d08:	f000 f82c 	bl	8006d64 <siprintf>
 8006d0c:	e7d0      	b.n	8006cb0 <_scanf_float+0x378>
 8006d0e:	9903      	ldr	r1, [sp, #12]
 8006d10:	f012 0f04 	tst.w	r2, #4
 8006d14:	f103 0204 	add.w	r2, r3, #4
 8006d18:	600a      	str	r2, [r1, #0]
 8006d1a:	d1d9      	bne.n	8006cd0 <_scanf_float+0x398>
 8006d1c:	f8d3 8000 	ldr.w	r8, [r3]
 8006d20:	ee10 2a10 	vmov	r2, s0
 8006d24:	ee10 0a10 	vmov	r0, s0
 8006d28:	463b      	mov	r3, r7
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	f7f9 ff26 	bl	8000b7c <__aeabi_dcmpun>
 8006d30:	b128      	cbz	r0, 8006d3e <_scanf_float+0x406>
 8006d32:	4808      	ldr	r0, [pc, #32]	; (8006d54 <_scanf_float+0x41c>)
 8006d34:	f000 f810 	bl	8006d58 <nanf>
 8006d38:	ed88 0a00 	vstr	s0, [r8]
 8006d3c:	e7cb      	b.n	8006cd6 <_scanf_float+0x39e>
 8006d3e:	4630      	mov	r0, r6
 8006d40:	4639      	mov	r1, r7
 8006d42:	f7f9 ff79 	bl	8000c38 <__aeabi_d2f>
 8006d46:	f8c8 0000 	str.w	r0, [r8]
 8006d4a:	e7c4      	b.n	8006cd6 <_scanf_float+0x39e>
 8006d4c:	2500      	movs	r5, #0
 8006d4e:	e634      	b.n	80069ba <_scanf_float+0x82>
 8006d50:	0800ab1c 	.word	0x0800ab1c
 8006d54:	0800af28 	.word	0x0800af28

08006d58 <nanf>:
 8006d58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006d60 <nanf+0x8>
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	7fc00000 	.word	0x7fc00000

08006d64 <siprintf>:
 8006d64:	b40e      	push	{r1, r2, r3}
 8006d66:	b500      	push	{lr}
 8006d68:	b09c      	sub	sp, #112	; 0x70
 8006d6a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d6c:	9002      	str	r0, [sp, #8]
 8006d6e:	9006      	str	r0, [sp, #24]
 8006d70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d74:	4809      	ldr	r0, [pc, #36]	; (8006d9c <siprintf+0x38>)
 8006d76:	9107      	str	r1, [sp, #28]
 8006d78:	9104      	str	r1, [sp, #16]
 8006d7a:	4909      	ldr	r1, [pc, #36]	; (8006da0 <siprintf+0x3c>)
 8006d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d80:	9105      	str	r1, [sp, #20]
 8006d82:	6800      	ldr	r0, [r0, #0]
 8006d84:	9301      	str	r3, [sp, #4]
 8006d86:	a902      	add	r1, sp, #8
 8006d88:	f002 fee4 	bl	8009b54 <_svfiprintf_r>
 8006d8c:	9b02      	ldr	r3, [sp, #8]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	b01c      	add	sp, #112	; 0x70
 8006d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d98:	b003      	add	sp, #12
 8006d9a:	4770      	bx	lr
 8006d9c:	2000000c 	.word	0x2000000c
 8006da0:	ffff0208 	.word	0xffff0208

08006da4 <sulp>:
 8006da4:	b570      	push	{r4, r5, r6, lr}
 8006da6:	4604      	mov	r4, r0
 8006da8:	460d      	mov	r5, r1
 8006daa:	ec45 4b10 	vmov	d0, r4, r5
 8006dae:	4616      	mov	r6, r2
 8006db0:	f002 fc2e 	bl	8009610 <__ulp>
 8006db4:	ec51 0b10 	vmov	r0, r1, d0
 8006db8:	b17e      	cbz	r6, 8006dda <sulp+0x36>
 8006dba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006dbe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dd09      	ble.n	8006dda <sulp+0x36>
 8006dc6:	051b      	lsls	r3, r3, #20
 8006dc8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006dcc:	2400      	movs	r4, #0
 8006dce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	f7f9 fc37 	bl	8000648 <__aeabi_dmul>
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	0000      	movs	r0, r0
	...

08006de0 <_strtod_l>:
 8006de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	ed2d 8b02 	vpush	{d8}
 8006de8:	b09d      	sub	sp, #116	; 0x74
 8006dea:	461f      	mov	r7, r3
 8006dec:	2300      	movs	r3, #0
 8006dee:	9318      	str	r3, [sp, #96]	; 0x60
 8006df0:	4ba2      	ldr	r3, [pc, #648]	; (800707c <_strtod_l+0x29c>)
 8006df2:	9213      	str	r2, [sp, #76]	; 0x4c
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	9305      	str	r3, [sp, #20]
 8006df8:	4604      	mov	r4, r0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	4688      	mov	r8, r1
 8006dfe:	f7f9 fa0f 	bl	8000220 <strlen>
 8006e02:	f04f 0a00 	mov.w	sl, #0
 8006e06:	4605      	mov	r5, r0
 8006e08:	f04f 0b00 	mov.w	fp, #0
 8006e0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e12:	781a      	ldrb	r2, [r3, #0]
 8006e14:	2a2b      	cmp	r2, #43	; 0x2b
 8006e16:	d04e      	beq.n	8006eb6 <_strtod_l+0xd6>
 8006e18:	d83b      	bhi.n	8006e92 <_strtod_l+0xb2>
 8006e1a:	2a0d      	cmp	r2, #13
 8006e1c:	d834      	bhi.n	8006e88 <_strtod_l+0xa8>
 8006e1e:	2a08      	cmp	r2, #8
 8006e20:	d834      	bhi.n	8006e8c <_strtod_l+0xac>
 8006e22:	2a00      	cmp	r2, #0
 8006e24:	d03e      	beq.n	8006ea4 <_strtod_l+0xc4>
 8006e26:	2300      	movs	r3, #0
 8006e28:	930a      	str	r3, [sp, #40]	; 0x28
 8006e2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006e2c:	7833      	ldrb	r3, [r6, #0]
 8006e2e:	2b30      	cmp	r3, #48	; 0x30
 8006e30:	f040 80b0 	bne.w	8006f94 <_strtod_l+0x1b4>
 8006e34:	7873      	ldrb	r3, [r6, #1]
 8006e36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e3a:	2b58      	cmp	r3, #88	; 0x58
 8006e3c:	d168      	bne.n	8006f10 <_strtod_l+0x130>
 8006e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	ab18      	add	r3, sp, #96	; 0x60
 8006e44:	9702      	str	r7, [sp, #8]
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	4a8d      	ldr	r2, [pc, #564]	; (8007080 <_strtod_l+0x2a0>)
 8006e4a:	ab19      	add	r3, sp, #100	; 0x64
 8006e4c:	a917      	add	r1, sp, #92	; 0x5c
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f001 fd38 	bl	80088c4 <__gethex>
 8006e54:	f010 0707 	ands.w	r7, r0, #7
 8006e58:	4605      	mov	r5, r0
 8006e5a:	d005      	beq.n	8006e68 <_strtod_l+0x88>
 8006e5c:	2f06      	cmp	r7, #6
 8006e5e:	d12c      	bne.n	8006eba <_strtod_l+0xda>
 8006e60:	3601      	adds	r6, #1
 8006e62:	2300      	movs	r3, #0
 8006e64:	9617      	str	r6, [sp, #92]	; 0x5c
 8006e66:	930a      	str	r3, [sp, #40]	; 0x28
 8006e68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f040 8590 	bne.w	8007990 <_strtod_l+0xbb0>
 8006e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e72:	b1eb      	cbz	r3, 8006eb0 <_strtod_l+0xd0>
 8006e74:	4652      	mov	r2, sl
 8006e76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e7a:	ec43 2b10 	vmov	d0, r2, r3
 8006e7e:	b01d      	add	sp, #116	; 0x74
 8006e80:	ecbd 8b02 	vpop	{d8}
 8006e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e88:	2a20      	cmp	r2, #32
 8006e8a:	d1cc      	bne.n	8006e26 <_strtod_l+0x46>
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e90:	e7be      	b.n	8006e10 <_strtod_l+0x30>
 8006e92:	2a2d      	cmp	r2, #45	; 0x2d
 8006e94:	d1c7      	bne.n	8006e26 <_strtod_l+0x46>
 8006e96:	2201      	movs	r2, #1
 8006e98:	920a      	str	r2, [sp, #40]	; 0x28
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e9e:	785b      	ldrb	r3, [r3, #1]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1c2      	bne.n	8006e2a <_strtod_l+0x4a>
 8006ea4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ea6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f040 856e 	bne.w	800798c <_strtod_l+0xbac>
 8006eb0:	4652      	mov	r2, sl
 8006eb2:	465b      	mov	r3, fp
 8006eb4:	e7e1      	b.n	8006e7a <_strtod_l+0x9a>
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	e7ee      	b.n	8006e98 <_strtod_l+0xb8>
 8006eba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ebc:	b13a      	cbz	r2, 8006ece <_strtod_l+0xee>
 8006ebe:	2135      	movs	r1, #53	; 0x35
 8006ec0:	a81a      	add	r0, sp, #104	; 0x68
 8006ec2:	f002 fcb0 	bl	8009826 <__copybits>
 8006ec6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f002 f86f 	bl	8008fac <_Bfree>
 8006ece:	3f01      	subs	r7, #1
 8006ed0:	2f04      	cmp	r7, #4
 8006ed2:	d806      	bhi.n	8006ee2 <_strtod_l+0x102>
 8006ed4:	e8df f007 	tbb	[pc, r7]
 8006ed8:	1714030a 	.word	0x1714030a
 8006edc:	0a          	.byte	0x0a
 8006edd:	00          	.byte	0x00
 8006ede:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006ee2:	0728      	lsls	r0, r5, #28
 8006ee4:	d5c0      	bpl.n	8006e68 <_strtod_l+0x88>
 8006ee6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006eea:	e7bd      	b.n	8006e68 <_strtod_l+0x88>
 8006eec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006ef0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ef2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ef6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006efa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006efe:	e7f0      	b.n	8006ee2 <_strtod_l+0x102>
 8006f00:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007084 <_strtod_l+0x2a4>
 8006f04:	e7ed      	b.n	8006ee2 <_strtod_l+0x102>
 8006f06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006f0a:	f04f 3aff 	mov.w	sl, #4294967295
 8006f0e:	e7e8      	b.n	8006ee2 <_strtod_l+0x102>
 8006f10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f16:	785b      	ldrb	r3, [r3, #1]
 8006f18:	2b30      	cmp	r3, #48	; 0x30
 8006f1a:	d0f9      	beq.n	8006f10 <_strtod_l+0x130>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0a3      	beq.n	8006e68 <_strtod_l+0x88>
 8006f20:	2301      	movs	r3, #1
 8006f22:	f04f 0900 	mov.w	r9, #0
 8006f26:	9304      	str	r3, [sp, #16]
 8006f28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f2a:	9308      	str	r3, [sp, #32]
 8006f2c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006f30:	464f      	mov	r7, r9
 8006f32:	220a      	movs	r2, #10
 8006f34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006f36:	7806      	ldrb	r6, [r0, #0]
 8006f38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006f3c:	b2d9      	uxtb	r1, r3
 8006f3e:	2909      	cmp	r1, #9
 8006f40:	d92a      	bls.n	8006f98 <_strtod_l+0x1b8>
 8006f42:	9905      	ldr	r1, [sp, #20]
 8006f44:	462a      	mov	r2, r5
 8006f46:	f002 ff1f 	bl	8009d88 <strncmp>
 8006f4a:	b398      	cbz	r0, 8006fb4 <_strtod_l+0x1d4>
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	4632      	mov	r2, r6
 8006f50:	463d      	mov	r5, r7
 8006f52:	9005      	str	r0, [sp, #20]
 8006f54:	4603      	mov	r3, r0
 8006f56:	2a65      	cmp	r2, #101	; 0x65
 8006f58:	d001      	beq.n	8006f5e <_strtod_l+0x17e>
 8006f5a:	2a45      	cmp	r2, #69	; 0x45
 8006f5c:	d118      	bne.n	8006f90 <_strtod_l+0x1b0>
 8006f5e:	b91d      	cbnz	r5, 8006f68 <_strtod_l+0x188>
 8006f60:	9a04      	ldr	r2, [sp, #16]
 8006f62:	4302      	orrs	r2, r0
 8006f64:	d09e      	beq.n	8006ea4 <_strtod_l+0xc4>
 8006f66:	2500      	movs	r5, #0
 8006f68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006f6c:	f108 0201 	add.w	r2, r8, #1
 8006f70:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f72:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006f76:	2a2b      	cmp	r2, #43	; 0x2b
 8006f78:	d075      	beq.n	8007066 <_strtod_l+0x286>
 8006f7a:	2a2d      	cmp	r2, #45	; 0x2d
 8006f7c:	d07b      	beq.n	8007076 <_strtod_l+0x296>
 8006f7e:	f04f 0c00 	mov.w	ip, #0
 8006f82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f86:	2909      	cmp	r1, #9
 8006f88:	f240 8082 	bls.w	8007090 <_strtod_l+0x2b0>
 8006f8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f90:	2600      	movs	r6, #0
 8006f92:	e09d      	b.n	80070d0 <_strtod_l+0x2f0>
 8006f94:	2300      	movs	r3, #0
 8006f96:	e7c4      	b.n	8006f22 <_strtod_l+0x142>
 8006f98:	2f08      	cmp	r7, #8
 8006f9a:	bfd8      	it	le
 8006f9c:	9907      	ldrle	r1, [sp, #28]
 8006f9e:	f100 0001 	add.w	r0, r0, #1
 8006fa2:	bfda      	itte	le
 8006fa4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006fa8:	9307      	strle	r3, [sp, #28]
 8006faa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006fae:	3701      	adds	r7, #1
 8006fb0:	9017      	str	r0, [sp, #92]	; 0x5c
 8006fb2:	e7bf      	b.n	8006f34 <_strtod_l+0x154>
 8006fb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fb6:	195a      	adds	r2, r3, r5
 8006fb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fba:	5d5a      	ldrb	r2, [r3, r5]
 8006fbc:	2f00      	cmp	r7, #0
 8006fbe:	d037      	beq.n	8007030 <_strtod_l+0x250>
 8006fc0:	9005      	str	r0, [sp, #20]
 8006fc2:	463d      	mov	r5, r7
 8006fc4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006fc8:	2b09      	cmp	r3, #9
 8006fca:	d912      	bls.n	8006ff2 <_strtod_l+0x212>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e7c2      	b.n	8006f56 <_strtod_l+0x176>
 8006fd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fd6:	785a      	ldrb	r2, [r3, #1]
 8006fd8:	3001      	adds	r0, #1
 8006fda:	2a30      	cmp	r2, #48	; 0x30
 8006fdc:	d0f8      	beq.n	8006fd0 <_strtod_l+0x1f0>
 8006fde:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006fe2:	2b08      	cmp	r3, #8
 8006fe4:	f200 84d9 	bhi.w	800799a <_strtod_l+0xbba>
 8006fe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fea:	9005      	str	r0, [sp, #20]
 8006fec:	2000      	movs	r0, #0
 8006fee:	9308      	str	r3, [sp, #32]
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	3a30      	subs	r2, #48	; 0x30
 8006ff4:	f100 0301 	add.w	r3, r0, #1
 8006ff8:	d014      	beq.n	8007024 <_strtod_l+0x244>
 8006ffa:	9905      	ldr	r1, [sp, #20]
 8006ffc:	4419      	add	r1, r3
 8006ffe:	9105      	str	r1, [sp, #20]
 8007000:	462b      	mov	r3, r5
 8007002:	eb00 0e05 	add.w	lr, r0, r5
 8007006:	210a      	movs	r1, #10
 8007008:	4573      	cmp	r3, lr
 800700a:	d113      	bne.n	8007034 <_strtod_l+0x254>
 800700c:	182b      	adds	r3, r5, r0
 800700e:	2b08      	cmp	r3, #8
 8007010:	f105 0501 	add.w	r5, r5, #1
 8007014:	4405      	add	r5, r0
 8007016:	dc1c      	bgt.n	8007052 <_strtod_l+0x272>
 8007018:	9907      	ldr	r1, [sp, #28]
 800701a:	230a      	movs	r3, #10
 800701c:	fb03 2301 	mla	r3, r3, r1, r2
 8007020:	9307      	str	r3, [sp, #28]
 8007022:	2300      	movs	r3, #0
 8007024:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007026:	1c51      	adds	r1, r2, #1
 8007028:	9117      	str	r1, [sp, #92]	; 0x5c
 800702a:	7852      	ldrb	r2, [r2, #1]
 800702c:	4618      	mov	r0, r3
 800702e:	e7c9      	b.n	8006fc4 <_strtod_l+0x1e4>
 8007030:	4638      	mov	r0, r7
 8007032:	e7d2      	b.n	8006fda <_strtod_l+0x1fa>
 8007034:	2b08      	cmp	r3, #8
 8007036:	dc04      	bgt.n	8007042 <_strtod_l+0x262>
 8007038:	9e07      	ldr	r6, [sp, #28]
 800703a:	434e      	muls	r6, r1
 800703c:	9607      	str	r6, [sp, #28]
 800703e:	3301      	adds	r3, #1
 8007040:	e7e2      	b.n	8007008 <_strtod_l+0x228>
 8007042:	f103 0c01 	add.w	ip, r3, #1
 8007046:	f1bc 0f10 	cmp.w	ip, #16
 800704a:	bfd8      	it	le
 800704c:	fb01 f909 	mulle.w	r9, r1, r9
 8007050:	e7f5      	b.n	800703e <_strtod_l+0x25e>
 8007052:	2d10      	cmp	r5, #16
 8007054:	bfdc      	itt	le
 8007056:	230a      	movle	r3, #10
 8007058:	fb03 2909 	mlale	r9, r3, r9, r2
 800705c:	e7e1      	b.n	8007022 <_strtod_l+0x242>
 800705e:	2300      	movs	r3, #0
 8007060:	9305      	str	r3, [sp, #20]
 8007062:	2301      	movs	r3, #1
 8007064:	e77c      	b.n	8006f60 <_strtod_l+0x180>
 8007066:	f04f 0c00 	mov.w	ip, #0
 800706a:	f108 0202 	add.w	r2, r8, #2
 800706e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007070:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007074:	e785      	b.n	8006f82 <_strtod_l+0x1a2>
 8007076:	f04f 0c01 	mov.w	ip, #1
 800707a:	e7f6      	b.n	800706a <_strtod_l+0x28a>
 800707c:	0800ad70 	.word	0x0800ad70
 8007080:	0800ab24 	.word	0x0800ab24
 8007084:	7ff00000 	.word	0x7ff00000
 8007088:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800708a:	1c51      	adds	r1, r2, #1
 800708c:	9117      	str	r1, [sp, #92]	; 0x5c
 800708e:	7852      	ldrb	r2, [r2, #1]
 8007090:	2a30      	cmp	r2, #48	; 0x30
 8007092:	d0f9      	beq.n	8007088 <_strtod_l+0x2a8>
 8007094:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007098:	2908      	cmp	r1, #8
 800709a:	f63f af79 	bhi.w	8006f90 <_strtod_l+0x1b0>
 800709e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80070a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070a4:	9206      	str	r2, [sp, #24]
 80070a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070a8:	1c51      	adds	r1, r2, #1
 80070aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80070ac:	7852      	ldrb	r2, [r2, #1]
 80070ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80070b2:	2e09      	cmp	r6, #9
 80070b4:	d937      	bls.n	8007126 <_strtod_l+0x346>
 80070b6:	9e06      	ldr	r6, [sp, #24]
 80070b8:	1b89      	subs	r1, r1, r6
 80070ba:	2908      	cmp	r1, #8
 80070bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80070c0:	dc02      	bgt.n	80070c8 <_strtod_l+0x2e8>
 80070c2:	4576      	cmp	r6, lr
 80070c4:	bfa8      	it	ge
 80070c6:	4676      	movge	r6, lr
 80070c8:	f1bc 0f00 	cmp.w	ip, #0
 80070cc:	d000      	beq.n	80070d0 <_strtod_l+0x2f0>
 80070ce:	4276      	negs	r6, r6
 80070d0:	2d00      	cmp	r5, #0
 80070d2:	d14d      	bne.n	8007170 <_strtod_l+0x390>
 80070d4:	9904      	ldr	r1, [sp, #16]
 80070d6:	4301      	orrs	r1, r0
 80070d8:	f47f aec6 	bne.w	8006e68 <_strtod_l+0x88>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f47f aee1 	bne.w	8006ea4 <_strtod_l+0xc4>
 80070e2:	2a69      	cmp	r2, #105	; 0x69
 80070e4:	d027      	beq.n	8007136 <_strtod_l+0x356>
 80070e6:	dc24      	bgt.n	8007132 <_strtod_l+0x352>
 80070e8:	2a49      	cmp	r2, #73	; 0x49
 80070ea:	d024      	beq.n	8007136 <_strtod_l+0x356>
 80070ec:	2a4e      	cmp	r2, #78	; 0x4e
 80070ee:	f47f aed9 	bne.w	8006ea4 <_strtod_l+0xc4>
 80070f2:	499f      	ldr	r1, [pc, #636]	; (8007370 <_strtod_l+0x590>)
 80070f4:	a817      	add	r0, sp, #92	; 0x5c
 80070f6:	f001 fe3d 	bl	8008d74 <__match>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	f43f aed2 	beq.w	8006ea4 <_strtod_l+0xc4>
 8007100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b28      	cmp	r3, #40	; 0x28
 8007106:	d12d      	bne.n	8007164 <_strtod_l+0x384>
 8007108:	499a      	ldr	r1, [pc, #616]	; (8007374 <_strtod_l+0x594>)
 800710a:	aa1a      	add	r2, sp, #104	; 0x68
 800710c:	a817      	add	r0, sp, #92	; 0x5c
 800710e:	f001 fe45 	bl	8008d9c <__hexnan>
 8007112:	2805      	cmp	r0, #5
 8007114:	d126      	bne.n	8007164 <_strtod_l+0x384>
 8007116:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007118:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800711c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007120:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007124:	e6a0      	b.n	8006e68 <_strtod_l+0x88>
 8007126:	210a      	movs	r1, #10
 8007128:	fb01 2e0e 	mla	lr, r1, lr, r2
 800712c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007130:	e7b9      	b.n	80070a6 <_strtod_l+0x2c6>
 8007132:	2a6e      	cmp	r2, #110	; 0x6e
 8007134:	e7db      	b.n	80070ee <_strtod_l+0x30e>
 8007136:	4990      	ldr	r1, [pc, #576]	; (8007378 <_strtod_l+0x598>)
 8007138:	a817      	add	r0, sp, #92	; 0x5c
 800713a:	f001 fe1b 	bl	8008d74 <__match>
 800713e:	2800      	cmp	r0, #0
 8007140:	f43f aeb0 	beq.w	8006ea4 <_strtod_l+0xc4>
 8007144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007146:	498d      	ldr	r1, [pc, #564]	; (800737c <_strtod_l+0x59c>)
 8007148:	3b01      	subs	r3, #1
 800714a:	a817      	add	r0, sp, #92	; 0x5c
 800714c:	9317      	str	r3, [sp, #92]	; 0x5c
 800714e:	f001 fe11 	bl	8008d74 <__match>
 8007152:	b910      	cbnz	r0, 800715a <_strtod_l+0x37a>
 8007154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007156:	3301      	adds	r3, #1
 8007158:	9317      	str	r3, [sp, #92]	; 0x5c
 800715a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800738c <_strtod_l+0x5ac>
 800715e:	f04f 0a00 	mov.w	sl, #0
 8007162:	e681      	b.n	8006e68 <_strtod_l+0x88>
 8007164:	4886      	ldr	r0, [pc, #536]	; (8007380 <_strtod_l+0x5a0>)
 8007166:	f002 fdf7 	bl	8009d58 <nan>
 800716a:	ec5b ab10 	vmov	sl, fp, d0
 800716e:	e67b      	b.n	8006e68 <_strtod_l+0x88>
 8007170:	9b05      	ldr	r3, [sp, #20]
 8007172:	9807      	ldr	r0, [sp, #28]
 8007174:	1af3      	subs	r3, r6, r3
 8007176:	2f00      	cmp	r7, #0
 8007178:	bf08      	it	eq
 800717a:	462f      	moveq	r7, r5
 800717c:	2d10      	cmp	r5, #16
 800717e:	9306      	str	r3, [sp, #24]
 8007180:	46a8      	mov	r8, r5
 8007182:	bfa8      	it	ge
 8007184:	f04f 0810 	movge.w	r8, #16
 8007188:	f7f9 f9e4 	bl	8000554 <__aeabi_ui2d>
 800718c:	2d09      	cmp	r5, #9
 800718e:	4682      	mov	sl, r0
 8007190:	468b      	mov	fp, r1
 8007192:	dd13      	ble.n	80071bc <_strtod_l+0x3dc>
 8007194:	4b7b      	ldr	r3, [pc, #492]	; (8007384 <_strtod_l+0x5a4>)
 8007196:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800719a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800719e:	f7f9 fa53 	bl	8000648 <__aeabi_dmul>
 80071a2:	4682      	mov	sl, r0
 80071a4:	4648      	mov	r0, r9
 80071a6:	468b      	mov	fp, r1
 80071a8:	f7f9 f9d4 	bl	8000554 <__aeabi_ui2d>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4650      	mov	r0, sl
 80071b2:	4659      	mov	r1, fp
 80071b4:	f7f9 f892 	bl	80002dc <__adddf3>
 80071b8:	4682      	mov	sl, r0
 80071ba:	468b      	mov	fp, r1
 80071bc:	2d0f      	cmp	r5, #15
 80071be:	dc38      	bgt.n	8007232 <_strtod_l+0x452>
 80071c0:	9b06      	ldr	r3, [sp, #24]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f43f ae50 	beq.w	8006e68 <_strtod_l+0x88>
 80071c8:	dd24      	ble.n	8007214 <_strtod_l+0x434>
 80071ca:	2b16      	cmp	r3, #22
 80071cc:	dc0b      	bgt.n	80071e6 <_strtod_l+0x406>
 80071ce:	496d      	ldr	r1, [pc, #436]	; (8007384 <_strtod_l+0x5a4>)
 80071d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071d8:	4652      	mov	r2, sl
 80071da:	465b      	mov	r3, fp
 80071dc:	f7f9 fa34 	bl	8000648 <__aeabi_dmul>
 80071e0:	4682      	mov	sl, r0
 80071e2:	468b      	mov	fp, r1
 80071e4:	e640      	b.n	8006e68 <_strtod_l+0x88>
 80071e6:	9a06      	ldr	r2, [sp, #24]
 80071e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80071ec:	4293      	cmp	r3, r2
 80071ee:	db20      	blt.n	8007232 <_strtod_l+0x452>
 80071f0:	4c64      	ldr	r4, [pc, #400]	; (8007384 <_strtod_l+0x5a4>)
 80071f2:	f1c5 050f 	rsb	r5, r5, #15
 80071f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80071fa:	4652      	mov	r2, sl
 80071fc:	465b      	mov	r3, fp
 80071fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007202:	f7f9 fa21 	bl	8000648 <__aeabi_dmul>
 8007206:	9b06      	ldr	r3, [sp, #24]
 8007208:	1b5d      	subs	r5, r3, r5
 800720a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800720e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007212:	e7e3      	b.n	80071dc <_strtod_l+0x3fc>
 8007214:	9b06      	ldr	r3, [sp, #24]
 8007216:	3316      	adds	r3, #22
 8007218:	db0b      	blt.n	8007232 <_strtod_l+0x452>
 800721a:	9b05      	ldr	r3, [sp, #20]
 800721c:	1b9e      	subs	r6, r3, r6
 800721e:	4b59      	ldr	r3, [pc, #356]	; (8007384 <_strtod_l+0x5a4>)
 8007220:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007224:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007228:	4650      	mov	r0, sl
 800722a:	4659      	mov	r1, fp
 800722c:	f7f9 fb36 	bl	800089c <__aeabi_ddiv>
 8007230:	e7d6      	b.n	80071e0 <_strtod_l+0x400>
 8007232:	9b06      	ldr	r3, [sp, #24]
 8007234:	eba5 0808 	sub.w	r8, r5, r8
 8007238:	4498      	add	r8, r3
 800723a:	f1b8 0f00 	cmp.w	r8, #0
 800723e:	dd74      	ble.n	800732a <_strtod_l+0x54a>
 8007240:	f018 030f 	ands.w	r3, r8, #15
 8007244:	d00a      	beq.n	800725c <_strtod_l+0x47c>
 8007246:	494f      	ldr	r1, [pc, #316]	; (8007384 <_strtod_l+0x5a4>)
 8007248:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800724c:	4652      	mov	r2, sl
 800724e:	465b      	mov	r3, fp
 8007250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007254:	f7f9 f9f8 	bl	8000648 <__aeabi_dmul>
 8007258:	4682      	mov	sl, r0
 800725a:	468b      	mov	fp, r1
 800725c:	f038 080f 	bics.w	r8, r8, #15
 8007260:	d04f      	beq.n	8007302 <_strtod_l+0x522>
 8007262:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007266:	dd22      	ble.n	80072ae <_strtod_l+0x4ce>
 8007268:	2500      	movs	r5, #0
 800726a:	462e      	mov	r6, r5
 800726c:	9507      	str	r5, [sp, #28]
 800726e:	9505      	str	r5, [sp, #20]
 8007270:	2322      	movs	r3, #34	; 0x22
 8007272:	f8df b118 	ldr.w	fp, [pc, #280]	; 800738c <_strtod_l+0x5ac>
 8007276:	6023      	str	r3, [r4, #0]
 8007278:	f04f 0a00 	mov.w	sl, #0
 800727c:	9b07      	ldr	r3, [sp, #28]
 800727e:	2b00      	cmp	r3, #0
 8007280:	f43f adf2 	beq.w	8006e68 <_strtod_l+0x88>
 8007284:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007286:	4620      	mov	r0, r4
 8007288:	f001 fe90 	bl	8008fac <_Bfree>
 800728c:	9905      	ldr	r1, [sp, #20]
 800728e:	4620      	mov	r0, r4
 8007290:	f001 fe8c 	bl	8008fac <_Bfree>
 8007294:	4631      	mov	r1, r6
 8007296:	4620      	mov	r0, r4
 8007298:	f001 fe88 	bl	8008fac <_Bfree>
 800729c:	9907      	ldr	r1, [sp, #28]
 800729e:	4620      	mov	r0, r4
 80072a0:	f001 fe84 	bl	8008fac <_Bfree>
 80072a4:	4629      	mov	r1, r5
 80072a6:	4620      	mov	r0, r4
 80072a8:	f001 fe80 	bl	8008fac <_Bfree>
 80072ac:	e5dc      	b.n	8006e68 <_strtod_l+0x88>
 80072ae:	4b36      	ldr	r3, [pc, #216]	; (8007388 <_strtod_l+0x5a8>)
 80072b0:	9304      	str	r3, [sp, #16]
 80072b2:	2300      	movs	r3, #0
 80072b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80072b8:	4650      	mov	r0, sl
 80072ba:	4659      	mov	r1, fp
 80072bc:	4699      	mov	r9, r3
 80072be:	f1b8 0f01 	cmp.w	r8, #1
 80072c2:	dc21      	bgt.n	8007308 <_strtod_l+0x528>
 80072c4:	b10b      	cbz	r3, 80072ca <_strtod_l+0x4ea>
 80072c6:	4682      	mov	sl, r0
 80072c8:	468b      	mov	fp, r1
 80072ca:	4b2f      	ldr	r3, [pc, #188]	; (8007388 <_strtod_l+0x5a8>)
 80072cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80072d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80072d4:	4652      	mov	r2, sl
 80072d6:	465b      	mov	r3, fp
 80072d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80072dc:	f7f9 f9b4 	bl	8000648 <__aeabi_dmul>
 80072e0:	4b2a      	ldr	r3, [pc, #168]	; (800738c <_strtod_l+0x5ac>)
 80072e2:	460a      	mov	r2, r1
 80072e4:	400b      	ands	r3, r1
 80072e6:	492a      	ldr	r1, [pc, #168]	; (8007390 <_strtod_l+0x5b0>)
 80072e8:	428b      	cmp	r3, r1
 80072ea:	4682      	mov	sl, r0
 80072ec:	d8bc      	bhi.n	8007268 <_strtod_l+0x488>
 80072ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80072f2:	428b      	cmp	r3, r1
 80072f4:	bf86      	itte	hi
 80072f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007394 <_strtod_l+0x5b4>
 80072fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80072fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007302:	2300      	movs	r3, #0
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	e084      	b.n	8007412 <_strtod_l+0x632>
 8007308:	f018 0f01 	tst.w	r8, #1
 800730c:	d005      	beq.n	800731a <_strtod_l+0x53a>
 800730e:	9b04      	ldr	r3, [sp, #16]
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	f7f9 f998 	bl	8000648 <__aeabi_dmul>
 8007318:	2301      	movs	r3, #1
 800731a:	9a04      	ldr	r2, [sp, #16]
 800731c:	3208      	adds	r2, #8
 800731e:	f109 0901 	add.w	r9, r9, #1
 8007322:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007326:	9204      	str	r2, [sp, #16]
 8007328:	e7c9      	b.n	80072be <_strtod_l+0x4de>
 800732a:	d0ea      	beq.n	8007302 <_strtod_l+0x522>
 800732c:	f1c8 0800 	rsb	r8, r8, #0
 8007330:	f018 020f 	ands.w	r2, r8, #15
 8007334:	d00a      	beq.n	800734c <_strtod_l+0x56c>
 8007336:	4b13      	ldr	r3, [pc, #76]	; (8007384 <_strtod_l+0x5a4>)
 8007338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800733c:	4650      	mov	r0, sl
 800733e:	4659      	mov	r1, fp
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f7f9 faaa 	bl	800089c <__aeabi_ddiv>
 8007348:	4682      	mov	sl, r0
 800734a:	468b      	mov	fp, r1
 800734c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007350:	d0d7      	beq.n	8007302 <_strtod_l+0x522>
 8007352:	f1b8 0f1f 	cmp.w	r8, #31
 8007356:	dd1f      	ble.n	8007398 <_strtod_l+0x5b8>
 8007358:	2500      	movs	r5, #0
 800735a:	462e      	mov	r6, r5
 800735c:	9507      	str	r5, [sp, #28]
 800735e:	9505      	str	r5, [sp, #20]
 8007360:	2322      	movs	r3, #34	; 0x22
 8007362:	f04f 0a00 	mov.w	sl, #0
 8007366:	f04f 0b00 	mov.w	fp, #0
 800736a:	6023      	str	r3, [r4, #0]
 800736c:	e786      	b.n	800727c <_strtod_l+0x49c>
 800736e:	bf00      	nop
 8007370:	0800aaf5 	.word	0x0800aaf5
 8007374:	0800ab38 	.word	0x0800ab38
 8007378:	0800aaed 	.word	0x0800aaed
 800737c:	0800ac7c 	.word	0x0800ac7c
 8007380:	0800af28 	.word	0x0800af28
 8007384:	0800ae08 	.word	0x0800ae08
 8007388:	0800ade0 	.word	0x0800ade0
 800738c:	7ff00000 	.word	0x7ff00000
 8007390:	7ca00000 	.word	0x7ca00000
 8007394:	7fefffff 	.word	0x7fefffff
 8007398:	f018 0310 	ands.w	r3, r8, #16
 800739c:	bf18      	it	ne
 800739e:	236a      	movne	r3, #106	; 0x6a
 80073a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007750 <_strtod_l+0x970>
 80073a4:	9304      	str	r3, [sp, #16]
 80073a6:	4650      	mov	r0, sl
 80073a8:	4659      	mov	r1, fp
 80073aa:	2300      	movs	r3, #0
 80073ac:	f018 0f01 	tst.w	r8, #1
 80073b0:	d004      	beq.n	80073bc <_strtod_l+0x5dc>
 80073b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80073b6:	f7f9 f947 	bl	8000648 <__aeabi_dmul>
 80073ba:	2301      	movs	r3, #1
 80073bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80073c0:	f109 0908 	add.w	r9, r9, #8
 80073c4:	d1f2      	bne.n	80073ac <_strtod_l+0x5cc>
 80073c6:	b10b      	cbz	r3, 80073cc <_strtod_l+0x5ec>
 80073c8:	4682      	mov	sl, r0
 80073ca:	468b      	mov	fp, r1
 80073cc:	9b04      	ldr	r3, [sp, #16]
 80073ce:	b1c3      	cbz	r3, 8007402 <_strtod_l+0x622>
 80073d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80073d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80073d8:	2b00      	cmp	r3, #0
 80073da:	4659      	mov	r1, fp
 80073dc:	dd11      	ble.n	8007402 <_strtod_l+0x622>
 80073de:	2b1f      	cmp	r3, #31
 80073e0:	f340 8124 	ble.w	800762c <_strtod_l+0x84c>
 80073e4:	2b34      	cmp	r3, #52	; 0x34
 80073e6:	bfde      	ittt	le
 80073e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80073ec:	f04f 33ff 	movle.w	r3, #4294967295
 80073f0:	fa03 f202 	lslle.w	r2, r3, r2
 80073f4:	f04f 0a00 	mov.w	sl, #0
 80073f8:	bfcc      	ite	gt
 80073fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80073fe:	ea02 0b01 	andle.w	fp, r2, r1
 8007402:	2200      	movs	r2, #0
 8007404:	2300      	movs	r3, #0
 8007406:	4650      	mov	r0, sl
 8007408:	4659      	mov	r1, fp
 800740a:	f7f9 fb85 	bl	8000b18 <__aeabi_dcmpeq>
 800740e:	2800      	cmp	r0, #0
 8007410:	d1a2      	bne.n	8007358 <_strtod_l+0x578>
 8007412:	9b07      	ldr	r3, [sp, #28]
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	9908      	ldr	r1, [sp, #32]
 8007418:	462b      	mov	r3, r5
 800741a:	463a      	mov	r2, r7
 800741c:	4620      	mov	r0, r4
 800741e:	f001 fe2d 	bl	800907c <__s2b>
 8007422:	9007      	str	r0, [sp, #28]
 8007424:	2800      	cmp	r0, #0
 8007426:	f43f af1f 	beq.w	8007268 <_strtod_l+0x488>
 800742a:	9b05      	ldr	r3, [sp, #20]
 800742c:	1b9e      	subs	r6, r3, r6
 800742e:	9b06      	ldr	r3, [sp, #24]
 8007430:	2b00      	cmp	r3, #0
 8007432:	bfb4      	ite	lt
 8007434:	4633      	movlt	r3, r6
 8007436:	2300      	movge	r3, #0
 8007438:	930c      	str	r3, [sp, #48]	; 0x30
 800743a:	9b06      	ldr	r3, [sp, #24]
 800743c:	2500      	movs	r5, #0
 800743e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007442:	9312      	str	r3, [sp, #72]	; 0x48
 8007444:	462e      	mov	r6, r5
 8007446:	9b07      	ldr	r3, [sp, #28]
 8007448:	4620      	mov	r0, r4
 800744a:	6859      	ldr	r1, [r3, #4]
 800744c:	f001 fd6e 	bl	8008f2c <_Balloc>
 8007450:	9005      	str	r0, [sp, #20]
 8007452:	2800      	cmp	r0, #0
 8007454:	f43f af0c 	beq.w	8007270 <_strtod_l+0x490>
 8007458:	9b07      	ldr	r3, [sp, #28]
 800745a:	691a      	ldr	r2, [r3, #16]
 800745c:	3202      	adds	r2, #2
 800745e:	f103 010c 	add.w	r1, r3, #12
 8007462:	0092      	lsls	r2, r2, #2
 8007464:	300c      	adds	r0, #12
 8007466:	f001 fd53 	bl	8008f10 <memcpy>
 800746a:	ec4b ab10 	vmov	d0, sl, fp
 800746e:	aa1a      	add	r2, sp, #104	; 0x68
 8007470:	a919      	add	r1, sp, #100	; 0x64
 8007472:	4620      	mov	r0, r4
 8007474:	f002 f948 	bl	8009708 <__d2b>
 8007478:	ec4b ab18 	vmov	d8, sl, fp
 800747c:	9018      	str	r0, [sp, #96]	; 0x60
 800747e:	2800      	cmp	r0, #0
 8007480:	f43f aef6 	beq.w	8007270 <_strtod_l+0x490>
 8007484:	2101      	movs	r1, #1
 8007486:	4620      	mov	r0, r4
 8007488:	f001 fe92 	bl	80091b0 <__i2b>
 800748c:	4606      	mov	r6, r0
 800748e:	2800      	cmp	r0, #0
 8007490:	f43f aeee 	beq.w	8007270 <_strtod_l+0x490>
 8007494:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007496:	9904      	ldr	r1, [sp, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	bfab      	itete	ge
 800749c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800749e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80074a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80074a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80074a6:	bfac      	ite	ge
 80074a8:	eb03 0902 	addge.w	r9, r3, r2
 80074ac:	1ad7      	sublt	r7, r2, r3
 80074ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80074b0:	eba3 0801 	sub.w	r8, r3, r1
 80074b4:	4490      	add	r8, r2
 80074b6:	4ba1      	ldr	r3, [pc, #644]	; (800773c <_strtod_l+0x95c>)
 80074b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80074bc:	4598      	cmp	r8, r3
 80074be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80074c2:	f280 80c7 	bge.w	8007654 <_strtod_l+0x874>
 80074c6:	eba3 0308 	sub.w	r3, r3, r8
 80074ca:	2b1f      	cmp	r3, #31
 80074cc:	eba2 0203 	sub.w	r2, r2, r3
 80074d0:	f04f 0101 	mov.w	r1, #1
 80074d4:	f300 80b1 	bgt.w	800763a <_strtod_l+0x85a>
 80074d8:	fa01 f303 	lsl.w	r3, r1, r3
 80074dc:	930d      	str	r3, [sp, #52]	; 0x34
 80074de:	2300      	movs	r3, #0
 80074e0:	9308      	str	r3, [sp, #32]
 80074e2:	eb09 0802 	add.w	r8, r9, r2
 80074e6:	9b04      	ldr	r3, [sp, #16]
 80074e8:	45c1      	cmp	r9, r8
 80074ea:	4417      	add	r7, r2
 80074ec:	441f      	add	r7, r3
 80074ee:	464b      	mov	r3, r9
 80074f0:	bfa8      	it	ge
 80074f2:	4643      	movge	r3, r8
 80074f4:	42bb      	cmp	r3, r7
 80074f6:	bfa8      	it	ge
 80074f8:	463b      	movge	r3, r7
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	bfc2      	ittt	gt
 80074fe:	eba8 0803 	subgt.w	r8, r8, r3
 8007502:	1aff      	subgt	r7, r7, r3
 8007504:	eba9 0903 	subgt.w	r9, r9, r3
 8007508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800750a:	2b00      	cmp	r3, #0
 800750c:	dd17      	ble.n	800753e <_strtod_l+0x75e>
 800750e:	4631      	mov	r1, r6
 8007510:	461a      	mov	r2, r3
 8007512:	4620      	mov	r0, r4
 8007514:	f001 ff0c 	bl	8009330 <__pow5mult>
 8007518:	4606      	mov	r6, r0
 800751a:	2800      	cmp	r0, #0
 800751c:	f43f aea8 	beq.w	8007270 <_strtod_l+0x490>
 8007520:	4601      	mov	r1, r0
 8007522:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007524:	4620      	mov	r0, r4
 8007526:	f001 fe59 	bl	80091dc <__multiply>
 800752a:	900b      	str	r0, [sp, #44]	; 0x2c
 800752c:	2800      	cmp	r0, #0
 800752e:	f43f ae9f 	beq.w	8007270 <_strtod_l+0x490>
 8007532:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007534:	4620      	mov	r0, r4
 8007536:	f001 fd39 	bl	8008fac <_Bfree>
 800753a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800753c:	9318      	str	r3, [sp, #96]	; 0x60
 800753e:	f1b8 0f00 	cmp.w	r8, #0
 8007542:	f300 808c 	bgt.w	800765e <_strtod_l+0x87e>
 8007546:	9b06      	ldr	r3, [sp, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	dd08      	ble.n	800755e <_strtod_l+0x77e>
 800754c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800754e:	9905      	ldr	r1, [sp, #20]
 8007550:	4620      	mov	r0, r4
 8007552:	f001 feed 	bl	8009330 <__pow5mult>
 8007556:	9005      	str	r0, [sp, #20]
 8007558:	2800      	cmp	r0, #0
 800755a:	f43f ae89 	beq.w	8007270 <_strtod_l+0x490>
 800755e:	2f00      	cmp	r7, #0
 8007560:	dd08      	ble.n	8007574 <_strtod_l+0x794>
 8007562:	9905      	ldr	r1, [sp, #20]
 8007564:	463a      	mov	r2, r7
 8007566:	4620      	mov	r0, r4
 8007568:	f001 ff3c 	bl	80093e4 <__lshift>
 800756c:	9005      	str	r0, [sp, #20]
 800756e:	2800      	cmp	r0, #0
 8007570:	f43f ae7e 	beq.w	8007270 <_strtod_l+0x490>
 8007574:	f1b9 0f00 	cmp.w	r9, #0
 8007578:	dd08      	ble.n	800758c <_strtod_l+0x7ac>
 800757a:	4631      	mov	r1, r6
 800757c:	464a      	mov	r2, r9
 800757e:	4620      	mov	r0, r4
 8007580:	f001 ff30 	bl	80093e4 <__lshift>
 8007584:	4606      	mov	r6, r0
 8007586:	2800      	cmp	r0, #0
 8007588:	f43f ae72 	beq.w	8007270 <_strtod_l+0x490>
 800758c:	9a05      	ldr	r2, [sp, #20]
 800758e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007590:	4620      	mov	r0, r4
 8007592:	f001 ffb3 	bl	80094fc <__mdiff>
 8007596:	4605      	mov	r5, r0
 8007598:	2800      	cmp	r0, #0
 800759a:	f43f ae69 	beq.w	8007270 <_strtod_l+0x490>
 800759e:	68c3      	ldr	r3, [r0, #12]
 80075a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80075a2:	2300      	movs	r3, #0
 80075a4:	60c3      	str	r3, [r0, #12]
 80075a6:	4631      	mov	r1, r6
 80075a8:	f001 ff8c 	bl	80094c4 <__mcmp>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	da60      	bge.n	8007672 <_strtod_l+0x892>
 80075b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075b2:	ea53 030a 	orrs.w	r3, r3, sl
 80075b6:	f040 8082 	bne.w	80076be <_strtod_l+0x8de>
 80075ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d17d      	bne.n	80076be <_strtod_l+0x8de>
 80075c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80075c6:	0d1b      	lsrs	r3, r3, #20
 80075c8:	051b      	lsls	r3, r3, #20
 80075ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80075ce:	d976      	bls.n	80076be <_strtod_l+0x8de>
 80075d0:	696b      	ldr	r3, [r5, #20]
 80075d2:	b913      	cbnz	r3, 80075da <_strtod_l+0x7fa>
 80075d4:	692b      	ldr	r3, [r5, #16]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	dd71      	ble.n	80076be <_strtod_l+0x8de>
 80075da:	4629      	mov	r1, r5
 80075dc:	2201      	movs	r2, #1
 80075de:	4620      	mov	r0, r4
 80075e0:	f001 ff00 	bl	80093e4 <__lshift>
 80075e4:	4631      	mov	r1, r6
 80075e6:	4605      	mov	r5, r0
 80075e8:	f001 ff6c 	bl	80094c4 <__mcmp>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	dd66      	ble.n	80076be <_strtod_l+0x8de>
 80075f0:	9904      	ldr	r1, [sp, #16]
 80075f2:	4a53      	ldr	r2, [pc, #332]	; (8007740 <_strtod_l+0x960>)
 80075f4:	465b      	mov	r3, fp
 80075f6:	2900      	cmp	r1, #0
 80075f8:	f000 8081 	beq.w	80076fe <_strtod_l+0x91e>
 80075fc:	ea02 010b 	and.w	r1, r2, fp
 8007600:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007604:	dc7b      	bgt.n	80076fe <_strtod_l+0x91e>
 8007606:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800760a:	f77f aea9 	ble.w	8007360 <_strtod_l+0x580>
 800760e:	4b4d      	ldr	r3, [pc, #308]	; (8007744 <_strtod_l+0x964>)
 8007610:	4650      	mov	r0, sl
 8007612:	4659      	mov	r1, fp
 8007614:	2200      	movs	r2, #0
 8007616:	f7f9 f817 	bl	8000648 <__aeabi_dmul>
 800761a:	460b      	mov	r3, r1
 800761c:	4303      	orrs	r3, r0
 800761e:	bf08      	it	eq
 8007620:	2322      	moveq	r3, #34	; 0x22
 8007622:	4682      	mov	sl, r0
 8007624:	468b      	mov	fp, r1
 8007626:	bf08      	it	eq
 8007628:	6023      	streq	r3, [r4, #0]
 800762a:	e62b      	b.n	8007284 <_strtod_l+0x4a4>
 800762c:	f04f 32ff 	mov.w	r2, #4294967295
 8007630:	fa02 f303 	lsl.w	r3, r2, r3
 8007634:	ea03 0a0a 	and.w	sl, r3, sl
 8007638:	e6e3      	b.n	8007402 <_strtod_l+0x622>
 800763a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800763e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007642:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007646:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800764a:	fa01 f308 	lsl.w	r3, r1, r8
 800764e:	9308      	str	r3, [sp, #32]
 8007650:	910d      	str	r1, [sp, #52]	; 0x34
 8007652:	e746      	b.n	80074e2 <_strtod_l+0x702>
 8007654:	2300      	movs	r3, #0
 8007656:	9308      	str	r3, [sp, #32]
 8007658:	2301      	movs	r3, #1
 800765a:	930d      	str	r3, [sp, #52]	; 0x34
 800765c:	e741      	b.n	80074e2 <_strtod_l+0x702>
 800765e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007660:	4642      	mov	r2, r8
 8007662:	4620      	mov	r0, r4
 8007664:	f001 febe 	bl	80093e4 <__lshift>
 8007668:	9018      	str	r0, [sp, #96]	; 0x60
 800766a:	2800      	cmp	r0, #0
 800766c:	f47f af6b 	bne.w	8007546 <_strtod_l+0x766>
 8007670:	e5fe      	b.n	8007270 <_strtod_l+0x490>
 8007672:	465f      	mov	r7, fp
 8007674:	d16e      	bne.n	8007754 <_strtod_l+0x974>
 8007676:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007678:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800767c:	b342      	cbz	r2, 80076d0 <_strtod_l+0x8f0>
 800767e:	4a32      	ldr	r2, [pc, #200]	; (8007748 <_strtod_l+0x968>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d128      	bne.n	80076d6 <_strtod_l+0x8f6>
 8007684:	9b04      	ldr	r3, [sp, #16]
 8007686:	4651      	mov	r1, sl
 8007688:	b1eb      	cbz	r3, 80076c6 <_strtod_l+0x8e6>
 800768a:	4b2d      	ldr	r3, [pc, #180]	; (8007740 <_strtod_l+0x960>)
 800768c:	403b      	ands	r3, r7
 800768e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007692:	f04f 32ff 	mov.w	r2, #4294967295
 8007696:	d819      	bhi.n	80076cc <_strtod_l+0x8ec>
 8007698:	0d1b      	lsrs	r3, r3, #20
 800769a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800769e:	fa02 f303 	lsl.w	r3, r2, r3
 80076a2:	4299      	cmp	r1, r3
 80076a4:	d117      	bne.n	80076d6 <_strtod_l+0x8f6>
 80076a6:	4b29      	ldr	r3, [pc, #164]	; (800774c <_strtod_l+0x96c>)
 80076a8:	429f      	cmp	r7, r3
 80076aa:	d102      	bne.n	80076b2 <_strtod_l+0x8d2>
 80076ac:	3101      	adds	r1, #1
 80076ae:	f43f addf 	beq.w	8007270 <_strtod_l+0x490>
 80076b2:	4b23      	ldr	r3, [pc, #140]	; (8007740 <_strtod_l+0x960>)
 80076b4:	403b      	ands	r3, r7
 80076b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80076ba:	f04f 0a00 	mov.w	sl, #0
 80076be:	9b04      	ldr	r3, [sp, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1a4      	bne.n	800760e <_strtod_l+0x82e>
 80076c4:	e5de      	b.n	8007284 <_strtod_l+0x4a4>
 80076c6:	f04f 33ff 	mov.w	r3, #4294967295
 80076ca:	e7ea      	b.n	80076a2 <_strtod_l+0x8c2>
 80076cc:	4613      	mov	r3, r2
 80076ce:	e7e8      	b.n	80076a2 <_strtod_l+0x8c2>
 80076d0:	ea53 030a 	orrs.w	r3, r3, sl
 80076d4:	d08c      	beq.n	80075f0 <_strtod_l+0x810>
 80076d6:	9b08      	ldr	r3, [sp, #32]
 80076d8:	b1db      	cbz	r3, 8007712 <_strtod_l+0x932>
 80076da:	423b      	tst	r3, r7
 80076dc:	d0ef      	beq.n	80076be <_strtod_l+0x8de>
 80076de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e0:	9a04      	ldr	r2, [sp, #16]
 80076e2:	4650      	mov	r0, sl
 80076e4:	4659      	mov	r1, fp
 80076e6:	b1c3      	cbz	r3, 800771a <_strtod_l+0x93a>
 80076e8:	f7ff fb5c 	bl	8006da4 <sulp>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	ec51 0b18 	vmov	r0, r1, d8
 80076f4:	f7f8 fdf2 	bl	80002dc <__adddf3>
 80076f8:	4682      	mov	sl, r0
 80076fa:	468b      	mov	fp, r1
 80076fc:	e7df      	b.n	80076be <_strtod_l+0x8de>
 80076fe:	4013      	ands	r3, r2
 8007700:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007704:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007708:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800770c:	f04f 3aff 	mov.w	sl, #4294967295
 8007710:	e7d5      	b.n	80076be <_strtod_l+0x8de>
 8007712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007714:	ea13 0f0a 	tst.w	r3, sl
 8007718:	e7e0      	b.n	80076dc <_strtod_l+0x8fc>
 800771a:	f7ff fb43 	bl	8006da4 <sulp>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	ec51 0b18 	vmov	r0, r1, d8
 8007726:	f7f8 fdd7 	bl	80002d8 <__aeabi_dsub>
 800772a:	2200      	movs	r2, #0
 800772c:	2300      	movs	r3, #0
 800772e:	4682      	mov	sl, r0
 8007730:	468b      	mov	fp, r1
 8007732:	f7f9 f9f1 	bl	8000b18 <__aeabi_dcmpeq>
 8007736:	2800      	cmp	r0, #0
 8007738:	d0c1      	beq.n	80076be <_strtod_l+0x8de>
 800773a:	e611      	b.n	8007360 <_strtod_l+0x580>
 800773c:	fffffc02 	.word	0xfffffc02
 8007740:	7ff00000 	.word	0x7ff00000
 8007744:	39500000 	.word	0x39500000
 8007748:	000fffff 	.word	0x000fffff
 800774c:	7fefffff 	.word	0x7fefffff
 8007750:	0800ab50 	.word	0x0800ab50
 8007754:	4631      	mov	r1, r6
 8007756:	4628      	mov	r0, r5
 8007758:	f002 f832 	bl	80097c0 <__ratio>
 800775c:	ec59 8b10 	vmov	r8, r9, d0
 8007760:	ee10 0a10 	vmov	r0, s0
 8007764:	2200      	movs	r2, #0
 8007766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800776a:	4649      	mov	r1, r9
 800776c:	f7f9 f9e8 	bl	8000b40 <__aeabi_dcmple>
 8007770:	2800      	cmp	r0, #0
 8007772:	d07a      	beq.n	800786a <_strtod_l+0xa8a>
 8007774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d04a      	beq.n	8007810 <_strtod_l+0xa30>
 800777a:	4b95      	ldr	r3, [pc, #596]	; (80079d0 <_strtod_l+0xbf0>)
 800777c:	2200      	movs	r2, #0
 800777e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007782:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80079d0 <_strtod_l+0xbf0>
 8007786:	f04f 0800 	mov.w	r8, #0
 800778a:	4b92      	ldr	r3, [pc, #584]	; (80079d4 <_strtod_l+0xbf4>)
 800778c:	403b      	ands	r3, r7
 800778e:	930d      	str	r3, [sp, #52]	; 0x34
 8007790:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007792:	4b91      	ldr	r3, [pc, #580]	; (80079d8 <_strtod_l+0xbf8>)
 8007794:	429a      	cmp	r2, r3
 8007796:	f040 80b0 	bne.w	80078fa <_strtod_l+0xb1a>
 800779a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800779e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80077a2:	ec4b ab10 	vmov	d0, sl, fp
 80077a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80077aa:	f001 ff31 	bl	8009610 <__ulp>
 80077ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80077b2:	ec53 2b10 	vmov	r2, r3, d0
 80077b6:	f7f8 ff47 	bl	8000648 <__aeabi_dmul>
 80077ba:	4652      	mov	r2, sl
 80077bc:	465b      	mov	r3, fp
 80077be:	f7f8 fd8d 	bl	80002dc <__adddf3>
 80077c2:	460b      	mov	r3, r1
 80077c4:	4983      	ldr	r1, [pc, #524]	; (80079d4 <_strtod_l+0xbf4>)
 80077c6:	4a85      	ldr	r2, [pc, #532]	; (80079dc <_strtod_l+0xbfc>)
 80077c8:	4019      	ands	r1, r3
 80077ca:	4291      	cmp	r1, r2
 80077cc:	4682      	mov	sl, r0
 80077ce:	d960      	bls.n	8007892 <_strtod_l+0xab2>
 80077d0:	ee18 3a90 	vmov	r3, s17
 80077d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80077d8:	4293      	cmp	r3, r2
 80077da:	d104      	bne.n	80077e6 <_strtod_l+0xa06>
 80077dc:	ee18 3a10 	vmov	r3, s16
 80077e0:	3301      	adds	r3, #1
 80077e2:	f43f ad45 	beq.w	8007270 <_strtod_l+0x490>
 80077e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80079e8 <_strtod_l+0xc08>
 80077ea:	f04f 3aff 	mov.w	sl, #4294967295
 80077ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077f0:	4620      	mov	r0, r4
 80077f2:	f001 fbdb 	bl	8008fac <_Bfree>
 80077f6:	9905      	ldr	r1, [sp, #20]
 80077f8:	4620      	mov	r0, r4
 80077fa:	f001 fbd7 	bl	8008fac <_Bfree>
 80077fe:	4631      	mov	r1, r6
 8007800:	4620      	mov	r0, r4
 8007802:	f001 fbd3 	bl	8008fac <_Bfree>
 8007806:	4629      	mov	r1, r5
 8007808:	4620      	mov	r0, r4
 800780a:	f001 fbcf 	bl	8008fac <_Bfree>
 800780e:	e61a      	b.n	8007446 <_strtod_l+0x666>
 8007810:	f1ba 0f00 	cmp.w	sl, #0
 8007814:	d11b      	bne.n	800784e <_strtod_l+0xa6e>
 8007816:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800781a:	b9f3      	cbnz	r3, 800785a <_strtod_l+0xa7a>
 800781c:	4b6c      	ldr	r3, [pc, #432]	; (80079d0 <_strtod_l+0xbf0>)
 800781e:	2200      	movs	r2, #0
 8007820:	4640      	mov	r0, r8
 8007822:	4649      	mov	r1, r9
 8007824:	f7f9 f982 	bl	8000b2c <__aeabi_dcmplt>
 8007828:	b9d0      	cbnz	r0, 8007860 <_strtod_l+0xa80>
 800782a:	4640      	mov	r0, r8
 800782c:	4649      	mov	r1, r9
 800782e:	4b6c      	ldr	r3, [pc, #432]	; (80079e0 <_strtod_l+0xc00>)
 8007830:	2200      	movs	r2, #0
 8007832:	f7f8 ff09 	bl	8000648 <__aeabi_dmul>
 8007836:	4680      	mov	r8, r0
 8007838:	4689      	mov	r9, r1
 800783a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800783e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007842:	9315      	str	r3, [sp, #84]	; 0x54
 8007844:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007848:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800784c:	e79d      	b.n	800778a <_strtod_l+0x9aa>
 800784e:	f1ba 0f01 	cmp.w	sl, #1
 8007852:	d102      	bne.n	800785a <_strtod_l+0xa7a>
 8007854:	2f00      	cmp	r7, #0
 8007856:	f43f ad83 	beq.w	8007360 <_strtod_l+0x580>
 800785a:	4b62      	ldr	r3, [pc, #392]	; (80079e4 <_strtod_l+0xc04>)
 800785c:	2200      	movs	r2, #0
 800785e:	e78e      	b.n	800777e <_strtod_l+0x99e>
 8007860:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80079e0 <_strtod_l+0xc00>
 8007864:	f04f 0800 	mov.w	r8, #0
 8007868:	e7e7      	b.n	800783a <_strtod_l+0xa5a>
 800786a:	4b5d      	ldr	r3, [pc, #372]	; (80079e0 <_strtod_l+0xc00>)
 800786c:	4640      	mov	r0, r8
 800786e:	4649      	mov	r1, r9
 8007870:	2200      	movs	r2, #0
 8007872:	f7f8 fee9 	bl	8000648 <__aeabi_dmul>
 8007876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007878:	4680      	mov	r8, r0
 800787a:	4689      	mov	r9, r1
 800787c:	b933      	cbnz	r3, 800788c <_strtod_l+0xaac>
 800787e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007882:	900e      	str	r0, [sp, #56]	; 0x38
 8007884:	930f      	str	r3, [sp, #60]	; 0x3c
 8007886:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800788a:	e7dd      	b.n	8007848 <_strtod_l+0xa68>
 800788c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007890:	e7f9      	b.n	8007886 <_strtod_l+0xaa6>
 8007892:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007896:	9b04      	ldr	r3, [sp, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1a8      	bne.n	80077ee <_strtod_l+0xa0e>
 800789c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078a2:	0d1b      	lsrs	r3, r3, #20
 80078a4:	051b      	lsls	r3, r3, #20
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d1a1      	bne.n	80077ee <_strtod_l+0xa0e>
 80078aa:	4640      	mov	r0, r8
 80078ac:	4649      	mov	r1, r9
 80078ae:	f7f9 fa2b 	bl	8000d08 <__aeabi_d2lz>
 80078b2:	f7f8 fe9b 	bl	80005ec <__aeabi_l2d>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4640      	mov	r0, r8
 80078bc:	4649      	mov	r1, r9
 80078be:	f7f8 fd0b 	bl	80002d8 <__aeabi_dsub>
 80078c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078c8:	ea43 030a 	orr.w	r3, r3, sl
 80078cc:	4313      	orrs	r3, r2
 80078ce:	4680      	mov	r8, r0
 80078d0:	4689      	mov	r9, r1
 80078d2:	d055      	beq.n	8007980 <_strtod_l+0xba0>
 80078d4:	a336      	add	r3, pc, #216	; (adr r3, 80079b0 <_strtod_l+0xbd0>)
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	f7f9 f927 	bl	8000b2c <__aeabi_dcmplt>
 80078de:	2800      	cmp	r0, #0
 80078e0:	f47f acd0 	bne.w	8007284 <_strtod_l+0x4a4>
 80078e4:	a334      	add	r3, pc, #208	; (adr r3, 80079b8 <_strtod_l+0xbd8>)
 80078e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ea:	4640      	mov	r0, r8
 80078ec:	4649      	mov	r1, r9
 80078ee:	f7f9 f93b 	bl	8000b68 <__aeabi_dcmpgt>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	f43f af7b 	beq.w	80077ee <_strtod_l+0xa0e>
 80078f8:	e4c4      	b.n	8007284 <_strtod_l+0x4a4>
 80078fa:	9b04      	ldr	r3, [sp, #16]
 80078fc:	b333      	cbz	r3, 800794c <_strtod_l+0xb6c>
 80078fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007900:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007904:	d822      	bhi.n	800794c <_strtod_l+0xb6c>
 8007906:	a32e      	add	r3, pc, #184	; (adr r3, 80079c0 <_strtod_l+0xbe0>)
 8007908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790c:	4640      	mov	r0, r8
 800790e:	4649      	mov	r1, r9
 8007910:	f7f9 f916 	bl	8000b40 <__aeabi_dcmple>
 8007914:	b1a0      	cbz	r0, 8007940 <_strtod_l+0xb60>
 8007916:	4649      	mov	r1, r9
 8007918:	4640      	mov	r0, r8
 800791a:	f7f9 f96d 	bl	8000bf8 <__aeabi_d2uiz>
 800791e:	2801      	cmp	r0, #1
 8007920:	bf38      	it	cc
 8007922:	2001      	movcc	r0, #1
 8007924:	f7f8 fe16 	bl	8000554 <__aeabi_ui2d>
 8007928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800792a:	4680      	mov	r8, r0
 800792c:	4689      	mov	r9, r1
 800792e:	bb23      	cbnz	r3, 800797a <_strtod_l+0xb9a>
 8007930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007934:	9010      	str	r0, [sp, #64]	; 0x40
 8007936:	9311      	str	r3, [sp, #68]	; 0x44
 8007938:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800793c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007942:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007944:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007948:	1a9b      	subs	r3, r3, r2
 800794a:	9309      	str	r3, [sp, #36]	; 0x24
 800794c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007950:	eeb0 0a48 	vmov.f32	s0, s16
 8007954:	eef0 0a68 	vmov.f32	s1, s17
 8007958:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800795c:	f001 fe58 	bl	8009610 <__ulp>
 8007960:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007964:	ec53 2b10 	vmov	r2, r3, d0
 8007968:	f7f8 fe6e 	bl	8000648 <__aeabi_dmul>
 800796c:	ec53 2b18 	vmov	r2, r3, d8
 8007970:	f7f8 fcb4 	bl	80002dc <__adddf3>
 8007974:	4682      	mov	sl, r0
 8007976:	468b      	mov	fp, r1
 8007978:	e78d      	b.n	8007896 <_strtod_l+0xab6>
 800797a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800797e:	e7db      	b.n	8007938 <_strtod_l+0xb58>
 8007980:	a311      	add	r3, pc, #68	; (adr r3, 80079c8 <_strtod_l+0xbe8>)
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f7f9 f8d1 	bl	8000b2c <__aeabi_dcmplt>
 800798a:	e7b2      	b.n	80078f2 <_strtod_l+0xb12>
 800798c:	2300      	movs	r3, #0
 800798e:	930a      	str	r3, [sp, #40]	; 0x28
 8007990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007992:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	f7ff ba6b 	b.w	8006e70 <_strtod_l+0x90>
 800799a:	2a65      	cmp	r2, #101	; 0x65
 800799c:	f43f ab5f 	beq.w	800705e <_strtod_l+0x27e>
 80079a0:	2a45      	cmp	r2, #69	; 0x45
 80079a2:	f43f ab5c 	beq.w	800705e <_strtod_l+0x27e>
 80079a6:	2301      	movs	r3, #1
 80079a8:	f7ff bb94 	b.w	80070d4 <_strtod_l+0x2f4>
 80079ac:	f3af 8000 	nop.w
 80079b0:	94a03595 	.word	0x94a03595
 80079b4:	3fdfffff 	.word	0x3fdfffff
 80079b8:	35afe535 	.word	0x35afe535
 80079bc:	3fe00000 	.word	0x3fe00000
 80079c0:	ffc00000 	.word	0xffc00000
 80079c4:	41dfffff 	.word	0x41dfffff
 80079c8:	94a03595 	.word	0x94a03595
 80079cc:	3fcfffff 	.word	0x3fcfffff
 80079d0:	3ff00000 	.word	0x3ff00000
 80079d4:	7ff00000 	.word	0x7ff00000
 80079d8:	7fe00000 	.word	0x7fe00000
 80079dc:	7c9fffff 	.word	0x7c9fffff
 80079e0:	3fe00000 	.word	0x3fe00000
 80079e4:	bff00000 	.word	0xbff00000
 80079e8:	7fefffff 	.word	0x7fefffff

080079ec <_strtod_r>:
 80079ec:	4b01      	ldr	r3, [pc, #4]	; (80079f4 <_strtod_r+0x8>)
 80079ee:	f7ff b9f7 	b.w	8006de0 <_strtod_l>
 80079f2:	bf00      	nop
 80079f4:	20000074 	.word	0x20000074

080079f8 <_strtol_l.constprop.0>:
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079fe:	d001      	beq.n	8007a04 <_strtol_l.constprop.0+0xc>
 8007a00:	2b24      	cmp	r3, #36	; 0x24
 8007a02:	d906      	bls.n	8007a12 <_strtol_l.constprop.0+0x1a>
 8007a04:	f7fe fafc 	bl	8006000 <__errno>
 8007a08:	2316      	movs	r3, #22
 8007a0a:	6003      	str	r3, [r0, #0]
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007af8 <_strtol_l.constprop.0+0x100>
 8007a16:	460d      	mov	r5, r1
 8007a18:	462e      	mov	r6, r5
 8007a1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a1e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007a22:	f017 0708 	ands.w	r7, r7, #8
 8007a26:	d1f7      	bne.n	8007a18 <_strtol_l.constprop.0+0x20>
 8007a28:	2c2d      	cmp	r4, #45	; 0x2d
 8007a2a:	d132      	bne.n	8007a92 <_strtol_l.constprop.0+0x9a>
 8007a2c:	782c      	ldrb	r4, [r5, #0]
 8007a2e:	2701      	movs	r7, #1
 8007a30:	1cb5      	adds	r5, r6, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d05b      	beq.n	8007aee <_strtol_l.constprop.0+0xf6>
 8007a36:	2b10      	cmp	r3, #16
 8007a38:	d109      	bne.n	8007a4e <_strtol_l.constprop.0+0x56>
 8007a3a:	2c30      	cmp	r4, #48	; 0x30
 8007a3c:	d107      	bne.n	8007a4e <_strtol_l.constprop.0+0x56>
 8007a3e:	782c      	ldrb	r4, [r5, #0]
 8007a40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007a44:	2c58      	cmp	r4, #88	; 0x58
 8007a46:	d14d      	bne.n	8007ae4 <_strtol_l.constprop.0+0xec>
 8007a48:	786c      	ldrb	r4, [r5, #1]
 8007a4a:	2310      	movs	r3, #16
 8007a4c:	3502      	adds	r5, #2
 8007a4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007a52:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a56:	f04f 0c00 	mov.w	ip, #0
 8007a5a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007a5e:	4666      	mov	r6, ip
 8007a60:	fb03 8a19 	mls	sl, r3, r9, r8
 8007a64:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007a68:	f1be 0f09 	cmp.w	lr, #9
 8007a6c:	d816      	bhi.n	8007a9c <_strtol_l.constprop.0+0xa4>
 8007a6e:	4674      	mov	r4, lr
 8007a70:	42a3      	cmp	r3, r4
 8007a72:	dd24      	ble.n	8007abe <_strtol_l.constprop.0+0xc6>
 8007a74:	f1bc 0f00 	cmp.w	ip, #0
 8007a78:	db1e      	blt.n	8007ab8 <_strtol_l.constprop.0+0xc0>
 8007a7a:	45b1      	cmp	r9, r6
 8007a7c:	d31c      	bcc.n	8007ab8 <_strtol_l.constprop.0+0xc0>
 8007a7e:	d101      	bne.n	8007a84 <_strtol_l.constprop.0+0x8c>
 8007a80:	45a2      	cmp	sl, r4
 8007a82:	db19      	blt.n	8007ab8 <_strtol_l.constprop.0+0xc0>
 8007a84:	fb06 4603 	mla	r6, r6, r3, r4
 8007a88:	f04f 0c01 	mov.w	ip, #1
 8007a8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a90:	e7e8      	b.n	8007a64 <_strtol_l.constprop.0+0x6c>
 8007a92:	2c2b      	cmp	r4, #43	; 0x2b
 8007a94:	bf04      	itt	eq
 8007a96:	782c      	ldrbeq	r4, [r5, #0]
 8007a98:	1cb5      	addeq	r5, r6, #2
 8007a9a:	e7ca      	b.n	8007a32 <_strtol_l.constprop.0+0x3a>
 8007a9c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007aa0:	f1be 0f19 	cmp.w	lr, #25
 8007aa4:	d801      	bhi.n	8007aaa <_strtol_l.constprop.0+0xb2>
 8007aa6:	3c37      	subs	r4, #55	; 0x37
 8007aa8:	e7e2      	b.n	8007a70 <_strtol_l.constprop.0+0x78>
 8007aaa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007aae:	f1be 0f19 	cmp.w	lr, #25
 8007ab2:	d804      	bhi.n	8007abe <_strtol_l.constprop.0+0xc6>
 8007ab4:	3c57      	subs	r4, #87	; 0x57
 8007ab6:	e7db      	b.n	8007a70 <_strtol_l.constprop.0+0x78>
 8007ab8:	f04f 3cff 	mov.w	ip, #4294967295
 8007abc:	e7e6      	b.n	8007a8c <_strtol_l.constprop.0+0x94>
 8007abe:	f1bc 0f00 	cmp.w	ip, #0
 8007ac2:	da05      	bge.n	8007ad0 <_strtol_l.constprop.0+0xd8>
 8007ac4:	2322      	movs	r3, #34	; 0x22
 8007ac6:	6003      	str	r3, [r0, #0]
 8007ac8:	4646      	mov	r6, r8
 8007aca:	b942      	cbnz	r2, 8007ade <_strtol_l.constprop.0+0xe6>
 8007acc:	4630      	mov	r0, r6
 8007ace:	e79e      	b.n	8007a0e <_strtol_l.constprop.0+0x16>
 8007ad0:	b107      	cbz	r7, 8007ad4 <_strtol_l.constprop.0+0xdc>
 8007ad2:	4276      	negs	r6, r6
 8007ad4:	2a00      	cmp	r2, #0
 8007ad6:	d0f9      	beq.n	8007acc <_strtol_l.constprop.0+0xd4>
 8007ad8:	f1bc 0f00 	cmp.w	ip, #0
 8007adc:	d000      	beq.n	8007ae0 <_strtol_l.constprop.0+0xe8>
 8007ade:	1e69      	subs	r1, r5, #1
 8007ae0:	6011      	str	r1, [r2, #0]
 8007ae2:	e7f3      	b.n	8007acc <_strtol_l.constprop.0+0xd4>
 8007ae4:	2430      	movs	r4, #48	; 0x30
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1b1      	bne.n	8007a4e <_strtol_l.constprop.0+0x56>
 8007aea:	2308      	movs	r3, #8
 8007aec:	e7af      	b.n	8007a4e <_strtol_l.constprop.0+0x56>
 8007aee:	2c30      	cmp	r4, #48	; 0x30
 8007af0:	d0a5      	beq.n	8007a3e <_strtol_l.constprop.0+0x46>
 8007af2:	230a      	movs	r3, #10
 8007af4:	e7ab      	b.n	8007a4e <_strtol_l.constprop.0+0x56>
 8007af6:	bf00      	nop
 8007af8:	0800ab79 	.word	0x0800ab79

08007afc <_strtol_r>:
 8007afc:	f7ff bf7c 	b.w	80079f8 <_strtol_l.constprop.0>

08007b00 <quorem>:
 8007b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	6903      	ldr	r3, [r0, #16]
 8007b06:	690c      	ldr	r4, [r1, #16]
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	f2c0 8081 	blt.w	8007c12 <quorem+0x112>
 8007b10:	3c01      	subs	r4, #1
 8007b12:	f101 0814 	add.w	r8, r1, #20
 8007b16:	f100 0514 	add.w	r5, r0, #20
 8007b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b34:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b38:	d331      	bcc.n	8007b9e <quorem+0x9e>
 8007b3a:	f04f 0e00 	mov.w	lr, #0
 8007b3e:	4640      	mov	r0, r8
 8007b40:	46ac      	mov	ip, r5
 8007b42:	46f2      	mov	sl, lr
 8007b44:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b48:	b293      	uxth	r3, r2
 8007b4a:	fb06 e303 	mla	r3, r6, r3, lr
 8007b4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	ebaa 0303 	sub.w	r3, sl, r3
 8007b58:	f8dc a000 	ldr.w	sl, [ip]
 8007b5c:	0c12      	lsrs	r2, r2, #16
 8007b5e:	fa13 f38a 	uxtah	r3, r3, sl
 8007b62:	fb06 e202 	mla	r2, r6, r2, lr
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	9b00      	ldr	r3, [sp, #0]
 8007b6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b6e:	b292      	uxth	r2, r2
 8007b70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b78:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b7c:	4581      	cmp	r9, r0
 8007b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b82:	f84c 3b04 	str.w	r3, [ip], #4
 8007b86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b8a:	d2db      	bcs.n	8007b44 <quorem+0x44>
 8007b8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b90:	b92b      	cbnz	r3, 8007b9e <quorem+0x9e>
 8007b92:	9b01      	ldr	r3, [sp, #4]
 8007b94:	3b04      	subs	r3, #4
 8007b96:	429d      	cmp	r5, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	d32e      	bcc.n	8007bfa <quorem+0xfa>
 8007b9c:	613c      	str	r4, [r7, #16]
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	f001 fc90 	bl	80094c4 <__mcmp>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	db24      	blt.n	8007bf2 <quorem+0xf2>
 8007ba8:	3601      	adds	r6, #1
 8007baa:	4628      	mov	r0, r5
 8007bac:	f04f 0c00 	mov.w	ip, #0
 8007bb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bb4:	f8d0 e000 	ldr.w	lr, [r0]
 8007bb8:	b293      	uxth	r3, r2
 8007bba:	ebac 0303 	sub.w	r3, ip, r3
 8007bbe:	0c12      	lsrs	r2, r2, #16
 8007bc0:	fa13 f38e 	uxtah	r3, r3, lr
 8007bc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007bc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bd2:	45c1      	cmp	r9, r8
 8007bd4:	f840 3b04 	str.w	r3, [r0], #4
 8007bd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007bdc:	d2e8      	bcs.n	8007bb0 <quorem+0xb0>
 8007bde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007be2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007be6:	b922      	cbnz	r2, 8007bf2 <quorem+0xf2>
 8007be8:	3b04      	subs	r3, #4
 8007bea:	429d      	cmp	r5, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	d30a      	bcc.n	8007c06 <quorem+0x106>
 8007bf0:	613c      	str	r4, [r7, #16]
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	b003      	add	sp, #12
 8007bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfa:	6812      	ldr	r2, [r2, #0]
 8007bfc:	3b04      	subs	r3, #4
 8007bfe:	2a00      	cmp	r2, #0
 8007c00:	d1cc      	bne.n	8007b9c <quorem+0x9c>
 8007c02:	3c01      	subs	r4, #1
 8007c04:	e7c7      	b.n	8007b96 <quorem+0x96>
 8007c06:	6812      	ldr	r2, [r2, #0]
 8007c08:	3b04      	subs	r3, #4
 8007c0a:	2a00      	cmp	r2, #0
 8007c0c:	d1f0      	bne.n	8007bf0 <quorem+0xf0>
 8007c0e:	3c01      	subs	r4, #1
 8007c10:	e7eb      	b.n	8007bea <quorem+0xea>
 8007c12:	2000      	movs	r0, #0
 8007c14:	e7ee      	b.n	8007bf4 <quorem+0xf4>
	...

08007c18 <_dtoa_r>:
 8007c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	ed2d 8b04 	vpush	{d8-d9}
 8007c20:	ec57 6b10 	vmov	r6, r7, d0
 8007c24:	b093      	sub	sp, #76	; 0x4c
 8007c26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007c2c:	9106      	str	r1, [sp, #24]
 8007c2e:	ee10 aa10 	vmov	sl, s0
 8007c32:	4604      	mov	r4, r0
 8007c34:	9209      	str	r2, [sp, #36]	; 0x24
 8007c36:	930c      	str	r3, [sp, #48]	; 0x30
 8007c38:	46bb      	mov	fp, r7
 8007c3a:	b975      	cbnz	r5, 8007c5a <_dtoa_r+0x42>
 8007c3c:	2010      	movs	r0, #16
 8007c3e:	f001 f94d 	bl	8008edc <malloc>
 8007c42:	4602      	mov	r2, r0
 8007c44:	6260      	str	r0, [r4, #36]	; 0x24
 8007c46:	b920      	cbnz	r0, 8007c52 <_dtoa_r+0x3a>
 8007c48:	4ba7      	ldr	r3, [pc, #668]	; (8007ee8 <_dtoa_r+0x2d0>)
 8007c4a:	21ea      	movs	r1, #234	; 0xea
 8007c4c:	48a7      	ldr	r0, [pc, #668]	; (8007eec <_dtoa_r+0x2d4>)
 8007c4e:	f002 f8bd 	bl	8009dcc <__assert_func>
 8007c52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c56:	6005      	str	r5, [r0, #0]
 8007c58:	60c5      	str	r5, [r0, #12]
 8007c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c5c:	6819      	ldr	r1, [r3, #0]
 8007c5e:	b151      	cbz	r1, 8007c76 <_dtoa_r+0x5e>
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	604a      	str	r2, [r1, #4]
 8007c64:	2301      	movs	r3, #1
 8007c66:	4093      	lsls	r3, r2
 8007c68:	608b      	str	r3, [r1, #8]
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f001 f99e 	bl	8008fac <_Bfree>
 8007c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	1e3b      	subs	r3, r7, #0
 8007c78:	bfaa      	itet	ge
 8007c7a:	2300      	movge	r3, #0
 8007c7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007c80:	f8c8 3000 	strge.w	r3, [r8]
 8007c84:	4b9a      	ldr	r3, [pc, #616]	; (8007ef0 <_dtoa_r+0x2d8>)
 8007c86:	bfbc      	itt	lt
 8007c88:	2201      	movlt	r2, #1
 8007c8a:	f8c8 2000 	strlt.w	r2, [r8]
 8007c8e:	ea33 030b 	bics.w	r3, r3, fp
 8007c92:	d11b      	bne.n	8007ccc <_dtoa_r+0xb4>
 8007c94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c96:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ca0:	4333      	orrs	r3, r6
 8007ca2:	f000 8592 	beq.w	80087ca <_dtoa_r+0xbb2>
 8007ca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ca8:	b963      	cbnz	r3, 8007cc4 <_dtoa_r+0xac>
 8007caa:	4b92      	ldr	r3, [pc, #584]	; (8007ef4 <_dtoa_r+0x2dc>)
 8007cac:	e022      	b.n	8007cf4 <_dtoa_r+0xdc>
 8007cae:	4b92      	ldr	r3, [pc, #584]	; (8007ef8 <_dtoa_r+0x2e0>)
 8007cb0:	9301      	str	r3, [sp, #4]
 8007cb2:	3308      	adds	r3, #8
 8007cb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	9801      	ldr	r0, [sp, #4]
 8007cba:	b013      	add	sp, #76	; 0x4c
 8007cbc:	ecbd 8b04 	vpop	{d8-d9}
 8007cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc4:	4b8b      	ldr	r3, [pc, #556]	; (8007ef4 <_dtoa_r+0x2dc>)
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	3303      	adds	r3, #3
 8007cca:	e7f3      	b.n	8007cb4 <_dtoa_r+0x9c>
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2300      	movs	r3, #0
 8007cd0:	4650      	mov	r0, sl
 8007cd2:	4659      	mov	r1, fp
 8007cd4:	f7f8 ff20 	bl	8000b18 <__aeabi_dcmpeq>
 8007cd8:	ec4b ab19 	vmov	d9, sl, fp
 8007cdc:	4680      	mov	r8, r0
 8007cde:	b158      	cbz	r0, 8007cf8 <_dtoa_r+0xe0>
 8007ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 856b 	beq.w	80087c4 <_dtoa_r+0xbac>
 8007cee:	4883      	ldr	r0, [pc, #524]	; (8007efc <_dtoa_r+0x2e4>)
 8007cf0:	6018      	str	r0, [r3, #0]
 8007cf2:	1e43      	subs	r3, r0, #1
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	e7df      	b.n	8007cb8 <_dtoa_r+0xa0>
 8007cf8:	ec4b ab10 	vmov	d0, sl, fp
 8007cfc:	aa10      	add	r2, sp, #64	; 0x40
 8007cfe:	a911      	add	r1, sp, #68	; 0x44
 8007d00:	4620      	mov	r0, r4
 8007d02:	f001 fd01 	bl	8009708 <__d2b>
 8007d06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007d0a:	ee08 0a10 	vmov	s16, r0
 8007d0e:	2d00      	cmp	r5, #0
 8007d10:	f000 8084 	beq.w	8007e1c <_dtoa_r+0x204>
 8007d14:	ee19 3a90 	vmov	r3, s19
 8007d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007d20:	4656      	mov	r6, sl
 8007d22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007d26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007d2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007d2e:	4b74      	ldr	r3, [pc, #464]	; (8007f00 <_dtoa_r+0x2e8>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	4630      	mov	r0, r6
 8007d34:	4639      	mov	r1, r7
 8007d36:	f7f8 facf 	bl	80002d8 <__aeabi_dsub>
 8007d3a:	a365      	add	r3, pc, #404	; (adr r3, 8007ed0 <_dtoa_r+0x2b8>)
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	f7f8 fc82 	bl	8000648 <__aeabi_dmul>
 8007d44:	a364      	add	r3, pc, #400	; (adr r3, 8007ed8 <_dtoa_r+0x2c0>)
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f7f8 fac7 	bl	80002dc <__adddf3>
 8007d4e:	4606      	mov	r6, r0
 8007d50:	4628      	mov	r0, r5
 8007d52:	460f      	mov	r7, r1
 8007d54:	f7f8 fc0e 	bl	8000574 <__aeabi_i2d>
 8007d58:	a361      	add	r3, pc, #388	; (adr r3, 8007ee0 <_dtoa_r+0x2c8>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f7f8 fc73 	bl	8000648 <__aeabi_dmul>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4630      	mov	r0, r6
 8007d68:	4639      	mov	r1, r7
 8007d6a:	f7f8 fab7 	bl	80002dc <__adddf3>
 8007d6e:	4606      	mov	r6, r0
 8007d70:	460f      	mov	r7, r1
 8007d72:	f7f8 ff19 	bl	8000ba8 <__aeabi_d2iz>
 8007d76:	2200      	movs	r2, #0
 8007d78:	9000      	str	r0, [sp, #0]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	4639      	mov	r1, r7
 8007d80:	f7f8 fed4 	bl	8000b2c <__aeabi_dcmplt>
 8007d84:	b150      	cbz	r0, 8007d9c <_dtoa_r+0x184>
 8007d86:	9800      	ldr	r0, [sp, #0]
 8007d88:	f7f8 fbf4 	bl	8000574 <__aeabi_i2d>
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	463b      	mov	r3, r7
 8007d90:	f7f8 fec2 	bl	8000b18 <__aeabi_dcmpeq>
 8007d94:	b910      	cbnz	r0, 8007d9c <_dtoa_r+0x184>
 8007d96:	9b00      	ldr	r3, [sp, #0]
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	9b00      	ldr	r3, [sp, #0]
 8007d9e:	2b16      	cmp	r3, #22
 8007da0:	d85a      	bhi.n	8007e58 <_dtoa_r+0x240>
 8007da2:	9a00      	ldr	r2, [sp, #0]
 8007da4:	4b57      	ldr	r3, [pc, #348]	; (8007f04 <_dtoa_r+0x2ec>)
 8007da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	ec51 0b19 	vmov	r0, r1, d9
 8007db2:	f7f8 febb 	bl	8000b2c <__aeabi_dcmplt>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d050      	beq.n	8007e5c <_dtoa_r+0x244>
 8007dba:	9b00      	ldr	r3, [sp, #0]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dc6:	1b5d      	subs	r5, r3, r5
 8007dc8:	1e6b      	subs	r3, r5, #1
 8007dca:	9305      	str	r3, [sp, #20]
 8007dcc:	bf45      	ittet	mi
 8007dce:	f1c5 0301 	rsbmi	r3, r5, #1
 8007dd2:	9304      	strmi	r3, [sp, #16]
 8007dd4:	2300      	movpl	r3, #0
 8007dd6:	2300      	movmi	r3, #0
 8007dd8:	bf4c      	ite	mi
 8007dda:	9305      	strmi	r3, [sp, #20]
 8007ddc:	9304      	strpl	r3, [sp, #16]
 8007dde:	9b00      	ldr	r3, [sp, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	db3d      	blt.n	8007e60 <_dtoa_r+0x248>
 8007de4:	9b05      	ldr	r3, [sp, #20]
 8007de6:	9a00      	ldr	r2, [sp, #0]
 8007de8:	920a      	str	r2, [sp, #40]	; 0x28
 8007dea:	4413      	add	r3, r2
 8007dec:	9305      	str	r3, [sp, #20]
 8007dee:	2300      	movs	r3, #0
 8007df0:	9307      	str	r3, [sp, #28]
 8007df2:	9b06      	ldr	r3, [sp, #24]
 8007df4:	2b09      	cmp	r3, #9
 8007df6:	f200 8089 	bhi.w	8007f0c <_dtoa_r+0x2f4>
 8007dfa:	2b05      	cmp	r3, #5
 8007dfc:	bfc4      	itt	gt
 8007dfe:	3b04      	subgt	r3, #4
 8007e00:	9306      	strgt	r3, [sp, #24]
 8007e02:	9b06      	ldr	r3, [sp, #24]
 8007e04:	f1a3 0302 	sub.w	r3, r3, #2
 8007e08:	bfcc      	ite	gt
 8007e0a:	2500      	movgt	r5, #0
 8007e0c:	2501      	movle	r5, #1
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	f200 8087 	bhi.w	8007f22 <_dtoa_r+0x30a>
 8007e14:	e8df f003 	tbb	[pc, r3]
 8007e18:	59383a2d 	.word	0x59383a2d
 8007e1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007e20:	441d      	add	r5, r3
 8007e22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	bfc1      	itttt	gt
 8007e2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007e32:	fa0b f303 	lslgt.w	r3, fp, r3
 8007e36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e3a:	bfda      	itte	le
 8007e3c:	f1c3 0320 	rsble	r3, r3, #32
 8007e40:	fa06 f003 	lslle.w	r0, r6, r3
 8007e44:	4318      	orrgt	r0, r3
 8007e46:	f7f8 fb85 	bl	8000554 <__aeabi_ui2d>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007e52:	3d01      	subs	r5, #1
 8007e54:	930e      	str	r3, [sp, #56]	; 0x38
 8007e56:	e76a      	b.n	8007d2e <_dtoa_r+0x116>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e7b2      	b.n	8007dc2 <_dtoa_r+0x1aa>
 8007e5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e5e:	e7b1      	b.n	8007dc4 <_dtoa_r+0x1ac>
 8007e60:	9b04      	ldr	r3, [sp, #16]
 8007e62:	9a00      	ldr	r2, [sp, #0]
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	4253      	negs	r3, r2
 8007e6a:	9307      	str	r3, [sp, #28]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e70:	e7bf      	b.n	8007df2 <_dtoa_r+0x1da>
 8007e72:	2300      	movs	r3, #0
 8007e74:	9308      	str	r3, [sp, #32]
 8007e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	dc55      	bgt.n	8007f28 <_dtoa_r+0x310>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e82:	461a      	mov	r2, r3
 8007e84:	9209      	str	r2, [sp, #36]	; 0x24
 8007e86:	e00c      	b.n	8007ea2 <_dtoa_r+0x28a>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e7f3      	b.n	8007e74 <_dtoa_r+0x25c>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e90:	9308      	str	r3, [sp, #32]
 8007e92:	9b00      	ldr	r3, [sp, #0]
 8007e94:	4413      	add	r3, r2
 8007e96:	9302      	str	r3, [sp, #8]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	9303      	str	r3, [sp, #12]
 8007e9e:	bfb8      	it	lt
 8007ea0:	2301      	movlt	r3, #1
 8007ea2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	6042      	str	r2, [r0, #4]
 8007ea8:	2204      	movs	r2, #4
 8007eaa:	f102 0614 	add.w	r6, r2, #20
 8007eae:	429e      	cmp	r6, r3
 8007eb0:	6841      	ldr	r1, [r0, #4]
 8007eb2:	d93d      	bls.n	8007f30 <_dtoa_r+0x318>
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f001 f839 	bl	8008f2c <_Balloc>
 8007eba:	9001      	str	r0, [sp, #4]
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d13b      	bne.n	8007f38 <_dtoa_r+0x320>
 8007ec0:	4b11      	ldr	r3, [pc, #68]	; (8007f08 <_dtoa_r+0x2f0>)
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ec8:	e6c0      	b.n	8007c4c <_dtoa_r+0x34>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e7df      	b.n	8007e8e <_dtoa_r+0x276>
 8007ece:	bf00      	nop
 8007ed0:	636f4361 	.word	0x636f4361
 8007ed4:	3fd287a7 	.word	0x3fd287a7
 8007ed8:	8b60c8b3 	.word	0x8b60c8b3
 8007edc:	3fc68a28 	.word	0x3fc68a28
 8007ee0:	509f79fb 	.word	0x509f79fb
 8007ee4:	3fd34413 	.word	0x3fd34413
 8007ee8:	0800ac86 	.word	0x0800ac86
 8007eec:	0800ac9d 	.word	0x0800ac9d
 8007ef0:	7ff00000 	.word	0x7ff00000
 8007ef4:	0800ac82 	.word	0x0800ac82
 8007ef8:	0800ac79 	.word	0x0800ac79
 8007efc:	0800aaf9 	.word	0x0800aaf9
 8007f00:	3ff80000 	.word	0x3ff80000
 8007f04:	0800ae08 	.word	0x0800ae08
 8007f08:	0800acf8 	.word	0x0800acf8
 8007f0c:	2501      	movs	r5, #1
 8007f0e:	2300      	movs	r3, #0
 8007f10:	9306      	str	r3, [sp, #24]
 8007f12:	9508      	str	r5, [sp, #32]
 8007f14:	f04f 33ff 	mov.w	r3, #4294967295
 8007f18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2312      	movs	r3, #18
 8007f20:	e7b0      	b.n	8007e84 <_dtoa_r+0x26c>
 8007f22:	2301      	movs	r3, #1
 8007f24:	9308      	str	r3, [sp, #32]
 8007f26:	e7f5      	b.n	8007f14 <_dtoa_r+0x2fc>
 8007f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f2e:	e7b8      	b.n	8007ea2 <_dtoa_r+0x28a>
 8007f30:	3101      	adds	r1, #1
 8007f32:	6041      	str	r1, [r0, #4]
 8007f34:	0052      	lsls	r2, r2, #1
 8007f36:	e7b8      	b.n	8007eaa <_dtoa_r+0x292>
 8007f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f3a:	9a01      	ldr	r2, [sp, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	9b03      	ldr	r3, [sp, #12]
 8007f40:	2b0e      	cmp	r3, #14
 8007f42:	f200 809d 	bhi.w	8008080 <_dtoa_r+0x468>
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	f000 809a 	beq.w	8008080 <_dtoa_r+0x468>
 8007f4c:	9b00      	ldr	r3, [sp, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	dd32      	ble.n	8007fb8 <_dtoa_r+0x3a0>
 8007f52:	4ab7      	ldr	r2, [pc, #732]	; (8008230 <_dtoa_r+0x618>)
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f60:	9b00      	ldr	r3, [sp, #0]
 8007f62:	05d8      	lsls	r0, r3, #23
 8007f64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007f68:	d516      	bpl.n	8007f98 <_dtoa_r+0x380>
 8007f6a:	4bb2      	ldr	r3, [pc, #712]	; (8008234 <_dtoa_r+0x61c>)
 8007f6c:	ec51 0b19 	vmov	r0, r1, d9
 8007f70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f74:	f7f8 fc92 	bl	800089c <__aeabi_ddiv>
 8007f78:	f007 070f 	and.w	r7, r7, #15
 8007f7c:	4682      	mov	sl, r0
 8007f7e:	468b      	mov	fp, r1
 8007f80:	2503      	movs	r5, #3
 8007f82:	4eac      	ldr	r6, [pc, #688]	; (8008234 <_dtoa_r+0x61c>)
 8007f84:	b957      	cbnz	r7, 8007f9c <_dtoa_r+0x384>
 8007f86:	4642      	mov	r2, r8
 8007f88:	464b      	mov	r3, r9
 8007f8a:	4650      	mov	r0, sl
 8007f8c:	4659      	mov	r1, fp
 8007f8e:	f7f8 fc85 	bl	800089c <__aeabi_ddiv>
 8007f92:	4682      	mov	sl, r0
 8007f94:	468b      	mov	fp, r1
 8007f96:	e028      	b.n	8007fea <_dtoa_r+0x3d2>
 8007f98:	2502      	movs	r5, #2
 8007f9a:	e7f2      	b.n	8007f82 <_dtoa_r+0x36a>
 8007f9c:	07f9      	lsls	r1, r7, #31
 8007f9e:	d508      	bpl.n	8007fb2 <_dtoa_r+0x39a>
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fa8:	f7f8 fb4e 	bl	8000648 <__aeabi_dmul>
 8007fac:	3501      	adds	r5, #1
 8007fae:	4680      	mov	r8, r0
 8007fb0:	4689      	mov	r9, r1
 8007fb2:	107f      	asrs	r7, r7, #1
 8007fb4:	3608      	adds	r6, #8
 8007fb6:	e7e5      	b.n	8007f84 <_dtoa_r+0x36c>
 8007fb8:	f000 809b 	beq.w	80080f2 <_dtoa_r+0x4da>
 8007fbc:	9b00      	ldr	r3, [sp, #0]
 8007fbe:	4f9d      	ldr	r7, [pc, #628]	; (8008234 <_dtoa_r+0x61c>)
 8007fc0:	425e      	negs	r6, r3
 8007fc2:	4b9b      	ldr	r3, [pc, #620]	; (8008230 <_dtoa_r+0x618>)
 8007fc4:	f006 020f 	and.w	r2, r6, #15
 8007fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	ec51 0b19 	vmov	r0, r1, d9
 8007fd4:	f7f8 fb38 	bl	8000648 <__aeabi_dmul>
 8007fd8:	1136      	asrs	r6, r6, #4
 8007fda:	4682      	mov	sl, r0
 8007fdc:	468b      	mov	fp, r1
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2502      	movs	r5, #2
 8007fe2:	2e00      	cmp	r6, #0
 8007fe4:	d17a      	bne.n	80080dc <_dtoa_r+0x4c4>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1d3      	bne.n	8007f92 <_dtoa_r+0x37a>
 8007fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 8082 	beq.w	80080f6 <_dtoa_r+0x4de>
 8007ff2:	4b91      	ldr	r3, [pc, #580]	; (8008238 <_dtoa_r+0x620>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	4650      	mov	r0, sl
 8007ff8:	4659      	mov	r1, fp
 8007ffa:	f7f8 fd97 	bl	8000b2c <__aeabi_dcmplt>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d079      	beq.n	80080f6 <_dtoa_r+0x4de>
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d076      	beq.n	80080f6 <_dtoa_r+0x4de>
 8008008:	9b02      	ldr	r3, [sp, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	dd36      	ble.n	800807c <_dtoa_r+0x464>
 800800e:	9b00      	ldr	r3, [sp, #0]
 8008010:	4650      	mov	r0, sl
 8008012:	4659      	mov	r1, fp
 8008014:	1e5f      	subs	r7, r3, #1
 8008016:	2200      	movs	r2, #0
 8008018:	4b88      	ldr	r3, [pc, #544]	; (800823c <_dtoa_r+0x624>)
 800801a:	f7f8 fb15 	bl	8000648 <__aeabi_dmul>
 800801e:	9e02      	ldr	r6, [sp, #8]
 8008020:	4682      	mov	sl, r0
 8008022:	468b      	mov	fp, r1
 8008024:	3501      	adds	r5, #1
 8008026:	4628      	mov	r0, r5
 8008028:	f7f8 faa4 	bl	8000574 <__aeabi_i2d>
 800802c:	4652      	mov	r2, sl
 800802e:	465b      	mov	r3, fp
 8008030:	f7f8 fb0a 	bl	8000648 <__aeabi_dmul>
 8008034:	4b82      	ldr	r3, [pc, #520]	; (8008240 <_dtoa_r+0x628>)
 8008036:	2200      	movs	r2, #0
 8008038:	f7f8 f950 	bl	80002dc <__adddf3>
 800803c:	46d0      	mov	r8, sl
 800803e:	46d9      	mov	r9, fp
 8008040:	4682      	mov	sl, r0
 8008042:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008046:	2e00      	cmp	r6, #0
 8008048:	d158      	bne.n	80080fc <_dtoa_r+0x4e4>
 800804a:	4b7e      	ldr	r3, [pc, #504]	; (8008244 <_dtoa_r+0x62c>)
 800804c:	2200      	movs	r2, #0
 800804e:	4640      	mov	r0, r8
 8008050:	4649      	mov	r1, r9
 8008052:	f7f8 f941 	bl	80002d8 <__aeabi_dsub>
 8008056:	4652      	mov	r2, sl
 8008058:	465b      	mov	r3, fp
 800805a:	4680      	mov	r8, r0
 800805c:	4689      	mov	r9, r1
 800805e:	f7f8 fd83 	bl	8000b68 <__aeabi_dcmpgt>
 8008062:	2800      	cmp	r0, #0
 8008064:	f040 8295 	bne.w	8008592 <_dtoa_r+0x97a>
 8008068:	4652      	mov	r2, sl
 800806a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800806e:	4640      	mov	r0, r8
 8008070:	4649      	mov	r1, r9
 8008072:	f7f8 fd5b 	bl	8000b2c <__aeabi_dcmplt>
 8008076:	2800      	cmp	r0, #0
 8008078:	f040 8289 	bne.w	800858e <_dtoa_r+0x976>
 800807c:	ec5b ab19 	vmov	sl, fp, d9
 8008080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008082:	2b00      	cmp	r3, #0
 8008084:	f2c0 8148 	blt.w	8008318 <_dtoa_r+0x700>
 8008088:	9a00      	ldr	r2, [sp, #0]
 800808a:	2a0e      	cmp	r2, #14
 800808c:	f300 8144 	bgt.w	8008318 <_dtoa_r+0x700>
 8008090:	4b67      	ldr	r3, [pc, #412]	; (8008230 <_dtoa_r+0x618>)
 8008092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008096:	e9d3 8900 	ldrd	r8, r9, [r3]
 800809a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809c:	2b00      	cmp	r3, #0
 800809e:	f280 80d5 	bge.w	800824c <_dtoa_r+0x634>
 80080a2:	9b03      	ldr	r3, [sp, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f300 80d1 	bgt.w	800824c <_dtoa_r+0x634>
 80080aa:	f040 826f 	bne.w	800858c <_dtoa_r+0x974>
 80080ae:	4b65      	ldr	r3, [pc, #404]	; (8008244 <_dtoa_r+0x62c>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	4640      	mov	r0, r8
 80080b4:	4649      	mov	r1, r9
 80080b6:	f7f8 fac7 	bl	8000648 <__aeabi_dmul>
 80080ba:	4652      	mov	r2, sl
 80080bc:	465b      	mov	r3, fp
 80080be:	f7f8 fd49 	bl	8000b54 <__aeabi_dcmpge>
 80080c2:	9e03      	ldr	r6, [sp, #12]
 80080c4:	4637      	mov	r7, r6
 80080c6:	2800      	cmp	r0, #0
 80080c8:	f040 8245 	bne.w	8008556 <_dtoa_r+0x93e>
 80080cc:	9d01      	ldr	r5, [sp, #4]
 80080ce:	2331      	movs	r3, #49	; 0x31
 80080d0:	f805 3b01 	strb.w	r3, [r5], #1
 80080d4:	9b00      	ldr	r3, [sp, #0]
 80080d6:	3301      	adds	r3, #1
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	e240      	b.n	800855e <_dtoa_r+0x946>
 80080dc:	07f2      	lsls	r2, r6, #31
 80080de:	d505      	bpl.n	80080ec <_dtoa_r+0x4d4>
 80080e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080e4:	f7f8 fab0 	bl	8000648 <__aeabi_dmul>
 80080e8:	3501      	adds	r5, #1
 80080ea:	2301      	movs	r3, #1
 80080ec:	1076      	asrs	r6, r6, #1
 80080ee:	3708      	adds	r7, #8
 80080f0:	e777      	b.n	8007fe2 <_dtoa_r+0x3ca>
 80080f2:	2502      	movs	r5, #2
 80080f4:	e779      	b.n	8007fea <_dtoa_r+0x3d2>
 80080f6:	9f00      	ldr	r7, [sp, #0]
 80080f8:	9e03      	ldr	r6, [sp, #12]
 80080fa:	e794      	b.n	8008026 <_dtoa_r+0x40e>
 80080fc:	9901      	ldr	r1, [sp, #4]
 80080fe:	4b4c      	ldr	r3, [pc, #304]	; (8008230 <_dtoa_r+0x618>)
 8008100:	4431      	add	r1, r6
 8008102:	910d      	str	r1, [sp, #52]	; 0x34
 8008104:	9908      	ldr	r1, [sp, #32]
 8008106:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800810a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800810e:	2900      	cmp	r1, #0
 8008110:	d043      	beq.n	800819a <_dtoa_r+0x582>
 8008112:	494d      	ldr	r1, [pc, #308]	; (8008248 <_dtoa_r+0x630>)
 8008114:	2000      	movs	r0, #0
 8008116:	f7f8 fbc1 	bl	800089c <__aeabi_ddiv>
 800811a:	4652      	mov	r2, sl
 800811c:	465b      	mov	r3, fp
 800811e:	f7f8 f8db 	bl	80002d8 <__aeabi_dsub>
 8008122:	9d01      	ldr	r5, [sp, #4]
 8008124:	4682      	mov	sl, r0
 8008126:	468b      	mov	fp, r1
 8008128:	4649      	mov	r1, r9
 800812a:	4640      	mov	r0, r8
 800812c:	f7f8 fd3c 	bl	8000ba8 <__aeabi_d2iz>
 8008130:	4606      	mov	r6, r0
 8008132:	f7f8 fa1f 	bl	8000574 <__aeabi_i2d>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	4640      	mov	r0, r8
 800813c:	4649      	mov	r1, r9
 800813e:	f7f8 f8cb 	bl	80002d8 <__aeabi_dsub>
 8008142:	3630      	adds	r6, #48	; 0x30
 8008144:	f805 6b01 	strb.w	r6, [r5], #1
 8008148:	4652      	mov	r2, sl
 800814a:	465b      	mov	r3, fp
 800814c:	4680      	mov	r8, r0
 800814e:	4689      	mov	r9, r1
 8008150:	f7f8 fcec 	bl	8000b2c <__aeabi_dcmplt>
 8008154:	2800      	cmp	r0, #0
 8008156:	d163      	bne.n	8008220 <_dtoa_r+0x608>
 8008158:	4642      	mov	r2, r8
 800815a:	464b      	mov	r3, r9
 800815c:	4936      	ldr	r1, [pc, #216]	; (8008238 <_dtoa_r+0x620>)
 800815e:	2000      	movs	r0, #0
 8008160:	f7f8 f8ba 	bl	80002d8 <__aeabi_dsub>
 8008164:	4652      	mov	r2, sl
 8008166:	465b      	mov	r3, fp
 8008168:	f7f8 fce0 	bl	8000b2c <__aeabi_dcmplt>
 800816c:	2800      	cmp	r0, #0
 800816e:	f040 80b5 	bne.w	80082dc <_dtoa_r+0x6c4>
 8008172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008174:	429d      	cmp	r5, r3
 8008176:	d081      	beq.n	800807c <_dtoa_r+0x464>
 8008178:	4b30      	ldr	r3, [pc, #192]	; (800823c <_dtoa_r+0x624>)
 800817a:	2200      	movs	r2, #0
 800817c:	4650      	mov	r0, sl
 800817e:	4659      	mov	r1, fp
 8008180:	f7f8 fa62 	bl	8000648 <__aeabi_dmul>
 8008184:	4b2d      	ldr	r3, [pc, #180]	; (800823c <_dtoa_r+0x624>)
 8008186:	4682      	mov	sl, r0
 8008188:	468b      	mov	fp, r1
 800818a:	4640      	mov	r0, r8
 800818c:	4649      	mov	r1, r9
 800818e:	2200      	movs	r2, #0
 8008190:	f7f8 fa5a 	bl	8000648 <__aeabi_dmul>
 8008194:	4680      	mov	r8, r0
 8008196:	4689      	mov	r9, r1
 8008198:	e7c6      	b.n	8008128 <_dtoa_r+0x510>
 800819a:	4650      	mov	r0, sl
 800819c:	4659      	mov	r1, fp
 800819e:	f7f8 fa53 	bl	8000648 <__aeabi_dmul>
 80081a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081a4:	9d01      	ldr	r5, [sp, #4]
 80081a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081a8:	4682      	mov	sl, r0
 80081aa:	468b      	mov	fp, r1
 80081ac:	4649      	mov	r1, r9
 80081ae:	4640      	mov	r0, r8
 80081b0:	f7f8 fcfa 	bl	8000ba8 <__aeabi_d2iz>
 80081b4:	4606      	mov	r6, r0
 80081b6:	f7f8 f9dd 	bl	8000574 <__aeabi_i2d>
 80081ba:	3630      	adds	r6, #48	; 0x30
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4640      	mov	r0, r8
 80081c2:	4649      	mov	r1, r9
 80081c4:	f7f8 f888 	bl	80002d8 <__aeabi_dsub>
 80081c8:	f805 6b01 	strb.w	r6, [r5], #1
 80081cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081ce:	429d      	cmp	r5, r3
 80081d0:	4680      	mov	r8, r0
 80081d2:	4689      	mov	r9, r1
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	d124      	bne.n	8008224 <_dtoa_r+0x60c>
 80081da:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <_dtoa_r+0x630>)
 80081dc:	4650      	mov	r0, sl
 80081de:	4659      	mov	r1, fp
 80081e0:	f7f8 f87c 	bl	80002dc <__adddf3>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4640      	mov	r0, r8
 80081ea:	4649      	mov	r1, r9
 80081ec:	f7f8 fcbc 	bl	8000b68 <__aeabi_dcmpgt>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d173      	bne.n	80082dc <_dtoa_r+0x6c4>
 80081f4:	4652      	mov	r2, sl
 80081f6:	465b      	mov	r3, fp
 80081f8:	4913      	ldr	r1, [pc, #76]	; (8008248 <_dtoa_r+0x630>)
 80081fa:	2000      	movs	r0, #0
 80081fc:	f7f8 f86c 	bl	80002d8 <__aeabi_dsub>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4640      	mov	r0, r8
 8008206:	4649      	mov	r1, r9
 8008208:	f7f8 fc90 	bl	8000b2c <__aeabi_dcmplt>
 800820c:	2800      	cmp	r0, #0
 800820e:	f43f af35 	beq.w	800807c <_dtoa_r+0x464>
 8008212:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008214:	1e6b      	subs	r3, r5, #1
 8008216:	930f      	str	r3, [sp, #60]	; 0x3c
 8008218:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800821c:	2b30      	cmp	r3, #48	; 0x30
 800821e:	d0f8      	beq.n	8008212 <_dtoa_r+0x5fa>
 8008220:	9700      	str	r7, [sp, #0]
 8008222:	e049      	b.n	80082b8 <_dtoa_r+0x6a0>
 8008224:	4b05      	ldr	r3, [pc, #20]	; (800823c <_dtoa_r+0x624>)
 8008226:	f7f8 fa0f 	bl	8000648 <__aeabi_dmul>
 800822a:	4680      	mov	r8, r0
 800822c:	4689      	mov	r9, r1
 800822e:	e7bd      	b.n	80081ac <_dtoa_r+0x594>
 8008230:	0800ae08 	.word	0x0800ae08
 8008234:	0800ade0 	.word	0x0800ade0
 8008238:	3ff00000 	.word	0x3ff00000
 800823c:	40240000 	.word	0x40240000
 8008240:	401c0000 	.word	0x401c0000
 8008244:	40140000 	.word	0x40140000
 8008248:	3fe00000 	.word	0x3fe00000
 800824c:	9d01      	ldr	r5, [sp, #4]
 800824e:	4656      	mov	r6, sl
 8008250:	465f      	mov	r7, fp
 8008252:	4642      	mov	r2, r8
 8008254:	464b      	mov	r3, r9
 8008256:	4630      	mov	r0, r6
 8008258:	4639      	mov	r1, r7
 800825a:	f7f8 fb1f 	bl	800089c <__aeabi_ddiv>
 800825e:	f7f8 fca3 	bl	8000ba8 <__aeabi_d2iz>
 8008262:	4682      	mov	sl, r0
 8008264:	f7f8 f986 	bl	8000574 <__aeabi_i2d>
 8008268:	4642      	mov	r2, r8
 800826a:	464b      	mov	r3, r9
 800826c:	f7f8 f9ec 	bl	8000648 <__aeabi_dmul>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	4630      	mov	r0, r6
 8008276:	4639      	mov	r1, r7
 8008278:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800827c:	f7f8 f82c 	bl	80002d8 <__aeabi_dsub>
 8008280:	f805 6b01 	strb.w	r6, [r5], #1
 8008284:	9e01      	ldr	r6, [sp, #4]
 8008286:	9f03      	ldr	r7, [sp, #12]
 8008288:	1bae      	subs	r6, r5, r6
 800828a:	42b7      	cmp	r7, r6
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	d135      	bne.n	80082fe <_dtoa_r+0x6e6>
 8008292:	f7f8 f823 	bl	80002dc <__adddf3>
 8008296:	4642      	mov	r2, r8
 8008298:	464b      	mov	r3, r9
 800829a:	4606      	mov	r6, r0
 800829c:	460f      	mov	r7, r1
 800829e:	f7f8 fc63 	bl	8000b68 <__aeabi_dcmpgt>
 80082a2:	b9d0      	cbnz	r0, 80082da <_dtoa_r+0x6c2>
 80082a4:	4642      	mov	r2, r8
 80082a6:	464b      	mov	r3, r9
 80082a8:	4630      	mov	r0, r6
 80082aa:	4639      	mov	r1, r7
 80082ac:	f7f8 fc34 	bl	8000b18 <__aeabi_dcmpeq>
 80082b0:	b110      	cbz	r0, 80082b8 <_dtoa_r+0x6a0>
 80082b2:	f01a 0f01 	tst.w	sl, #1
 80082b6:	d110      	bne.n	80082da <_dtoa_r+0x6c2>
 80082b8:	4620      	mov	r0, r4
 80082ba:	ee18 1a10 	vmov	r1, s16
 80082be:	f000 fe75 	bl	8008fac <_Bfree>
 80082c2:	2300      	movs	r3, #0
 80082c4:	9800      	ldr	r0, [sp, #0]
 80082c6:	702b      	strb	r3, [r5, #0]
 80082c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082ca:	3001      	adds	r0, #1
 80082cc:	6018      	str	r0, [r3, #0]
 80082ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f43f acf1 	beq.w	8007cb8 <_dtoa_r+0xa0>
 80082d6:	601d      	str	r5, [r3, #0]
 80082d8:	e4ee      	b.n	8007cb8 <_dtoa_r+0xa0>
 80082da:	9f00      	ldr	r7, [sp, #0]
 80082dc:	462b      	mov	r3, r5
 80082de:	461d      	mov	r5, r3
 80082e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082e4:	2a39      	cmp	r2, #57	; 0x39
 80082e6:	d106      	bne.n	80082f6 <_dtoa_r+0x6de>
 80082e8:	9a01      	ldr	r2, [sp, #4]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d1f7      	bne.n	80082de <_dtoa_r+0x6c6>
 80082ee:	9901      	ldr	r1, [sp, #4]
 80082f0:	2230      	movs	r2, #48	; 0x30
 80082f2:	3701      	adds	r7, #1
 80082f4:	700a      	strb	r2, [r1, #0]
 80082f6:	781a      	ldrb	r2, [r3, #0]
 80082f8:	3201      	adds	r2, #1
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	e790      	b.n	8008220 <_dtoa_r+0x608>
 80082fe:	4ba6      	ldr	r3, [pc, #664]	; (8008598 <_dtoa_r+0x980>)
 8008300:	2200      	movs	r2, #0
 8008302:	f7f8 f9a1 	bl	8000648 <__aeabi_dmul>
 8008306:	2200      	movs	r2, #0
 8008308:	2300      	movs	r3, #0
 800830a:	4606      	mov	r6, r0
 800830c:	460f      	mov	r7, r1
 800830e:	f7f8 fc03 	bl	8000b18 <__aeabi_dcmpeq>
 8008312:	2800      	cmp	r0, #0
 8008314:	d09d      	beq.n	8008252 <_dtoa_r+0x63a>
 8008316:	e7cf      	b.n	80082b8 <_dtoa_r+0x6a0>
 8008318:	9a08      	ldr	r2, [sp, #32]
 800831a:	2a00      	cmp	r2, #0
 800831c:	f000 80d7 	beq.w	80084ce <_dtoa_r+0x8b6>
 8008320:	9a06      	ldr	r2, [sp, #24]
 8008322:	2a01      	cmp	r2, #1
 8008324:	f300 80ba 	bgt.w	800849c <_dtoa_r+0x884>
 8008328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800832a:	2a00      	cmp	r2, #0
 800832c:	f000 80b2 	beq.w	8008494 <_dtoa_r+0x87c>
 8008330:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008334:	9e07      	ldr	r6, [sp, #28]
 8008336:	9d04      	ldr	r5, [sp, #16]
 8008338:	9a04      	ldr	r2, [sp, #16]
 800833a:	441a      	add	r2, r3
 800833c:	9204      	str	r2, [sp, #16]
 800833e:	9a05      	ldr	r2, [sp, #20]
 8008340:	2101      	movs	r1, #1
 8008342:	441a      	add	r2, r3
 8008344:	4620      	mov	r0, r4
 8008346:	9205      	str	r2, [sp, #20]
 8008348:	f000 ff32 	bl	80091b0 <__i2b>
 800834c:	4607      	mov	r7, r0
 800834e:	2d00      	cmp	r5, #0
 8008350:	dd0c      	ble.n	800836c <_dtoa_r+0x754>
 8008352:	9b05      	ldr	r3, [sp, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	dd09      	ble.n	800836c <_dtoa_r+0x754>
 8008358:	42ab      	cmp	r3, r5
 800835a:	9a04      	ldr	r2, [sp, #16]
 800835c:	bfa8      	it	ge
 800835e:	462b      	movge	r3, r5
 8008360:	1ad2      	subs	r2, r2, r3
 8008362:	9204      	str	r2, [sp, #16]
 8008364:	9a05      	ldr	r2, [sp, #20]
 8008366:	1aed      	subs	r5, r5, r3
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	9305      	str	r3, [sp, #20]
 800836c:	9b07      	ldr	r3, [sp, #28]
 800836e:	b31b      	cbz	r3, 80083b8 <_dtoa_r+0x7a0>
 8008370:	9b08      	ldr	r3, [sp, #32]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 80af 	beq.w	80084d6 <_dtoa_r+0x8be>
 8008378:	2e00      	cmp	r6, #0
 800837a:	dd13      	ble.n	80083a4 <_dtoa_r+0x78c>
 800837c:	4639      	mov	r1, r7
 800837e:	4632      	mov	r2, r6
 8008380:	4620      	mov	r0, r4
 8008382:	f000 ffd5 	bl	8009330 <__pow5mult>
 8008386:	ee18 2a10 	vmov	r2, s16
 800838a:	4601      	mov	r1, r0
 800838c:	4607      	mov	r7, r0
 800838e:	4620      	mov	r0, r4
 8008390:	f000 ff24 	bl	80091dc <__multiply>
 8008394:	ee18 1a10 	vmov	r1, s16
 8008398:	4680      	mov	r8, r0
 800839a:	4620      	mov	r0, r4
 800839c:	f000 fe06 	bl	8008fac <_Bfree>
 80083a0:	ee08 8a10 	vmov	s16, r8
 80083a4:	9b07      	ldr	r3, [sp, #28]
 80083a6:	1b9a      	subs	r2, r3, r6
 80083a8:	d006      	beq.n	80083b8 <_dtoa_r+0x7a0>
 80083aa:	ee18 1a10 	vmov	r1, s16
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 ffbe 	bl	8009330 <__pow5mult>
 80083b4:	ee08 0a10 	vmov	s16, r0
 80083b8:	2101      	movs	r1, #1
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 fef8 	bl	80091b0 <__i2b>
 80083c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	4606      	mov	r6, r0
 80083c6:	f340 8088 	ble.w	80084da <_dtoa_r+0x8c2>
 80083ca:	461a      	mov	r2, r3
 80083cc:	4601      	mov	r1, r0
 80083ce:	4620      	mov	r0, r4
 80083d0:	f000 ffae 	bl	8009330 <__pow5mult>
 80083d4:	9b06      	ldr	r3, [sp, #24]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	4606      	mov	r6, r0
 80083da:	f340 8081 	ble.w	80084e0 <_dtoa_r+0x8c8>
 80083de:	f04f 0800 	mov.w	r8, #0
 80083e2:	6933      	ldr	r3, [r6, #16]
 80083e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80083e8:	6918      	ldr	r0, [r3, #16]
 80083ea:	f000 fe91 	bl	8009110 <__hi0bits>
 80083ee:	f1c0 0020 	rsb	r0, r0, #32
 80083f2:	9b05      	ldr	r3, [sp, #20]
 80083f4:	4418      	add	r0, r3
 80083f6:	f010 001f 	ands.w	r0, r0, #31
 80083fa:	f000 8092 	beq.w	8008522 <_dtoa_r+0x90a>
 80083fe:	f1c0 0320 	rsb	r3, r0, #32
 8008402:	2b04      	cmp	r3, #4
 8008404:	f340 808a 	ble.w	800851c <_dtoa_r+0x904>
 8008408:	f1c0 001c 	rsb	r0, r0, #28
 800840c:	9b04      	ldr	r3, [sp, #16]
 800840e:	4403      	add	r3, r0
 8008410:	9304      	str	r3, [sp, #16]
 8008412:	9b05      	ldr	r3, [sp, #20]
 8008414:	4403      	add	r3, r0
 8008416:	4405      	add	r5, r0
 8008418:	9305      	str	r3, [sp, #20]
 800841a:	9b04      	ldr	r3, [sp, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	dd07      	ble.n	8008430 <_dtoa_r+0x818>
 8008420:	ee18 1a10 	vmov	r1, s16
 8008424:	461a      	mov	r2, r3
 8008426:	4620      	mov	r0, r4
 8008428:	f000 ffdc 	bl	80093e4 <__lshift>
 800842c:	ee08 0a10 	vmov	s16, r0
 8008430:	9b05      	ldr	r3, [sp, #20]
 8008432:	2b00      	cmp	r3, #0
 8008434:	dd05      	ble.n	8008442 <_dtoa_r+0x82a>
 8008436:	4631      	mov	r1, r6
 8008438:	461a      	mov	r2, r3
 800843a:	4620      	mov	r0, r4
 800843c:	f000 ffd2 	bl	80093e4 <__lshift>
 8008440:	4606      	mov	r6, r0
 8008442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d06e      	beq.n	8008526 <_dtoa_r+0x90e>
 8008448:	ee18 0a10 	vmov	r0, s16
 800844c:	4631      	mov	r1, r6
 800844e:	f001 f839 	bl	80094c4 <__mcmp>
 8008452:	2800      	cmp	r0, #0
 8008454:	da67      	bge.n	8008526 <_dtoa_r+0x90e>
 8008456:	9b00      	ldr	r3, [sp, #0]
 8008458:	3b01      	subs	r3, #1
 800845a:	ee18 1a10 	vmov	r1, s16
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	220a      	movs	r2, #10
 8008462:	2300      	movs	r3, #0
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fdc3 	bl	8008ff0 <__multadd>
 800846a:	9b08      	ldr	r3, [sp, #32]
 800846c:	ee08 0a10 	vmov	s16, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 81b1 	beq.w	80087d8 <_dtoa_r+0xbc0>
 8008476:	2300      	movs	r3, #0
 8008478:	4639      	mov	r1, r7
 800847a:	220a      	movs	r2, #10
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fdb7 	bl	8008ff0 <__multadd>
 8008482:	9b02      	ldr	r3, [sp, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	4607      	mov	r7, r0
 8008488:	f300 808e 	bgt.w	80085a8 <_dtoa_r+0x990>
 800848c:	9b06      	ldr	r3, [sp, #24]
 800848e:	2b02      	cmp	r3, #2
 8008490:	dc51      	bgt.n	8008536 <_dtoa_r+0x91e>
 8008492:	e089      	b.n	80085a8 <_dtoa_r+0x990>
 8008494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008496:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800849a:	e74b      	b.n	8008334 <_dtoa_r+0x71c>
 800849c:	9b03      	ldr	r3, [sp, #12]
 800849e:	1e5e      	subs	r6, r3, #1
 80084a0:	9b07      	ldr	r3, [sp, #28]
 80084a2:	42b3      	cmp	r3, r6
 80084a4:	bfbf      	itttt	lt
 80084a6:	9b07      	ldrlt	r3, [sp, #28]
 80084a8:	9607      	strlt	r6, [sp, #28]
 80084aa:	1af2      	sublt	r2, r6, r3
 80084ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80084ae:	bfb6      	itet	lt
 80084b0:	189b      	addlt	r3, r3, r2
 80084b2:	1b9e      	subge	r6, r3, r6
 80084b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	bfb8      	it	lt
 80084ba:	2600      	movlt	r6, #0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	bfb7      	itett	lt
 80084c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80084c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80084c8:	1a9d      	sublt	r5, r3, r2
 80084ca:	2300      	movlt	r3, #0
 80084cc:	e734      	b.n	8008338 <_dtoa_r+0x720>
 80084ce:	9e07      	ldr	r6, [sp, #28]
 80084d0:	9d04      	ldr	r5, [sp, #16]
 80084d2:	9f08      	ldr	r7, [sp, #32]
 80084d4:	e73b      	b.n	800834e <_dtoa_r+0x736>
 80084d6:	9a07      	ldr	r2, [sp, #28]
 80084d8:	e767      	b.n	80083aa <_dtoa_r+0x792>
 80084da:	9b06      	ldr	r3, [sp, #24]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	dc18      	bgt.n	8008512 <_dtoa_r+0x8fa>
 80084e0:	f1ba 0f00 	cmp.w	sl, #0
 80084e4:	d115      	bne.n	8008512 <_dtoa_r+0x8fa>
 80084e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084ea:	b993      	cbnz	r3, 8008512 <_dtoa_r+0x8fa>
 80084ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084f0:	0d1b      	lsrs	r3, r3, #20
 80084f2:	051b      	lsls	r3, r3, #20
 80084f4:	b183      	cbz	r3, 8008518 <_dtoa_r+0x900>
 80084f6:	9b04      	ldr	r3, [sp, #16]
 80084f8:	3301      	adds	r3, #1
 80084fa:	9304      	str	r3, [sp, #16]
 80084fc:	9b05      	ldr	r3, [sp, #20]
 80084fe:	3301      	adds	r3, #1
 8008500:	9305      	str	r3, [sp, #20]
 8008502:	f04f 0801 	mov.w	r8, #1
 8008506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008508:	2b00      	cmp	r3, #0
 800850a:	f47f af6a 	bne.w	80083e2 <_dtoa_r+0x7ca>
 800850e:	2001      	movs	r0, #1
 8008510:	e76f      	b.n	80083f2 <_dtoa_r+0x7da>
 8008512:	f04f 0800 	mov.w	r8, #0
 8008516:	e7f6      	b.n	8008506 <_dtoa_r+0x8ee>
 8008518:	4698      	mov	r8, r3
 800851a:	e7f4      	b.n	8008506 <_dtoa_r+0x8ee>
 800851c:	f43f af7d 	beq.w	800841a <_dtoa_r+0x802>
 8008520:	4618      	mov	r0, r3
 8008522:	301c      	adds	r0, #28
 8008524:	e772      	b.n	800840c <_dtoa_r+0x7f4>
 8008526:	9b03      	ldr	r3, [sp, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	dc37      	bgt.n	800859c <_dtoa_r+0x984>
 800852c:	9b06      	ldr	r3, [sp, #24]
 800852e:	2b02      	cmp	r3, #2
 8008530:	dd34      	ble.n	800859c <_dtoa_r+0x984>
 8008532:	9b03      	ldr	r3, [sp, #12]
 8008534:	9302      	str	r3, [sp, #8]
 8008536:	9b02      	ldr	r3, [sp, #8]
 8008538:	b96b      	cbnz	r3, 8008556 <_dtoa_r+0x93e>
 800853a:	4631      	mov	r1, r6
 800853c:	2205      	movs	r2, #5
 800853e:	4620      	mov	r0, r4
 8008540:	f000 fd56 	bl	8008ff0 <__multadd>
 8008544:	4601      	mov	r1, r0
 8008546:	4606      	mov	r6, r0
 8008548:	ee18 0a10 	vmov	r0, s16
 800854c:	f000 ffba 	bl	80094c4 <__mcmp>
 8008550:	2800      	cmp	r0, #0
 8008552:	f73f adbb 	bgt.w	80080cc <_dtoa_r+0x4b4>
 8008556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008558:	9d01      	ldr	r5, [sp, #4]
 800855a:	43db      	mvns	r3, r3
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	f04f 0800 	mov.w	r8, #0
 8008562:	4631      	mov	r1, r6
 8008564:	4620      	mov	r0, r4
 8008566:	f000 fd21 	bl	8008fac <_Bfree>
 800856a:	2f00      	cmp	r7, #0
 800856c:	f43f aea4 	beq.w	80082b8 <_dtoa_r+0x6a0>
 8008570:	f1b8 0f00 	cmp.w	r8, #0
 8008574:	d005      	beq.n	8008582 <_dtoa_r+0x96a>
 8008576:	45b8      	cmp	r8, r7
 8008578:	d003      	beq.n	8008582 <_dtoa_r+0x96a>
 800857a:	4641      	mov	r1, r8
 800857c:	4620      	mov	r0, r4
 800857e:	f000 fd15 	bl	8008fac <_Bfree>
 8008582:	4639      	mov	r1, r7
 8008584:	4620      	mov	r0, r4
 8008586:	f000 fd11 	bl	8008fac <_Bfree>
 800858a:	e695      	b.n	80082b8 <_dtoa_r+0x6a0>
 800858c:	2600      	movs	r6, #0
 800858e:	4637      	mov	r7, r6
 8008590:	e7e1      	b.n	8008556 <_dtoa_r+0x93e>
 8008592:	9700      	str	r7, [sp, #0]
 8008594:	4637      	mov	r7, r6
 8008596:	e599      	b.n	80080cc <_dtoa_r+0x4b4>
 8008598:	40240000 	.word	0x40240000
 800859c:	9b08      	ldr	r3, [sp, #32]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 80ca 	beq.w	8008738 <_dtoa_r+0xb20>
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	9302      	str	r3, [sp, #8]
 80085a8:	2d00      	cmp	r5, #0
 80085aa:	dd05      	ble.n	80085b8 <_dtoa_r+0x9a0>
 80085ac:	4639      	mov	r1, r7
 80085ae:	462a      	mov	r2, r5
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 ff17 	bl	80093e4 <__lshift>
 80085b6:	4607      	mov	r7, r0
 80085b8:	f1b8 0f00 	cmp.w	r8, #0
 80085bc:	d05b      	beq.n	8008676 <_dtoa_r+0xa5e>
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 fcb3 	bl	8008f2c <_Balloc>
 80085c6:	4605      	mov	r5, r0
 80085c8:	b928      	cbnz	r0, 80085d6 <_dtoa_r+0x9be>
 80085ca:	4b87      	ldr	r3, [pc, #540]	; (80087e8 <_dtoa_r+0xbd0>)
 80085cc:	4602      	mov	r2, r0
 80085ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085d2:	f7ff bb3b 	b.w	8007c4c <_dtoa_r+0x34>
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	3202      	adds	r2, #2
 80085da:	0092      	lsls	r2, r2, #2
 80085dc:	f107 010c 	add.w	r1, r7, #12
 80085e0:	300c      	adds	r0, #12
 80085e2:	f000 fc95 	bl	8008f10 <memcpy>
 80085e6:	2201      	movs	r2, #1
 80085e8:	4629      	mov	r1, r5
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 fefa 	bl	80093e4 <__lshift>
 80085f0:	9b01      	ldr	r3, [sp, #4]
 80085f2:	f103 0901 	add.w	r9, r3, #1
 80085f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80085fa:	4413      	add	r3, r2
 80085fc:	9305      	str	r3, [sp, #20]
 80085fe:	f00a 0301 	and.w	r3, sl, #1
 8008602:	46b8      	mov	r8, r7
 8008604:	9304      	str	r3, [sp, #16]
 8008606:	4607      	mov	r7, r0
 8008608:	4631      	mov	r1, r6
 800860a:	ee18 0a10 	vmov	r0, s16
 800860e:	f7ff fa77 	bl	8007b00 <quorem>
 8008612:	4641      	mov	r1, r8
 8008614:	9002      	str	r0, [sp, #8]
 8008616:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800861a:	ee18 0a10 	vmov	r0, s16
 800861e:	f000 ff51 	bl	80094c4 <__mcmp>
 8008622:	463a      	mov	r2, r7
 8008624:	9003      	str	r0, [sp, #12]
 8008626:	4631      	mov	r1, r6
 8008628:	4620      	mov	r0, r4
 800862a:	f000 ff67 	bl	80094fc <__mdiff>
 800862e:	68c2      	ldr	r2, [r0, #12]
 8008630:	f109 3bff 	add.w	fp, r9, #4294967295
 8008634:	4605      	mov	r5, r0
 8008636:	bb02      	cbnz	r2, 800867a <_dtoa_r+0xa62>
 8008638:	4601      	mov	r1, r0
 800863a:	ee18 0a10 	vmov	r0, s16
 800863e:	f000 ff41 	bl	80094c4 <__mcmp>
 8008642:	4602      	mov	r2, r0
 8008644:	4629      	mov	r1, r5
 8008646:	4620      	mov	r0, r4
 8008648:	9207      	str	r2, [sp, #28]
 800864a:	f000 fcaf 	bl	8008fac <_Bfree>
 800864e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008652:	ea43 0102 	orr.w	r1, r3, r2
 8008656:	9b04      	ldr	r3, [sp, #16]
 8008658:	430b      	orrs	r3, r1
 800865a:	464d      	mov	r5, r9
 800865c:	d10f      	bne.n	800867e <_dtoa_r+0xa66>
 800865e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008662:	d02a      	beq.n	80086ba <_dtoa_r+0xaa2>
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	dd02      	ble.n	8008670 <_dtoa_r+0xa58>
 800866a:	9b02      	ldr	r3, [sp, #8]
 800866c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008670:	f88b a000 	strb.w	sl, [fp]
 8008674:	e775      	b.n	8008562 <_dtoa_r+0x94a>
 8008676:	4638      	mov	r0, r7
 8008678:	e7ba      	b.n	80085f0 <_dtoa_r+0x9d8>
 800867a:	2201      	movs	r2, #1
 800867c:	e7e2      	b.n	8008644 <_dtoa_r+0xa2c>
 800867e:	9b03      	ldr	r3, [sp, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	db04      	blt.n	800868e <_dtoa_r+0xa76>
 8008684:	9906      	ldr	r1, [sp, #24]
 8008686:	430b      	orrs	r3, r1
 8008688:	9904      	ldr	r1, [sp, #16]
 800868a:	430b      	orrs	r3, r1
 800868c:	d122      	bne.n	80086d4 <_dtoa_r+0xabc>
 800868e:	2a00      	cmp	r2, #0
 8008690:	ddee      	ble.n	8008670 <_dtoa_r+0xa58>
 8008692:	ee18 1a10 	vmov	r1, s16
 8008696:	2201      	movs	r2, #1
 8008698:	4620      	mov	r0, r4
 800869a:	f000 fea3 	bl	80093e4 <__lshift>
 800869e:	4631      	mov	r1, r6
 80086a0:	ee08 0a10 	vmov	s16, r0
 80086a4:	f000 ff0e 	bl	80094c4 <__mcmp>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	dc03      	bgt.n	80086b4 <_dtoa_r+0xa9c>
 80086ac:	d1e0      	bne.n	8008670 <_dtoa_r+0xa58>
 80086ae:	f01a 0f01 	tst.w	sl, #1
 80086b2:	d0dd      	beq.n	8008670 <_dtoa_r+0xa58>
 80086b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086b8:	d1d7      	bne.n	800866a <_dtoa_r+0xa52>
 80086ba:	2339      	movs	r3, #57	; 0x39
 80086bc:	f88b 3000 	strb.w	r3, [fp]
 80086c0:	462b      	mov	r3, r5
 80086c2:	461d      	mov	r5, r3
 80086c4:	3b01      	subs	r3, #1
 80086c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80086ca:	2a39      	cmp	r2, #57	; 0x39
 80086cc:	d071      	beq.n	80087b2 <_dtoa_r+0xb9a>
 80086ce:	3201      	adds	r2, #1
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	e746      	b.n	8008562 <_dtoa_r+0x94a>
 80086d4:	2a00      	cmp	r2, #0
 80086d6:	dd07      	ble.n	80086e8 <_dtoa_r+0xad0>
 80086d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086dc:	d0ed      	beq.n	80086ba <_dtoa_r+0xaa2>
 80086de:	f10a 0301 	add.w	r3, sl, #1
 80086e2:	f88b 3000 	strb.w	r3, [fp]
 80086e6:	e73c      	b.n	8008562 <_dtoa_r+0x94a>
 80086e8:	9b05      	ldr	r3, [sp, #20]
 80086ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80086ee:	4599      	cmp	r9, r3
 80086f0:	d047      	beq.n	8008782 <_dtoa_r+0xb6a>
 80086f2:	ee18 1a10 	vmov	r1, s16
 80086f6:	2300      	movs	r3, #0
 80086f8:	220a      	movs	r2, #10
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 fc78 	bl	8008ff0 <__multadd>
 8008700:	45b8      	cmp	r8, r7
 8008702:	ee08 0a10 	vmov	s16, r0
 8008706:	f04f 0300 	mov.w	r3, #0
 800870a:	f04f 020a 	mov.w	r2, #10
 800870e:	4641      	mov	r1, r8
 8008710:	4620      	mov	r0, r4
 8008712:	d106      	bne.n	8008722 <_dtoa_r+0xb0a>
 8008714:	f000 fc6c 	bl	8008ff0 <__multadd>
 8008718:	4680      	mov	r8, r0
 800871a:	4607      	mov	r7, r0
 800871c:	f109 0901 	add.w	r9, r9, #1
 8008720:	e772      	b.n	8008608 <_dtoa_r+0x9f0>
 8008722:	f000 fc65 	bl	8008ff0 <__multadd>
 8008726:	4639      	mov	r1, r7
 8008728:	4680      	mov	r8, r0
 800872a:	2300      	movs	r3, #0
 800872c:	220a      	movs	r2, #10
 800872e:	4620      	mov	r0, r4
 8008730:	f000 fc5e 	bl	8008ff0 <__multadd>
 8008734:	4607      	mov	r7, r0
 8008736:	e7f1      	b.n	800871c <_dtoa_r+0xb04>
 8008738:	9b03      	ldr	r3, [sp, #12]
 800873a:	9302      	str	r3, [sp, #8]
 800873c:	9d01      	ldr	r5, [sp, #4]
 800873e:	ee18 0a10 	vmov	r0, s16
 8008742:	4631      	mov	r1, r6
 8008744:	f7ff f9dc 	bl	8007b00 <quorem>
 8008748:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800874c:	9b01      	ldr	r3, [sp, #4]
 800874e:	f805 ab01 	strb.w	sl, [r5], #1
 8008752:	1aea      	subs	r2, r5, r3
 8008754:	9b02      	ldr	r3, [sp, #8]
 8008756:	4293      	cmp	r3, r2
 8008758:	dd09      	ble.n	800876e <_dtoa_r+0xb56>
 800875a:	ee18 1a10 	vmov	r1, s16
 800875e:	2300      	movs	r3, #0
 8008760:	220a      	movs	r2, #10
 8008762:	4620      	mov	r0, r4
 8008764:	f000 fc44 	bl	8008ff0 <__multadd>
 8008768:	ee08 0a10 	vmov	s16, r0
 800876c:	e7e7      	b.n	800873e <_dtoa_r+0xb26>
 800876e:	9b02      	ldr	r3, [sp, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	bfc8      	it	gt
 8008774:	461d      	movgt	r5, r3
 8008776:	9b01      	ldr	r3, [sp, #4]
 8008778:	bfd8      	it	le
 800877a:	2501      	movle	r5, #1
 800877c:	441d      	add	r5, r3
 800877e:	f04f 0800 	mov.w	r8, #0
 8008782:	ee18 1a10 	vmov	r1, s16
 8008786:	2201      	movs	r2, #1
 8008788:	4620      	mov	r0, r4
 800878a:	f000 fe2b 	bl	80093e4 <__lshift>
 800878e:	4631      	mov	r1, r6
 8008790:	ee08 0a10 	vmov	s16, r0
 8008794:	f000 fe96 	bl	80094c4 <__mcmp>
 8008798:	2800      	cmp	r0, #0
 800879a:	dc91      	bgt.n	80086c0 <_dtoa_r+0xaa8>
 800879c:	d102      	bne.n	80087a4 <_dtoa_r+0xb8c>
 800879e:	f01a 0f01 	tst.w	sl, #1
 80087a2:	d18d      	bne.n	80086c0 <_dtoa_r+0xaa8>
 80087a4:	462b      	mov	r3, r5
 80087a6:	461d      	mov	r5, r3
 80087a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087ac:	2a30      	cmp	r2, #48	; 0x30
 80087ae:	d0fa      	beq.n	80087a6 <_dtoa_r+0xb8e>
 80087b0:	e6d7      	b.n	8008562 <_dtoa_r+0x94a>
 80087b2:	9a01      	ldr	r2, [sp, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d184      	bne.n	80086c2 <_dtoa_r+0xaaa>
 80087b8:	9b00      	ldr	r3, [sp, #0]
 80087ba:	3301      	adds	r3, #1
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	2331      	movs	r3, #49	; 0x31
 80087c0:	7013      	strb	r3, [r2, #0]
 80087c2:	e6ce      	b.n	8008562 <_dtoa_r+0x94a>
 80087c4:	4b09      	ldr	r3, [pc, #36]	; (80087ec <_dtoa_r+0xbd4>)
 80087c6:	f7ff ba95 	b.w	8007cf4 <_dtoa_r+0xdc>
 80087ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f47f aa6e 	bne.w	8007cae <_dtoa_r+0x96>
 80087d2:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <_dtoa_r+0xbd8>)
 80087d4:	f7ff ba8e 	b.w	8007cf4 <_dtoa_r+0xdc>
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	dcae      	bgt.n	800873c <_dtoa_r+0xb24>
 80087de:	9b06      	ldr	r3, [sp, #24]
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	f73f aea8 	bgt.w	8008536 <_dtoa_r+0x91e>
 80087e6:	e7a9      	b.n	800873c <_dtoa_r+0xb24>
 80087e8:	0800acf8 	.word	0x0800acf8
 80087ec:	0800aaf8 	.word	0x0800aaf8
 80087f0:	0800ac79 	.word	0x0800ac79

080087f4 <rshift>:
 80087f4:	6903      	ldr	r3, [r0, #16]
 80087f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80087fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008802:	f100 0414 	add.w	r4, r0, #20
 8008806:	dd45      	ble.n	8008894 <rshift+0xa0>
 8008808:	f011 011f 	ands.w	r1, r1, #31
 800880c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008810:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008814:	d10c      	bne.n	8008830 <rshift+0x3c>
 8008816:	f100 0710 	add.w	r7, r0, #16
 800881a:	4629      	mov	r1, r5
 800881c:	42b1      	cmp	r1, r6
 800881e:	d334      	bcc.n	800888a <rshift+0x96>
 8008820:	1a9b      	subs	r3, r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	1eea      	subs	r2, r5, #3
 8008826:	4296      	cmp	r6, r2
 8008828:	bf38      	it	cc
 800882a:	2300      	movcc	r3, #0
 800882c:	4423      	add	r3, r4
 800882e:	e015      	b.n	800885c <rshift+0x68>
 8008830:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008834:	f1c1 0820 	rsb	r8, r1, #32
 8008838:	40cf      	lsrs	r7, r1
 800883a:	f105 0e04 	add.w	lr, r5, #4
 800883e:	46a1      	mov	r9, r4
 8008840:	4576      	cmp	r6, lr
 8008842:	46f4      	mov	ip, lr
 8008844:	d815      	bhi.n	8008872 <rshift+0x7e>
 8008846:	1a9a      	subs	r2, r3, r2
 8008848:	0092      	lsls	r2, r2, #2
 800884a:	3a04      	subs	r2, #4
 800884c:	3501      	adds	r5, #1
 800884e:	42ae      	cmp	r6, r5
 8008850:	bf38      	it	cc
 8008852:	2200      	movcc	r2, #0
 8008854:	18a3      	adds	r3, r4, r2
 8008856:	50a7      	str	r7, [r4, r2]
 8008858:	b107      	cbz	r7, 800885c <rshift+0x68>
 800885a:	3304      	adds	r3, #4
 800885c:	1b1a      	subs	r2, r3, r4
 800885e:	42a3      	cmp	r3, r4
 8008860:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008864:	bf08      	it	eq
 8008866:	2300      	moveq	r3, #0
 8008868:	6102      	str	r2, [r0, #16]
 800886a:	bf08      	it	eq
 800886c:	6143      	streq	r3, [r0, #20]
 800886e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008872:	f8dc c000 	ldr.w	ip, [ip]
 8008876:	fa0c fc08 	lsl.w	ip, ip, r8
 800887a:	ea4c 0707 	orr.w	r7, ip, r7
 800887e:	f849 7b04 	str.w	r7, [r9], #4
 8008882:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008886:	40cf      	lsrs	r7, r1
 8008888:	e7da      	b.n	8008840 <rshift+0x4c>
 800888a:	f851 cb04 	ldr.w	ip, [r1], #4
 800888e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008892:	e7c3      	b.n	800881c <rshift+0x28>
 8008894:	4623      	mov	r3, r4
 8008896:	e7e1      	b.n	800885c <rshift+0x68>

08008898 <__hexdig_fun>:
 8008898:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800889c:	2b09      	cmp	r3, #9
 800889e:	d802      	bhi.n	80088a6 <__hexdig_fun+0xe>
 80088a0:	3820      	subs	r0, #32
 80088a2:	b2c0      	uxtb	r0, r0
 80088a4:	4770      	bx	lr
 80088a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80088aa:	2b05      	cmp	r3, #5
 80088ac:	d801      	bhi.n	80088b2 <__hexdig_fun+0x1a>
 80088ae:	3847      	subs	r0, #71	; 0x47
 80088b0:	e7f7      	b.n	80088a2 <__hexdig_fun+0xa>
 80088b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80088b6:	2b05      	cmp	r3, #5
 80088b8:	d801      	bhi.n	80088be <__hexdig_fun+0x26>
 80088ba:	3827      	subs	r0, #39	; 0x27
 80088bc:	e7f1      	b.n	80088a2 <__hexdig_fun+0xa>
 80088be:	2000      	movs	r0, #0
 80088c0:	4770      	bx	lr
	...

080088c4 <__gethex>:
 80088c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c8:	ed2d 8b02 	vpush	{d8}
 80088cc:	b089      	sub	sp, #36	; 0x24
 80088ce:	ee08 0a10 	vmov	s16, r0
 80088d2:	9304      	str	r3, [sp, #16]
 80088d4:	4bb4      	ldr	r3, [pc, #720]	; (8008ba8 <__gethex+0x2e4>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	9301      	str	r3, [sp, #4]
 80088da:	4618      	mov	r0, r3
 80088dc:	468b      	mov	fp, r1
 80088de:	4690      	mov	r8, r2
 80088e0:	f7f7 fc9e 	bl	8000220 <strlen>
 80088e4:	9b01      	ldr	r3, [sp, #4]
 80088e6:	f8db 2000 	ldr.w	r2, [fp]
 80088ea:	4403      	add	r3, r0
 80088ec:	4682      	mov	sl, r0
 80088ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80088f2:	9305      	str	r3, [sp, #20]
 80088f4:	1c93      	adds	r3, r2, #2
 80088f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80088fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80088fe:	32fe      	adds	r2, #254	; 0xfe
 8008900:	18d1      	adds	r1, r2, r3
 8008902:	461f      	mov	r7, r3
 8008904:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008908:	9100      	str	r1, [sp, #0]
 800890a:	2830      	cmp	r0, #48	; 0x30
 800890c:	d0f8      	beq.n	8008900 <__gethex+0x3c>
 800890e:	f7ff ffc3 	bl	8008898 <__hexdig_fun>
 8008912:	4604      	mov	r4, r0
 8008914:	2800      	cmp	r0, #0
 8008916:	d13a      	bne.n	800898e <__gethex+0xca>
 8008918:	9901      	ldr	r1, [sp, #4]
 800891a:	4652      	mov	r2, sl
 800891c:	4638      	mov	r0, r7
 800891e:	f001 fa33 	bl	8009d88 <strncmp>
 8008922:	4605      	mov	r5, r0
 8008924:	2800      	cmp	r0, #0
 8008926:	d168      	bne.n	80089fa <__gethex+0x136>
 8008928:	f817 000a 	ldrb.w	r0, [r7, sl]
 800892c:	eb07 060a 	add.w	r6, r7, sl
 8008930:	f7ff ffb2 	bl	8008898 <__hexdig_fun>
 8008934:	2800      	cmp	r0, #0
 8008936:	d062      	beq.n	80089fe <__gethex+0x13a>
 8008938:	4633      	mov	r3, r6
 800893a:	7818      	ldrb	r0, [r3, #0]
 800893c:	2830      	cmp	r0, #48	; 0x30
 800893e:	461f      	mov	r7, r3
 8008940:	f103 0301 	add.w	r3, r3, #1
 8008944:	d0f9      	beq.n	800893a <__gethex+0x76>
 8008946:	f7ff ffa7 	bl	8008898 <__hexdig_fun>
 800894a:	2301      	movs	r3, #1
 800894c:	fab0 f480 	clz	r4, r0
 8008950:	0964      	lsrs	r4, r4, #5
 8008952:	4635      	mov	r5, r6
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	463a      	mov	r2, r7
 8008958:	4616      	mov	r6, r2
 800895a:	3201      	adds	r2, #1
 800895c:	7830      	ldrb	r0, [r6, #0]
 800895e:	f7ff ff9b 	bl	8008898 <__hexdig_fun>
 8008962:	2800      	cmp	r0, #0
 8008964:	d1f8      	bne.n	8008958 <__gethex+0x94>
 8008966:	9901      	ldr	r1, [sp, #4]
 8008968:	4652      	mov	r2, sl
 800896a:	4630      	mov	r0, r6
 800896c:	f001 fa0c 	bl	8009d88 <strncmp>
 8008970:	b980      	cbnz	r0, 8008994 <__gethex+0xd0>
 8008972:	b94d      	cbnz	r5, 8008988 <__gethex+0xc4>
 8008974:	eb06 050a 	add.w	r5, r6, sl
 8008978:	462a      	mov	r2, r5
 800897a:	4616      	mov	r6, r2
 800897c:	3201      	adds	r2, #1
 800897e:	7830      	ldrb	r0, [r6, #0]
 8008980:	f7ff ff8a 	bl	8008898 <__hexdig_fun>
 8008984:	2800      	cmp	r0, #0
 8008986:	d1f8      	bne.n	800897a <__gethex+0xb6>
 8008988:	1bad      	subs	r5, r5, r6
 800898a:	00ad      	lsls	r5, r5, #2
 800898c:	e004      	b.n	8008998 <__gethex+0xd4>
 800898e:	2400      	movs	r4, #0
 8008990:	4625      	mov	r5, r4
 8008992:	e7e0      	b.n	8008956 <__gethex+0x92>
 8008994:	2d00      	cmp	r5, #0
 8008996:	d1f7      	bne.n	8008988 <__gethex+0xc4>
 8008998:	7833      	ldrb	r3, [r6, #0]
 800899a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800899e:	2b50      	cmp	r3, #80	; 0x50
 80089a0:	d13b      	bne.n	8008a1a <__gethex+0x156>
 80089a2:	7873      	ldrb	r3, [r6, #1]
 80089a4:	2b2b      	cmp	r3, #43	; 0x2b
 80089a6:	d02c      	beq.n	8008a02 <__gethex+0x13e>
 80089a8:	2b2d      	cmp	r3, #45	; 0x2d
 80089aa:	d02e      	beq.n	8008a0a <__gethex+0x146>
 80089ac:	1c71      	adds	r1, r6, #1
 80089ae:	f04f 0900 	mov.w	r9, #0
 80089b2:	7808      	ldrb	r0, [r1, #0]
 80089b4:	f7ff ff70 	bl	8008898 <__hexdig_fun>
 80089b8:	1e43      	subs	r3, r0, #1
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b18      	cmp	r3, #24
 80089be:	d82c      	bhi.n	8008a1a <__gethex+0x156>
 80089c0:	f1a0 0210 	sub.w	r2, r0, #16
 80089c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089c8:	f7ff ff66 	bl	8008898 <__hexdig_fun>
 80089cc:	1e43      	subs	r3, r0, #1
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b18      	cmp	r3, #24
 80089d2:	d91d      	bls.n	8008a10 <__gethex+0x14c>
 80089d4:	f1b9 0f00 	cmp.w	r9, #0
 80089d8:	d000      	beq.n	80089dc <__gethex+0x118>
 80089da:	4252      	negs	r2, r2
 80089dc:	4415      	add	r5, r2
 80089de:	f8cb 1000 	str.w	r1, [fp]
 80089e2:	b1e4      	cbz	r4, 8008a1e <__gethex+0x15a>
 80089e4:	9b00      	ldr	r3, [sp, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bf14      	ite	ne
 80089ea:	2700      	movne	r7, #0
 80089ec:	2706      	moveq	r7, #6
 80089ee:	4638      	mov	r0, r7
 80089f0:	b009      	add	sp, #36	; 0x24
 80089f2:	ecbd 8b02 	vpop	{d8}
 80089f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fa:	463e      	mov	r6, r7
 80089fc:	4625      	mov	r5, r4
 80089fe:	2401      	movs	r4, #1
 8008a00:	e7ca      	b.n	8008998 <__gethex+0xd4>
 8008a02:	f04f 0900 	mov.w	r9, #0
 8008a06:	1cb1      	adds	r1, r6, #2
 8008a08:	e7d3      	b.n	80089b2 <__gethex+0xee>
 8008a0a:	f04f 0901 	mov.w	r9, #1
 8008a0e:	e7fa      	b.n	8008a06 <__gethex+0x142>
 8008a10:	230a      	movs	r3, #10
 8008a12:	fb03 0202 	mla	r2, r3, r2, r0
 8008a16:	3a10      	subs	r2, #16
 8008a18:	e7d4      	b.n	80089c4 <__gethex+0x100>
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	e7df      	b.n	80089de <__gethex+0x11a>
 8008a1e:	1bf3      	subs	r3, r6, r7
 8008a20:	3b01      	subs	r3, #1
 8008a22:	4621      	mov	r1, r4
 8008a24:	2b07      	cmp	r3, #7
 8008a26:	dc0b      	bgt.n	8008a40 <__gethex+0x17c>
 8008a28:	ee18 0a10 	vmov	r0, s16
 8008a2c:	f000 fa7e 	bl	8008f2c <_Balloc>
 8008a30:	4604      	mov	r4, r0
 8008a32:	b940      	cbnz	r0, 8008a46 <__gethex+0x182>
 8008a34:	4b5d      	ldr	r3, [pc, #372]	; (8008bac <__gethex+0x2e8>)
 8008a36:	4602      	mov	r2, r0
 8008a38:	21de      	movs	r1, #222	; 0xde
 8008a3a:	485d      	ldr	r0, [pc, #372]	; (8008bb0 <__gethex+0x2ec>)
 8008a3c:	f001 f9c6 	bl	8009dcc <__assert_func>
 8008a40:	3101      	adds	r1, #1
 8008a42:	105b      	asrs	r3, r3, #1
 8008a44:	e7ee      	b.n	8008a24 <__gethex+0x160>
 8008a46:	f100 0914 	add.w	r9, r0, #20
 8008a4a:	f04f 0b00 	mov.w	fp, #0
 8008a4e:	f1ca 0301 	rsb	r3, sl, #1
 8008a52:	f8cd 9008 	str.w	r9, [sp, #8]
 8008a56:	f8cd b000 	str.w	fp, [sp]
 8008a5a:	9306      	str	r3, [sp, #24]
 8008a5c:	42b7      	cmp	r7, r6
 8008a5e:	d340      	bcc.n	8008ae2 <__gethex+0x21e>
 8008a60:	9802      	ldr	r0, [sp, #8]
 8008a62:	9b00      	ldr	r3, [sp, #0]
 8008a64:	f840 3b04 	str.w	r3, [r0], #4
 8008a68:	eba0 0009 	sub.w	r0, r0, r9
 8008a6c:	1080      	asrs	r0, r0, #2
 8008a6e:	0146      	lsls	r6, r0, #5
 8008a70:	6120      	str	r0, [r4, #16]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 fb4c 	bl	8009110 <__hi0bits>
 8008a78:	1a30      	subs	r0, r6, r0
 8008a7a:	f8d8 6000 	ldr.w	r6, [r8]
 8008a7e:	42b0      	cmp	r0, r6
 8008a80:	dd63      	ble.n	8008b4a <__gethex+0x286>
 8008a82:	1b87      	subs	r7, r0, r6
 8008a84:	4639      	mov	r1, r7
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 fef0 	bl	800986c <__any_on>
 8008a8c:	4682      	mov	sl, r0
 8008a8e:	b1a8      	cbz	r0, 8008abc <__gethex+0x1f8>
 8008a90:	1e7b      	subs	r3, r7, #1
 8008a92:	1159      	asrs	r1, r3, #5
 8008a94:	f003 021f 	and.w	r2, r3, #31
 8008a98:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008a9c:	f04f 0a01 	mov.w	sl, #1
 8008aa0:	fa0a f202 	lsl.w	r2, sl, r2
 8008aa4:	420a      	tst	r2, r1
 8008aa6:	d009      	beq.n	8008abc <__gethex+0x1f8>
 8008aa8:	4553      	cmp	r3, sl
 8008aaa:	dd05      	ble.n	8008ab8 <__gethex+0x1f4>
 8008aac:	1eb9      	subs	r1, r7, #2
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 fedc 	bl	800986c <__any_on>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d145      	bne.n	8008b44 <__gethex+0x280>
 8008ab8:	f04f 0a02 	mov.w	sl, #2
 8008abc:	4639      	mov	r1, r7
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f7ff fe98 	bl	80087f4 <rshift>
 8008ac4:	443d      	add	r5, r7
 8008ac6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008aca:	42ab      	cmp	r3, r5
 8008acc:	da4c      	bge.n	8008b68 <__gethex+0x2a4>
 8008ace:	ee18 0a10 	vmov	r0, s16
 8008ad2:	4621      	mov	r1, r4
 8008ad4:	f000 fa6a 	bl	8008fac <_Bfree>
 8008ad8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ada:	2300      	movs	r3, #0
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	27a3      	movs	r7, #163	; 0xa3
 8008ae0:	e785      	b.n	80089ee <__gethex+0x12a>
 8008ae2:	1e73      	subs	r3, r6, #1
 8008ae4:	9a05      	ldr	r2, [sp, #20]
 8008ae6:	9303      	str	r3, [sp, #12]
 8008ae8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d019      	beq.n	8008b24 <__gethex+0x260>
 8008af0:	f1bb 0f20 	cmp.w	fp, #32
 8008af4:	d107      	bne.n	8008b06 <__gethex+0x242>
 8008af6:	9b02      	ldr	r3, [sp, #8]
 8008af8:	9a00      	ldr	r2, [sp, #0]
 8008afa:	f843 2b04 	str.w	r2, [r3], #4
 8008afe:	9302      	str	r3, [sp, #8]
 8008b00:	2300      	movs	r3, #0
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	469b      	mov	fp, r3
 8008b06:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008b0a:	f7ff fec5 	bl	8008898 <__hexdig_fun>
 8008b0e:	9b00      	ldr	r3, [sp, #0]
 8008b10:	f000 000f 	and.w	r0, r0, #15
 8008b14:	fa00 f00b 	lsl.w	r0, r0, fp
 8008b18:	4303      	orrs	r3, r0
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	f10b 0b04 	add.w	fp, fp, #4
 8008b20:	9b03      	ldr	r3, [sp, #12]
 8008b22:	e00d      	b.n	8008b40 <__gethex+0x27c>
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	9a06      	ldr	r2, [sp, #24]
 8008b28:	4413      	add	r3, r2
 8008b2a:	42bb      	cmp	r3, r7
 8008b2c:	d3e0      	bcc.n	8008af0 <__gethex+0x22c>
 8008b2e:	4618      	mov	r0, r3
 8008b30:	9901      	ldr	r1, [sp, #4]
 8008b32:	9307      	str	r3, [sp, #28]
 8008b34:	4652      	mov	r2, sl
 8008b36:	f001 f927 	bl	8009d88 <strncmp>
 8008b3a:	9b07      	ldr	r3, [sp, #28]
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d1d7      	bne.n	8008af0 <__gethex+0x22c>
 8008b40:	461e      	mov	r6, r3
 8008b42:	e78b      	b.n	8008a5c <__gethex+0x198>
 8008b44:	f04f 0a03 	mov.w	sl, #3
 8008b48:	e7b8      	b.n	8008abc <__gethex+0x1f8>
 8008b4a:	da0a      	bge.n	8008b62 <__gethex+0x29e>
 8008b4c:	1a37      	subs	r7, r6, r0
 8008b4e:	4621      	mov	r1, r4
 8008b50:	ee18 0a10 	vmov	r0, s16
 8008b54:	463a      	mov	r2, r7
 8008b56:	f000 fc45 	bl	80093e4 <__lshift>
 8008b5a:	1bed      	subs	r5, r5, r7
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	f100 0914 	add.w	r9, r0, #20
 8008b62:	f04f 0a00 	mov.w	sl, #0
 8008b66:	e7ae      	b.n	8008ac6 <__gethex+0x202>
 8008b68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b6c:	42a8      	cmp	r0, r5
 8008b6e:	dd72      	ble.n	8008c56 <__gethex+0x392>
 8008b70:	1b45      	subs	r5, r0, r5
 8008b72:	42ae      	cmp	r6, r5
 8008b74:	dc36      	bgt.n	8008be4 <__gethex+0x320>
 8008b76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d02a      	beq.n	8008bd4 <__gethex+0x310>
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d02c      	beq.n	8008bdc <__gethex+0x318>
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d11c      	bne.n	8008bc0 <__gethex+0x2fc>
 8008b86:	42ae      	cmp	r6, r5
 8008b88:	d11a      	bne.n	8008bc0 <__gethex+0x2fc>
 8008b8a:	2e01      	cmp	r6, #1
 8008b8c:	d112      	bne.n	8008bb4 <__gethex+0x2f0>
 8008b8e:	9a04      	ldr	r2, [sp, #16]
 8008b90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	2301      	movs	r3, #1
 8008b98:	6123      	str	r3, [r4, #16]
 8008b9a:	f8c9 3000 	str.w	r3, [r9]
 8008b9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ba0:	2762      	movs	r7, #98	; 0x62
 8008ba2:	601c      	str	r4, [r3, #0]
 8008ba4:	e723      	b.n	80089ee <__gethex+0x12a>
 8008ba6:	bf00      	nop
 8008ba8:	0800ad70 	.word	0x0800ad70
 8008bac:	0800acf8 	.word	0x0800acf8
 8008bb0:	0800ad09 	.word	0x0800ad09
 8008bb4:	1e71      	subs	r1, r6, #1
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 fe58 	bl	800986c <__any_on>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d1e6      	bne.n	8008b8e <__gethex+0x2ca>
 8008bc0:	ee18 0a10 	vmov	r0, s16
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	f000 f9f1 	bl	8008fac <_Bfree>
 8008bca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bcc:	2300      	movs	r3, #0
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	2750      	movs	r7, #80	; 0x50
 8008bd2:	e70c      	b.n	80089ee <__gethex+0x12a>
 8008bd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1f2      	bne.n	8008bc0 <__gethex+0x2fc>
 8008bda:	e7d8      	b.n	8008b8e <__gethex+0x2ca>
 8008bdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1d5      	bne.n	8008b8e <__gethex+0x2ca>
 8008be2:	e7ed      	b.n	8008bc0 <__gethex+0x2fc>
 8008be4:	1e6f      	subs	r7, r5, #1
 8008be6:	f1ba 0f00 	cmp.w	sl, #0
 8008bea:	d131      	bne.n	8008c50 <__gethex+0x38c>
 8008bec:	b127      	cbz	r7, 8008bf8 <__gethex+0x334>
 8008bee:	4639      	mov	r1, r7
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f000 fe3b 	bl	800986c <__any_on>
 8008bf6:	4682      	mov	sl, r0
 8008bf8:	117b      	asrs	r3, r7, #5
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008c00:	f007 071f 	and.w	r7, r7, #31
 8008c04:	fa01 f707 	lsl.w	r7, r1, r7
 8008c08:	421f      	tst	r7, r3
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	bf18      	it	ne
 8008c10:	f04a 0a02 	orrne.w	sl, sl, #2
 8008c14:	1b76      	subs	r6, r6, r5
 8008c16:	f7ff fded 	bl	80087f4 <rshift>
 8008c1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008c1e:	2702      	movs	r7, #2
 8008c20:	f1ba 0f00 	cmp.w	sl, #0
 8008c24:	d048      	beq.n	8008cb8 <__gethex+0x3f4>
 8008c26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d015      	beq.n	8008c5a <__gethex+0x396>
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d017      	beq.n	8008c62 <__gethex+0x39e>
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d109      	bne.n	8008c4a <__gethex+0x386>
 8008c36:	f01a 0f02 	tst.w	sl, #2
 8008c3a:	d006      	beq.n	8008c4a <__gethex+0x386>
 8008c3c:	f8d9 0000 	ldr.w	r0, [r9]
 8008c40:	ea4a 0a00 	orr.w	sl, sl, r0
 8008c44:	f01a 0f01 	tst.w	sl, #1
 8008c48:	d10e      	bne.n	8008c68 <__gethex+0x3a4>
 8008c4a:	f047 0710 	orr.w	r7, r7, #16
 8008c4e:	e033      	b.n	8008cb8 <__gethex+0x3f4>
 8008c50:	f04f 0a01 	mov.w	sl, #1
 8008c54:	e7d0      	b.n	8008bf8 <__gethex+0x334>
 8008c56:	2701      	movs	r7, #1
 8008c58:	e7e2      	b.n	8008c20 <__gethex+0x35c>
 8008c5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c5c:	f1c3 0301 	rsb	r3, r3, #1
 8008c60:	9315      	str	r3, [sp, #84]	; 0x54
 8008c62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d0f0      	beq.n	8008c4a <__gethex+0x386>
 8008c68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c6c:	f104 0314 	add.w	r3, r4, #20
 8008c70:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c74:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c78:	f04f 0c00 	mov.w	ip, #0
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c82:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c86:	d01c      	beq.n	8008cc2 <__gethex+0x3fe>
 8008c88:	3201      	adds	r2, #1
 8008c8a:	6002      	str	r2, [r0, #0]
 8008c8c:	2f02      	cmp	r7, #2
 8008c8e:	f104 0314 	add.w	r3, r4, #20
 8008c92:	d13f      	bne.n	8008d14 <__gethex+0x450>
 8008c94:	f8d8 2000 	ldr.w	r2, [r8]
 8008c98:	3a01      	subs	r2, #1
 8008c9a:	42b2      	cmp	r2, r6
 8008c9c:	d10a      	bne.n	8008cb4 <__gethex+0x3f0>
 8008c9e:	1171      	asrs	r1, r6, #5
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ca6:	f006 061f 	and.w	r6, r6, #31
 8008caa:	fa02 f606 	lsl.w	r6, r2, r6
 8008cae:	421e      	tst	r6, r3
 8008cb0:	bf18      	it	ne
 8008cb2:	4617      	movne	r7, r2
 8008cb4:	f047 0720 	orr.w	r7, r7, #32
 8008cb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cba:	601c      	str	r4, [r3, #0]
 8008cbc:	9b04      	ldr	r3, [sp, #16]
 8008cbe:	601d      	str	r5, [r3, #0]
 8008cc0:	e695      	b.n	80089ee <__gethex+0x12a>
 8008cc2:	4299      	cmp	r1, r3
 8008cc4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008cc8:	d8d8      	bhi.n	8008c7c <__gethex+0x3b8>
 8008cca:	68a3      	ldr	r3, [r4, #8]
 8008ccc:	459b      	cmp	fp, r3
 8008cce:	db19      	blt.n	8008d04 <__gethex+0x440>
 8008cd0:	6861      	ldr	r1, [r4, #4]
 8008cd2:	ee18 0a10 	vmov	r0, s16
 8008cd6:	3101      	adds	r1, #1
 8008cd8:	f000 f928 	bl	8008f2c <_Balloc>
 8008cdc:	4681      	mov	r9, r0
 8008cde:	b918      	cbnz	r0, 8008ce8 <__gethex+0x424>
 8008ce0:	4b1a      	ldr	r3, [pc, #104]	; (8008d4c <__gethex+0x488>)
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	2184      	movs	r1, #132	; 0x84
 8008ce6:	e6a8      	b.n	8008a3a <__gethex+0x176>
 8008ce8:	6922      	ldr	r2, [r4, #16]
 8008cea:	3202      	adds	r2, #2
 8008cec:	f104 010c 	add.w	r1, r4, #12
 8008cf0:	0092      	lsls	r2, r2, #2
 8008cf2:	300c      	adds	r0, #12
 8008cf4:	f000 f90c 	bl	8008f10 <memcpy>
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	ee18 0a10 	vmov	r0, s16
 8008cfe:	f000 f955 	bl	8008fac <_Bfree>
 8008d02:	464c      	mov	r4, r9
 8008d04:	6923      	ldr	r3, [r4, #16]
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d0c:	6122      	str	r2, [r4, #16]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	615a      	str	r2, [r3, #20]
 8008d12:	e7bb      	b.n	8008c8c <__gethex+0x3c8>
 8008d14:	6922      	ldr	r2, [r4, #16]
 8008d16:	455a      	cmp	r2, fp
 8008d18:	dd0b      	ble.n	8008d32 <__gethex+0x46e>
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f7ff fd69 	bl	80087f4 <rshift>
 8008d22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d26:	3501      	adds	r5, #1
 8008d28:	42ab      	cmp	r3, r5
 8008d2a:	f6ff aed0 	blt.w	8008ace <__gethex+0x20a>
 8008d2e:	2701      	movs	r7, #1
 8008d30:	e7c0      	b.n	8008cb4 <__gethex+0x3f0>
 8008d32:	f016 061f 	ands.w	r6, r6, #31
 8008d36:	d0fa      	beq.n	8008d2e <__gethex+0x46a>
 8008d38:	4453      	add	r3, sl
 8008d3a:	f1c6 0620 	rsb	r6, r6, #32
 8008d3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008d42:	f000 f9e5 	bl	8009110 <__hi0bits>
 8008d46:	42b0      	cmp	r0, r6
 8008d48:	dbe7      	blt.n	8008d1a <__gethex+0x456>
 8008d4a:	e7f0      	b.n	8008d2e <__gethex+0x46a>
 8008d4c:	0800acf8 	.word	0x0800acf8

08008d50 <L_shift>:
 8008d50:	f1c2 0208 	rsb	r2, r2, #8
 8008d54:	0092      	lsls	r2, r2, #2
 8008d56:	b570      	push	{r4, r5, r6, lr}
 8008d58:	f1c2 0620 	rsb	r6, r2, #32
 8008d5c:	6843      	ldr	r3, [r0, #4]
 8008d5e:	6804      	ldr	r4, [r0, #0]
 8008d60:	fa03 f506 	lsl.w	r5, r3, r6
 8008d64:	432c      	orrs	r4, r5
 8008d66:	40d3      	lsrs	r3, r2
 8008d68:	6004      	str	r4, [r0, #0]
 8008d6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d6e:	4288      	cmp	r0, r1
 8008d70:	d3f4      	bcc.n	8008d5c <L_shift+0xc>
 8008d72:	bd70      	pop	{r4, r5, r6, pc}

08008d74 <__match>:
 8008d74:	b530      	push	{r4, r5, lr}
 8008d76:	6803      	ldr	r3, [r0, #0]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d7e:	b914      	cbnz	r4, 8008d86 <__match+0x12>
 8008d80:	6003      	str	r3, [r0, #0]
 8008d82:	2001      	movs	r0, #1
 8008d84:	bd30      	pop	{r4, r5, pc}
 8008d86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008d8e:	2d19      	cmp	r5, #25
 8008d90:	bf98      	it	ls
 8008d92:	3220      	addls	r2, #32
 8008d94:	42a2      	cmp	r2, r4
 8008d96:	d0f0      	beq.n	8008d7a <__match+0x6>
 8008d98:	2000      	movs	r0, #0
 8008d9a:	e7f3      	b.n	8008d84 <__match+0x10>

08008d9c <__hexnan>:
 8008d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da0:	680b      	ldr	r3, [r1, #0]
 8008da2:	115e      	asrs	r6, r3, #5
 8008da4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008da8:	f013 031f 	ands.w	r3, r3, #31
 8008dac:	b087      	sub	sp, #28
 8008dae:	bf18      	it	ne
 8008db0:	3604      	addne	r6, #4
 8008db2:	2500      	movs	r5, #0
 8008db4:	1f37      	subs	r7, r6, #4
 8008db6:	4690      	mov	r8, r2
 8008db8:	6802      	ldr	r2, [r0, #0]
 8008dba:	9301      	str	r3, [sp, #4]
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	f846 5c04 	str.w	r5, [r6, #-4]
 8008dc2:	46b9      	mov	r9, r7
 8008dc4:	463c      	mov	r4, r7
 8008dc6:	9502      	str	r5, [sp, #8]
 8008dc8:	46ab      	mov	fp, r5
 8008dca:	7851      	ldrb	r1, [r2, #1]
 8008dcc:	1c53      	adds	r3, r2, #1
 8008dce:	9303      	str	r3, [sp, #12]
 8008dd0:	b341      	cbz	r1, 8008e24 <__hexnan+0x88>
 8008dd2:	4608      	mov	r0, r1
 8008dd4:	9205      	str	r2, [sp, #20]
 8008dd6:	9104      	str	r1, [sp, #16]
 8008dd8:	f7ff fd5e 	bl	8008898 <__hexdig_fun>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d14f      	bne.n	8008e80 <__hexnan+0xe4>
 8008de0:	9904      	ldr	r1, [sp, #16]
 8008de2:	9a05      	ldr	r2, [sp, #20]
 8008de4:	2920      	cmp	r1, #32
 8008de6:	d818      	bhi.n	8008e1a <__hexnan+0x7e>
 8008de8:	9b02      	ldr	r3, [sp, #8]
 8008dea:	459b      	cmp	fp, r3
 8008dec:	dd13      	ble.n	8008e16 <__hexnan+0x7a>
 8008dee:	454c      	cmp	r4, r9
 8008df0:	d206      	bcs.n	8008e00 <__hexnan+0x64>
 8008df2:	2d07      	cmp	r5, #7
 8008df4:	dc04      	bgt.n	8008e00 <__hexnan+0x64>
 8008df6:	462a      	mov	r2, r5
 8008df8:	4649      	mov	r1, r9
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f7ff ffa8 	bl	8008d50 <L_shift>
 8008e00:	4544      	cmp	r4, r8
 8008e02:	d950      	bls.n	8008ea6 <__hexnan+0x10a>
 8008e04:	2300      	movs	r3, #0
 8008e06:	f1a4 0904 	sub.w	r9, r4, #4
 8008e0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e0e:	f8cd b008 	str.w	fp, [sp, #8]
 8008e12:	464c      	mov	r4, r9
 8008e14:	461d      	mov	r5, r3
 8008e16:	9a03      	ldr	r2, [sp, #12]
 8008e18:	e7d7      	b.n	8008dca <__hexnan+0x2e>
 8008e1a:	2929      	cmp	r1, #41	; 0x29
 8008e1c:	d156      	bne.n	8008ecc <__hexnan+0x130>
 8008e1e:	3202      	adds	r2, #2
 8008e20:	f8ca 2000 	str.w	r2, [sl]
 8008e24:	f1bb 0f00 	cmp.w	fp, #0
 8008e28:	d050      	beq.n	8008ecc <__hexnan+0x130>
 8008e2a:	454c      	cmp	r4, r9
 8008e2c:	d206      	bcs.n	8008e3c <__hexnan+0xa0>
 8008e2e:	2d07      	cmp	r5, #7
 8008e30:	dc04      	bgt.n	8008e3c <__hexnan+0xa0>
 8008e32:	462a      	mov	r2, r5
 8008e34:	4649      	mov	r1, r9
 8008e36:	4620      	mov	r0, r4
 8008e38:	f7ff ff8a 	bl	8008d50 <L_shift>
 8008e3c:	4544      	cmp	r4, r8
 8008e3e:	d934      	bls.n	8008eaa <__hexnan+0x10e>
 8008e40:	f1a8 0204 	sub.w	r2, r8, #4
 8008e44:	4623      	mov	r3, r4
 8008e46:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e4a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e4e:	429f      	cmp	r7, r3
 8008e50:	d2f9      	bcs.n	8008e46 <__hexnan+0xaa>
 8008e52:	1b3b      	subs	r3, r7, r4
 8008e54:	f023 0303 	bic.w	r3, r3, #3
 8008e58:	3304      	adds	r3, #4
 8008e5a:	3401      	adds	r4, #1
 8008e5c:	3e03      	subs	r6, #3
 8008e5e:	42b4      	cmp	r4, r6
 8008e60:	bf88      	it	hi
 8008e62:	2304      	movhi	r3, #4
 8008e64:	4443      	add	r3, r8
 8008e66:	2200      	movs	r2, #0
 8008e68:	f843 2b04 	str.w	r2, [r3], #4
 8008e6c:	429f      	cmp	r7, r3
 8008e6e:	d2fb      	bcs.n	8008e68 <__hexnan+0xcc>
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	b91b      	cbnz	r3, 8008e7c <__hexnan+0xe0>
 8008e74:	4547      	cmp	r7, r8
 8008e76:	d127      	bne.n	8008ec8 <__hexnan+0x12c>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	2005      	movs	r0, #5
 8008e7e:	e026      	b.n	8008ece <__hexnan+0x132>
 8008e80:	3501      	adds	r5, #1
 8008e82:	2d08      	cmp	r5, #8
 8008e84:	f10b 0b01 	add.w	fp, fp, #1
 8008e88:	dd06      	ble.n	8008e98 <__hexnan+0xfc>
 8008e8a:	4544      	cmp	r4, r8
 8008e8c:	d9c3      	bls.n	8008e16 <__hexnan+0x7a>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e94:	2501      	movs	r5, #1
 8008e96:	3c04      	subs	r4, #4
 8008e98:	6822      	ldr	r2, [r4, #0]
 8008e9a:	f000 000f 	and.w	r0, r0, #15
 8008e9e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008ea2:	6022      	str	r2, [r4, #0]
 8008ea4:	e7b7      	b.n	8008e16 <__hexnan+0x7a>
 8008ea6:	2508      	movs	r5, #8
 8008ea8:	e7b5      	b.n	8008e16 <__hexnan+0x7a>
 8008eaa:	9b01      	ldr	r3, [sp, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0df      	beq.n	8008e70 <__hexnan+0xd4>
 8008eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb4:	f1c3 0320 	rsb	r3, r3, #32
 8008eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ebc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ec0:	401a      	ands	r2, r3
 8008ec2:	f846 2c04 	str.w	r2, [r6, #-4]
 8008ec6:	e7d3      	b.n	8008e70 <__hexnan+0xd4>
 8008ec8:	3f04      	subs	r7, #4
 8008eca:	e7d1      	b.n	8008e70 <__hexnan+0xd4>
 8008ecc:	2004      	movs	r0, #4
 8008ece:	b007      	add	sp, #28
 8008ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ed4 <_localeconv_r>:
 8008ed4:	4800      	ldr	r0, [pc, #0]	; (8008ed8 <_localeconv_r+0x4>)
 8008ed6:	4770      	bx	lr
 8008ed8:	20000164 	.word	0x20000164

08008edc <malloc>:
 8008edc:	4b02      	ldr	r3, [pc, #8]	; (8008ee8 <malloc+0xc>)
 8008ede:	4601      	mov	r1, r0
 8008ee0:	6818      	ldr	r0, [r3, #0]
 8008ee2:	f000 bd67 	b.w	80099b4 <_malloc_r>
 8008ee6:	bf00      	nop
 8008ee8:	2000000c 	.word	0x2000000c

08008eec <__ascii_mbtowc>:
 8008eec:	b082      	sub	sp, #8
 8008eee:	b901      	cbnz	r1, 8008ef2 <__ascii_mbtowc+0x6>
 8008ef0:	a901      	add	r1, sp, #4
 8008ef2:	b142      	cbz	r2, 8008f06 <__ascii_mbtowc+0x1a>
 8008ef4:	b14b      	cbz	r3, 8008f0a <__ascii_mbtowc+0x1e>
 8008ef6:	7813      	ldrb	r3, [r2, #0]
 8008ef8:	600b      	str	r3, [r1, #0]
 8008efa:	7812      	ldrb	r2, [r2, #0]
 8008efc:	1e10      	subs	r0, r2, #0
 8008efe:	bf18      	it	ne
 8008f00:	2001      	movne	r0, #1
 8008f02:	b002      	add	sp, #8
 8008f04:	4770      	bx	lr
 8008f06:	4610      	mov	r0, r2
 8008f08:	e7fb      	b.n	8008f02 <__ascii_mbtowc+0x16>
 8008f0a:	f06f 0001 	mvn.w	r0, #1
 8008f0e:	e7f8      	b.n	8008f02 <__ascii_mbtowc+0x16>

08008f10 <memcpy>:
 8008f10:	440a      	add	r2, r1
 8008f12:	4291      	cmp	r1, r2
 8008f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f18:	d100      	bne.n	8008f1c <memcpy+0xc>
 8008f1a:	4770      	bx	lr
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f26:	4291      	cmp	r1, r2
 8008f28:	d1f9      	bne.n	8008f1e <memcpy+0xe>
 8008f2a:	bd10      	pop	{r4, pc}

08008f2c <_Balloc>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f30:	4604      	mov	r4, r0
 8008f32:	460d      	mov	r5, r1
 8008f34:	b976      	cbnz	r6, 8008f54 <_Balloc+0x28>
 8008f36:	2010      	movs	r0, #16
 8008f38:	f7ff ffd0 	bl	8008edc <malloc>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6260      	str	r0, [r4, #36]	; 0x24
 8008f40:	b920      	cbnz	r0, 8008f4c <_Balloc+0x20>
 8008f42:	4b18      	ldr	r3, [pc, #96]	; (8008fa4 <_Balloc+0x78>)
 8008f44:	4818      	ldr	r0, [pc, #96]	; (8008fa8 <_Balloc+0x7c>)
 8008f46:	2166      	movs	r1, #102	; 0x66
 8008f48:	f000 ff40 	bl	8009dcc <__assert_func>
 8008f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f50:	6006      	str	r6, [r0, #0]
 8008f52:	60c6      	str	r6, [r0, #12]
 8008f54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f56:	68f3      	ldr	r3, [r6, #12]
 8008f58:	b183      	cbz	r3, 8008f7c <_Balloc+0x50>
 8008f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f62:	b9b8      	cbnz	r0, 8008f94 <_Balloc+0x68>
 8008f64:	2101      	movs	r1, #1
 8008f66:	fa01 f605 	lsl.w	r6, r1, r5
 8008f6a:	1d72      	adds	r2, r6, #5
 8008f6c:	0092      	lsls	r2, r2, #2
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 fc9d 	bl	80098ae <_calloc_r>
 8008f74:	b160      	cbz	r0, 8008f90 <_Balloc+0x64>
 8008f76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f7a:	e00e      	b.n	8008f9a <_Balloc+0x6e>
 8008f7c:	2221      	movs	r2, #33	; 0x21
 8008f7e:	2104      	movs	r1, #4
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 fc94 	bl	80098ae <_calloc_r>
 8008f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f88:	60f0      	str	r0, [r6, #12]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e4      	bne.n	8008f5a <_Balloc+0x2e>
 8008f90:	2000      	movs	r0, #0
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	6802      	ldr	r2, [r0, #0]
 8008f96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fa0:	e7f7      	b.n	8008f92 <_Balloc+0x66>
 8008fa2:	bf00      	nop
 8008fa4:	0800ac86 	.word	0x0800ac86
 8008fa8:	0800ad84 	.word	0x0800ad84

08008fac <_Bfree>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	b976      	cbnz	r6, 8008fd4 <_Bfree+0x28>
 8008fb6:	2010      	movs	r0, #16
 8008fb8:	f7ff ff90 	bl	8008edc <malloc>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	6268      	str	r0, [r5, #36]	; 0x24
 8008fc0:	b920      	cbnz	r0, 8008fcc <_Bfree+0x20>
 8008fc2:	4b09      	ldr	r3, [pc, #36]	; (8008fe8 <_Bfree+0x3c>)
 8008fc4:	4809      	ldr	r0, [pc, #36]	; (8008fec <_Bfree+0x40>)
 8008fc6:	218a      	movs	r1, #138	; 0x8a
 8008fc8:	f000 ff00 	bl	8009dcc <__assert_func>
 8008fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fd0:	6006      	str	r6, [r0, #0]
 8008fd2:	60c6      	str	r6, [r0, #12]
 8008fd4:	b13c      	cbz	r4, 8008fe6 <_Bfree+0x3a>
 8008fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fd8:	6862      	ldr	r2, [r4, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fe0:	6021      	str	r1, [r4, #0]
 8008fe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	0800ac86 	.word	0x0800ac86
 8008fec:	0800ad84 	.word	0x0800ad84

08008ff0 <__multadd>:
 8008ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff4:	690d      	ldr	r5, [r1, #16]
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	461e      	mov	r6, r3
 8008ffc:	f101 0c14 	add.w	ip, r1, #20
 8009000:	2000      	movs	r0, #0
 8009002:	f8dc 3000 	ldr.w	r3, [ip]
 8009006:	b299      	uxth	r1, r3
 8009008:	fb02 6101 	mla	r1, r2, r1, r6
 800900c:	0c1e      	lsrs	r6, r3, #16
 800900e:	0c0b      	lsrs	r3, r1, #16
 8009010:	fb02 3306 	mla	r3, r2, r6, r3
 8009014:	b289      	uxth	r1, r1
 8009016:	3001      	adds	r0, #1
 8009018:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800901c:	4285      	cmp	r5, r0
 800901e:	f84c 1b04 	str.w	r1, [ip], #4
 8009022:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009026:	dcec      	bgt.n	8009002 <__multadd+0x12>
 8009028:	b30e      	cbz	r6, 800906e <__multadd+0x7e>
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	42ab      	cmp	r3, r5
 800902e:	dc19      	bgt.n	8009064 <__multadd+0x74>
 8009030:	6861      	ldr	r1, [r4, #4]
 8009032:	4638      	mov	r0, r7
 8009034:	3101      	adds	r1, #1
 8009036:	f7ff ff79 	bl	8008f2c <_Balloc>
 800903a:	4680      	mov	r8, r0
 800903c:	b928      	cbnz	r0, 800904a <__multadd+0x5a>
 800903e:	4602      	mov	r2, r0
 8009040:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <__multadd+0x84>)
 8009042:	480d      	ldr	r0, [pc, #52]	; (8009078 <__multadd+0x88>)
 8009044:	21b5      	movs	r1, #181	; 0xb5
 8009046:	f000 fec1 	bl	8009dcc <__assert_func>
 800904a:	6922      	ldr	r2, [r4, #16]
 800904c:	3202      	adds	r2, #2
 800904e:	f104 010c 	add.w	r1, r4, #12
 8009052:	0092      	lsls	r2, r2, #2
 8009054:	300c      	adds	r0, #12
 8009056:	f7ff ff5b 	bl	8008f10 <memcpy>
 800905a:	4621      	mov	r1, r4
 800905c:	4638      	mov	r0, r7
 800905e:	f7ff ffa5 	bl	8008fac <_Bfree>
 8009062:	4644      	mov	r4, r8
 8009064:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009068:	3501      	adds	r5, #1
 800906a:	615e      	str	r6, [r3, #20]
 800906c:	6125      	str	r5, [r4, #16]
 800906e:	4620      	mov	r0, r4
 8009070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009074:	0800acf8 	.word	0x0800acf8
 8009078:	0800ad84 	.word	0x0800ad84

0800907c <__s2b>:
 800907c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009080:	460c      	mov	r4, r1
 8009082:	4615      	mov	r5, r2
 8009084:	461f      	mov	r7, r3
 8009086:	2209      	movs	r2, #9
 8009088:	3308      	adds	r3, #8
 800908a:	4606      	mov	r6, r0
 800908c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009090:	2100      	movs	r1, #0
 8009092:	2201      	movs	r2, #1
 8009094:	429a      	cmp	r2, r3
 8009096:	db09      	blt.n	80090ac <__s2b+0x30>
 8009098:	4630      	mov	r0, r6
 800909a:	f7ff ff47 	bl	8008f2c <_Balloc>
 800909e:	b940      	cbnz	r0, 80090b2 <__s2b+0x36>
 80090a0:	4602      	mov	r2, r0
 80090a2:	4b19      	ldr	r3, [pc, #100]	; (8009108 <__s2b+0x8c>)
 80090a4:	4819      	ldr	r0, [pc, #100]	; (800910c <__s2b+0x90>)
 80090a6:	21ce      	movs	r1, #206	; 0xce
 80090a8:	f000 fe90 	bl	8009dcc <__assert_func>
 80090ac:	0052      	lsls	r2, r2, #1
 80090ae:	3101      	adds	r1, #1
 80090b0:	e7f0      	b.n	8009094 <__s2b+0x18>
 80090b2:	9b08      	ldr	r3, [sp, #32]
 80090b4:	6143      	str	r3, [r0, #20]
 80090b6:	2d09      	cmp	r5, #9
 80090b8:	f04f 0301 	mov.w	r3, #1
 80090bc:	6103      	str	r3, [r0, #16]
 80090be:	dd16      	ble.n	80090ee <__s2b+0x72>
 80090c0:	f104 0909 	add.w	r9, r4, #9
 80090c4:	46c8      	mov	r8, r9
 80090c6:	442c      	add	r4, r5
 80090c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80090cc:	4601      	mov	r1, r0
 80090ce:	3b30      	subs	r3, #48	; 0x30
 80090d0:	220a      	movs	r2, #10
 80090d2:	4630      	mov	r0, r6
 80090d4:	f7ff ff8c 	bl	8008ff0 <__multadd>
 80090d8:	45a0      	cmp	r8, r4
 80090da:	d1f5      	bne.n	80090c8 <__s2b+0x4c>
 80090dc:	f1a5 0408 	sub.w	r4, r5, #8
 80090e0:	444c      	add	r4, r9
 80090e2:	1b2d      	subs	r5, r5, r4
 80090e4:	1963      	adds	r3, r4, r5
 80090e6:	42bb      	cmp	r3, r7
 80090e8:	db04      	blt.n	80090f4 <__s2b+0x78>
 80090ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ee:	340a      	adds	r4, #10
 80090f0:	2509      	movs	r5, #9
 80090f2:	e7f6      	b.n	80090e2 <__s2b+0x66>
 80090f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80090f8:	4601      	mov	r1, r0
 80090fa:	3b30      	subs	r3, #48	; 0x30
 80090fc:	220a      	movs	r2, #10
 80090fe:	4630      	mov	r0, r6
 8009100:	f7ff ff76 	bl	8008ff0 <__multadd>
 8009104:	e7ee      	b.n	80090e4 <__s2b+0x68>
 8009106:	bf00      	nop
 8009108:	0800acf8 	.word	0x0800acf8
 800910c:	0800ad84 	.word	0x0800ad84

08009110 <__hi0bits>:
 8009110:	0c03      	lsrs	r3, r0, #16
 8009112:	041b      	lsls	r3, r3, #16
 8009114:	b9d3      	cbnz	r3, 800914c <__hi0bits+0x3c>
 8009116:	0400      	lsls	r0, r0, #16
 8009118:	2310      	movs	r3, #16
 800911a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800911e:	bf04      	itt	eq
 8009120:	0200      	lsleq	r0, r0, #8
 8009122:	3308      	addeq	r3, #8
 8009124:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009128:	bf04      	itt	eq
 800912a:	0100      	lsleq	r0, r0, #4
 800912c:	3304      	addeq	r3, #4
 800912e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009132:	bf04      	itt	eq
 8009134:	0080      	lsleq	r0, r0, #2
 8009136:	3302      	addeq	r3, #2
 8009138:	2800      	cmp	r0, #0
 800913a:	db05      	blt.n	8009148 <__hi0bits+0x38>
 800913c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009140:	f103 0301 	add.w	r3, r3, #1
 8009144:	bf08      	it	eq
 8009146:	2320      	moveq	r3, #32
 8009148:	4618      	mov	r0, r3
 800914a:	4770      	bx	lr
 800914c:	2300      	movs	r3, #0
 800914e:	e7e4      	b.n	800911a <__hi0bits+0xa>

08009150 <__lo0bits>:
 8009150:	6803      	ldr	r3, [r0, #0]
 8009152:	f013 0207 	ands.w	r2, r3, #7
 8009156:	4601      	mov	r1, r0
 8009158:	d00b      	beq.n	8009172 <__lo0bits+0x22>
 800915a:	07da      	lsls	r2, r3, #31
 800915c:	d423      	bmi.n	80091a6 <__lo0bits+0x56>
 800915e:	0798      	lsls	r0, r3, #30
 8009160:	bf49      	itett	mi
 8009162:	085b      	lsrmi	r3, r3, #1
 8009164:	089b      	lsrpl	r3, r3, #2
 8009166:	2001      	movmi	r0, #1
 8009168:	600b      	strmi	r3, [r1, #0]
 800916a:	bf5c      	itt	pl
 800916c:	600b      	strpl	r3, [r1, #0]
 800916e:	2002      	movpl	r0, #2
 8009170:	4770      	bx	lr
 8009172:	b298      	uxth	r0, r3
 8009174:	b9a8      	cbnz	r0, 80091a2 <__lo0bits+0x52>
 8009176:	0c1b      	lsrs	r3, r3, #16
 8009178:	2010      	movs	r0, #16
 800917a:	b2da      	uxtb	r2, r3
 800917c:	b90a      	cbnz	r2, 8009182 <__lo0bits+0x32>
 800917e:	3008      	adds	r0, #8
 8009180:	0a1b      	lsrs	r3, r3, #8
 8009182:	071a      	lsls	r2, r3, #28
 8009184:	bf04      	itt	eq
 8009186:	091b      	lsreq	r3, r3, #4
 8009188:	3004      	addeq	r0, #4
 800918a:	079a      	lsls	r2, r3, #30
 800918c:	bf04      	itt	eq
 800918e:	089b      	lsreq	r3, r3, #2
 8009190:	3002      	addeq	r0, #2
 8009192:	07da      	lsls	r2, r3, #31
 8009194:	d403      	bmi.n	800919e <__lo0bits+0x4e>
 8009196:	085b      	lsrs	r3, r3, #1
 8009198:	f100 0001 	add.w	r0, r0, #1
 800919c:	d005      	beq.n	80091aa <__lo0bits+0x5a>
 800919e:	600b      	str	r3, [r1, #0]
 80091a0:	4770      	bx	lr
 80091a2:	4610      	mov	r0, r2
 80091a4:	e7e9      	b.n	800917a <__lo0bits+0x2a>
 80091a6:	2000      	movs	r0, #0
 80091a8:	4770      	bx	lr
 80091aa:	2020      	movs	r0, #32
 80091ac:	4770      	bx	lr
	...

080091b0 <__i2b>:
 80091b0:	b510      	push	{r4, lr}
 80091b2:	460c      	mov	r4, r1
 80091b4:	2101      	movs	r1, #1
 80091b6:	f7ff feb9 	bl	8008f2c <_Balloc>
 80091ba:	4602      	mov	r2, r0
 80091bc:	b928      	cbnz	r0, 80091ca <__i2b+0x1a>
 80091be:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <__i2b+0x24>)
 80091c0:	4805      	ldr	r0, [pc, #20]	; (80091d8 <__i2b+0x28>)
 80091c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091c6:	f000 fe01 	bl	8009dcc <__assert_func>
 80091ca:	2301      	movs	r3, #1
 80091cc:	6144      	str	r4, [r0, #20]
 80091ce:	6103      	str	r3, [r0, #16]
 80091d0:	bd10      	pop	{r4, pc}
 80091d2:	bf00      	nop
 80091d4:	0800acf8 	.word	0x0800acf8
 80091d8:	0800ad84 	.word	0x0800ad84

080091dc <__multiply>:
 80091dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	4691      	mov	r9, r2
 80091e2:	690a      	ldr	r2, [r1, #16]
 80091e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	bfb8      	it	lt
 80091ec:	460b      	movlt	r3, r1
 80091ee:	460c      	mov	r4, r1
 80091f0:	bfbc      	itt	lt
 80091f2:	464c      	movlt	r4, r9
 80091f4:	4699      	movlt	r9, r3
 80091f6:	6927      	ldr	r7, [r4, #16]
 80091f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091fc:	68a3      	ldr	r3, [r4, #8]
 80091fe:	6861      	ldr	r1, [r4, #4]
 8009200:	eb07 060a 	add.w	r6, r7, sl
 8009204:	42b3      	cmp	r3, r6
 8009206:	b085      	sub	sp, #20
 8009208:	bfb8      	it	lt
 800920a:	3101      	addlt	r1, #1
 800920c:	f7ff fe8e 	bl	8008f2c <_Balloc>
 8009210:	b930      	cbnz	r0, 8009220 <__multiply+0x44>
 8009212:	4602      	mov	r2, r0
 8009214:	4b44      	ldr	r3, [pc, #272]	; (8009328 <__multiply+0x14c>)
 8009216:	4845      	ldr	r0, [pc, #276]	; (800932c <__multiply+0x150>)
 8009218:	f240 115d 	movw	r1, #349	; 0x15d
 800921c:	f000 fdd6 	bl	8009dcc <__assert_func>
 8009220:	f100 0514 	add.w	r5, r0, #20
 8009224:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009228:	462b      	mov	r3, r5
 800922a:	2200      	movs	r2, #0
 800922c:	4543      	cmp	r3, r8
 800922e:	d321      	bcc.n	8009274 <__multiply+0x98>
 8009230:	f104 0314 	add.w	r3, r4, #20
 8009234:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009238:	f109 0314 	add.w	r3, r9, #20
 800923c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009240:	9202      	str	r2, [sp, #8]
 8009242:	1b3a      	subs	r2, r7, r4
 8009244:	3a15      	subs	r2, #21
 8009246:	f022 0203 	bic.w	r2, r2, #3
 800924a:	3204      	adds	r2, #4
 800924c:	f104 0115 	add.w	r1, r4, #21
 8009250:	428f      	cmp	r7, r1
 8009252:	bf38      	it	cc
 8009254:	2204      	movcc	r2, #4
 8009256:	9201      	str	r2, [sp, #4]
 8009258:	9a02      	ldr	r2, [sp, #8]
 800925a:	9303      	str	r3, [sp, #12]
 800925c:	429a      	cmp	r2, r3
 800925e:	d80c      	bhi.n	800927a <__multiply+0x9e>
 8009260:	2e00      	cmp	r6, #0
 8009262:	dd03      	ble.n	800926c <__multiply+0x90>
 8009264:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009268:	2b00      	cmp	r3, #0
 800926a:	d05a      	beq.n	8009322 <__multiply+0x146>
 800926c:	6106      	str	r6, [r0, #16]
 800926e:	b005      	add	sp, #20
 8009270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009274:	f843 2b04 	str.w	r2, [r3], #4
 8009278:	e7d8      	b.n	800922c <__multiply+0x50>
 800927a:	f8b3 a000 	ldrh.w	sl, [r3]
 800927e:	f1ba 0f00 	cmp.w	sl, #0
 8009282:	d024      	beq.n	80092ce <__multiply+0xf2>
 8009284:	f104 0e14 	add.w	lr, r4, #20
 8009288:	46a9      	mov	r9, r5
 800928a:	f04f 0c00 	mov.w	ip, #0
 800928e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009292:	f8d9 1000 	ldr.w	r1, [r9]
 8009296:	fa1f fb82 	uxth.w	fp, r2
 800929a:	b289      	uxth	r1, r1
 800929c:	fb0a 110b 	mla	r1, sl, fp, r1
 80092a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80092a4:	f8d9 2000 	ldr.w	r2, [r9]
 80092a8:	4461      	add	r1, ip
 80092aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80092b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80092b6:	b289      	uxth	r1, r1
 80092b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092bc:	4577      	cmp	r7, lr
 80092be:	f849 1b04 	str.w	r1, [r9], #4
 80092c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092c6:	d8e2      	bhi.n	800928e <__multiply+0xb2>
 80092c8:	9a01      	ldr	r2, [sp, #4]
 80092ca:	f845 c002 	str.w	ip, [r5, r2]
 80092ce:	9a03      	ldr	r2, [sp, #12]
 80092d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092d4:	3304      	adds	r3, #4
 80092d6:	f1b9 0f00 	cmp.w	r9, #0
 80092da:	d020      	beq.n	800931e <__multiply+0x142>
 80092dc:	6829      	ldr	r1, [r5, #0]
 80092de:	f104 0c14 	add.w	ip, r4, #20
 80092e2:	46ae      	mov	lr, r5
 80092e4:	f04f 0a00 	mov.w	sl, #0
 80092e8:	f8bc b000 	ldrh.w	fp, [ip]
 80092ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092f0:	fb09 220b 	mla	r2, r9, fp, r2
 80092f4:	4492      	add	sl, r2
 80092f6:	b289      	uxth	r1, r1
 80092f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80092fc:	f84e 1b04 	str.w	r1, [lr], #4
 8009300:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009304:	f8be 1000 	ldrh.w	r1, [lr]
 8009308:	0c12      	lsrs	r2, r2, #16
 800930a:	fb09 1102 	mla	r1, r9, r2, r1
 800930e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009312:	4567      	cmp	r7, ip
 8009314:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009318:	d8e6      	bhi.n	80092e8 <__multiply+0x10c>
 800931a:	9a01      	ldr	r2, [sp, #4]
 800931c:	50a9      	str	r1, [r5, r2]
 800931e:	3504      	adds	r5, #4
 8009320:	e79a      	b.n	8009258 <__multiply+0x7c>
 8009322:	3e01      	subs	r6, #1
 8009324:	e79c      	b.n	8009260 <__multiply+0x84>
 8009326:	bf00      	nop
 8009328:	0800acf8 	.word	0x0800acf8
 800932c:	0800ad84 	.word	0x0800ad84

08009330 <__pow5mult>:
 8009330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009334:	4615      	mov	r5, r2
 8009336:	f012 0203 	ands.w	r2, r2, #3
 800933a:	4606      	mov	r6, r0
 800933c:	460f      	mov	r7, r1
 800933e:	d007      	beq.n	8009350 <__pow5mult+0x20>
 8009340:	4c25      	ldr	r4, [pc, #148]	; (80093d8 <__pow5mult+0xa8>)
 8009342:	3a01      	subs	r2, #1
 8009344:	2300      	movs	r3, #0
 8009346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800934a:	f7ff fe51 	bl	8008ff0 <__multadd>
 800934e:	4607      	mov	r7, r0
 8009350:	10ad      	asrs	r5, r5, #2
 8009352:	d03d      	beq.n	80093d0 <__pow5mult+0xa0>
 8009354:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009356:	b97c      	cbnz	r4, 8009378 <__pow5mult+0x48>
 8009358:	2010      	movs	r0, #16
 800935a:	f7ff fdbf 	bl	8008edc <malloc>
 800935e:	4602      	mov	r2, r0
 8009360:	6270      	str	r0, [r6, #36]	; 0x24
 8009362:	b928      	cbnz	r0, 8009370 <__pow5mult+0x40>
 8009364:	4b1d      	ldr	r3, [pc, #116]	; (80093dc <__pow5mult+0xac>)
 8009366:	481e      	ldr	r0, [pc, #120]	; (80093e0 <__pow5mult+0xb0>)
 8009368:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800936c:	f000 fd2e 	bl	8009dcc <__assert_func>
 8009370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009374:	6004      	str	r4, [r0, #0]
 8009376:	60c4      	str	r4, [r0, #12]
 8009378:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800937c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009380:	b94c      	cbnz	r4, 8009396 <__pow5mult+0x66>
 8009382:	f240 2171 	movw	r1, #625	; 0x271
 8009386:	4630      	mov	r0, r6
 8009388:	f7ff ff12 	bl	80091b0 <__i2b>
 800938c:	2300      	movs	r3, #0
 800938e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009392:	4604      	mov	r4, r0
 8009394:	6003      	str	r3, [r0, #0]
 8009396:	f04f 0900 	mov.w	r9, #0
 800939a:	07eb      	lsls	r3, r5, #31
 800939c:	d50a      	bpl.n	80093b4 <__pow5mult+0x84>
 800939e:	4639      	mov	r1, r7
 80093a0:	4622      	mov	r2, r4
 80093a2:	4630      	mov	r0, r6
 80093a4:	f7ff ff1a 	bl	80091dc <__multiply>
 80093a8:	4639      	mov	r1, r7
 80093aa:	4680      	mov	r8, r0
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7ff fdfd 	bl	8008fac <_Bfree>
 80093b2:	4647      	mov	r7, r8
 80093b4:	106d      	asrs	r5, r5, #1
 80093b6:	d00b      	beq.n	80093d0 <__pow5mult+0xa0>
 80093b8:	6820      	ldr	r0, [r4, #0]
 80093ba:	b938      	cbnz	r0, 80093cc <__pow5mult+0x9c>
 80093bc:	4622      	mov	r2, r4
 80093be:	4621      	mov	r1, r4
 80093c0:	4630      	mov	r0, r6
 80093c2:	f7ff ff0b 	bl	80091dc <__multiply>
 80093c6:	6020      	str	r0, [r4, #0]
 80093c8:	f8c0 9000 	str.w	r9, [r0]
 80093cc:	4604      	mov	r4, r0
 80093ce:	e7e4      	b.n	800939a <__pow5mult+0x6a>
 80093d0:	4638      	mov	r0, r7
 80093d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093d6:	bf00      	nop
 80093d8:	0800aed0 	.word	0x0800aed0
 80093dc:	0800ac86 	.word	0x0800ac86
 80093e0:	0800ad84 	.word	0x0800ad84

080093e4 <__lshift>:
 80093e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e8:	460c      	mov	r4, r1
 80093ea:	6849      	ldr	r1, [r1, #4]
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093f2:	68a3      	ldr	r3, [r4, #8]
 80093f4:	4607      	mov	r7, r0
 80093f6:	4691      	mov	r9, r2
 80093f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093fc:	f108 0601 	add.w	r6, r8, #1
 8009400:	42b3      	cmp	r3, r6
 8009402:	db0b      	blt.n	800941c <__lshift+0x38>
 8009404:	4638      	mov	r0, r7
 8009406:	f7ff fd91 	bl	8008f2c <_Balloc>
 800940a:	4605      	mov	r5, r0
 800940c:	b948      	cbnz	r0, 8009422 <__lshift+0x3e>
 800940e:	4602      	mov	r2, r0
 8009410:	4b2a      	ldr	r3, [pc, #168]	; (80094bc <__lshift+0xd8>)
 8009412:	482b      	ldr	r0, [pc, #172]	; (80094c0 <__lshift+0xdc>)
 8009414:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009418:	f000 fcd8 	bl	8009dcc <__assert_func>
 800941c:	3101      	adds	r1, #1
 800941e:	005b      	lsls	r3, r3, #1
 8009420:	e7ee      	b.n	8009400 <__lshift+0x1c>
 8009422:	2300      	movs	r3, #0
 8009424:	f100 0114 	add.w	r1, r0, #20
 8009428:	f100 0210 	add.w	r2, r0, #16
 800942c:	4618      	mov	r0, r3
 800942e:	4553      	cmp	r3, sl
 8009430:	db37      	blt.n	80094a2 <__lshift+0xbe>
 8009432:	6920      	ldr	r0, [r4, #16]
 8009434:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009438:	f104 0314 	add.w	r3, r4, #20
 800943c:	f019 091f 	ands.w	r9, r9, #31
 8009440:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009444:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009448:	d02f      	beq.n	80094aa <__lshift+0xc6>
 800944a:	f1c9 0e20 	rsb	lr, r9, #32
 800944e:	468a      	mov	sl, r1
 8009450:	f04f 0c00 	mov.w	ip, #0
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	fa02 f209 	lsl.w	r2, r2, r9
 800945a:	ea42 020c 	orr.w	r2, r2, ip
 800945e:	f84a 2b04 	str.w	r2, [sl], #4
 8009462:	f853 2b04 	ldr.w	r2, [r3], #4
 8009466:	4298      	cmp	r0, r3
 8009468:	fa22 fc0e 	lsr.w	ip, r2, lr
 800946c:	d8f2      	bhi.n	8009454 <__lshift+0x70>
 800946e:	1b03      	subs	r3, r0, r4
 8009470:	3b15      	subs	r3, #21
 8009472:	f023 0303 	bic.w	r3, r3, #3
 8009476:	3304      	adds	r3, #4
 8009478:	f104 0215 	add.w	r2, r4, #21
 800947c:	4290      	cmp	r0, r2
 800947e:	bf38      	it	cc
 8009480:	2304      	movcc	r3, #4
 8009482:	f841 c003 	str.w	ip, [r1, r3]
 8009486:	f1bc 0f00 	cmp.w	ip, #0
 800948a:	d001      	beq.n	8009490 <__lshift+0xac>
 800948c:	f108 0602 	add.w	r6, r8, #2
 8009490:	3e01      	subs	r6, #1
 8009492:	4638      	mov	r0, r7
 8009494:	612e      	str	r6, [r5, #16]
 8009496:	4621      	mov	r1, r4
 8009498:	f7ff fd88 	bl	8008fac <_Bfree>
 800949c:	4628      	mov	r0, r5
 800949e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80094a6:	3301      	adds	r3, #1
 80094a8:	e7c1      	b.n	800942e <__lshift+0x4a>
 80094aa:	3904      	subs	r1, #4
 80094ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80094b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80094b4:	4298      	cmp	r0, r3
 80094b6:	d8f9      	bhi.n	80094ac <__lshift+0xc8>
 80094b8:	e7ea      	b.n	8009490 <__lshift+0xac>
 80094ba:	bf00      	nop
 80094bc:	0800acf8 	.word	0x0800acf8
 80094c0:	0800ad84 	.word	0x0800ad84

080094c4 <__mcmp>:
 80094c4:	b530      	push	{r4, r5, lr}
 80094c6:	6902      	ldr	r2, [r0, #16]
 80094c8:	690c      	ldr	r4, [r1, #16]
 80094ca:	1b12      	subs	r2, r2, r4
 80094cc:	d10e      	bne.n	80094ec <__mcmp+0x28>
 80094ce:	f100 0314 	add.w	r3, r0, #20
 80094d2:	3114      	adds	r1, #20
 80094d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80094e4:	42a5      	cmp	r5, r4
 80094e6:	d003      	beq.n	80094f0 <__mcmp+0x2c>
 80094e8:	d305      	bcc.n	80094f6 <__mcmp+0x32>
 80094ea:	2201      	movs	r2, #1
 80094ec:	4610      	mov	r0, r2
 80094ee:	bd30      	pop	{r4, r5, pc}
 80094f0:	4283      	cmp	r3, r0
 80094f2:	d3f3      	bcc.n	80094dc <__mcmp+0x18>
 80094f4:	e7fa      	b.n	80094ec <__mcmp+0x28>
 80094f6:	f04f 32ff 	mov.w	r2, #4294967295
 80094fa:	e7f7      	b.n	80094ec <__mcmp+0x28>

080094fc <__mdiff>:
 80094fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	460c      	mov	r4, r1
 8009502:	4606      	mov	r6, r0
 8009504:	4611      	mov	r1, r2
 8009506:	4620      	mov	r0, r4
 8009508:	4690      	mov	r8, r2
 800950a:	f7ff ffdb 	bl	80094c4 <__mcmp>
 800950e:	1e05      	subs	r5, r0, #0
 8009510:	d110      	bne.n	8009534 <__mdiff+0x38>
 8009512:	4629      	mov	r1, r5
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff fd09 	bl	8008f2c <_Balloc>
 800951a:	b930      	cbnz	r0, 800952a <__mdiff+0x2e>
 800951c:	4b3a      	ldr	r3, [pc, #232]	; (8009608 <__mdiff+0x10c>)
 800951e:	4602      	mov	r2, r0
 8009520:	f240 2132 	movw	r1, #562	; 0x232
 8009524:	4839      	ldr	r0, [pc, #228]	; (800960c <__mdiff+0x110>)
 8009526:	f000 fc51 	bl	8009dcc <__assert_func>
 800952a:	2301      	movs	r3, #1
 800952c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009534:	bfa4      	itt	ge
 8009536:	4643      	movge	r3, r8
 8009538:	46a0      	movge	r8, r4
 800953a:	4630      	mov	r0, r6
 800953c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009540:	bfa6      	itte	ge
 8009542:	461c      	movge	r4, r3
 8009544:	2500      	movge	r5, #0
 8009546:	2501      	movlt	r5, #1
 8009548:	f7ff fcf0 	bl	8008f2c <_Balloc>
 800954c:	b920      	cbnz	r0, 8009558 <__mdiff+0x5c>
 800954e:	4b2e      	ldr	r3, [pc, #184]	; (8009608 <__mdiff+0x10c>)
 8009550:	4602      	mov	r2, r0
 8009552:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009556:	e7e5      	b.n	8009524 <__mdiff+0x28>
 8009558:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800955c:	6926      	ldr	r6, [r4, #16]
 800955e:	60c5      	str	r5, [r0, #12]
 8009560:	f104 0914 	add.w	r9, r4, #20
 8009564:	f108 0514 	add.w	r5, r8, #20
 8009568:	f100 0e14 	add.w	lr, r0, #20
 800956c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009570:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009574:	f108 0210 	add.w	r2, r8, #16
 8009578:	46f2      	mov	sl, lr
 800957a:	2100      	movs	r1, #0
 800957c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009580:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009584:	fa1f f883 	uxth.w	r8, r3
 8009588:	fa11 f18b 	uxtah	r1, r1, fp
 800958c:	0c1b      	lsrs	r3, r3, #16
 800958e:	eba1 0808 	sub.w	r8, r1, r8
 8009592:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009596:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800959a:	fa1f f888 	uxth.w	r8, r8
 800959e:	1419      	asrs	r1, r3, #16
 80095a0:	454e      	cmp	r6, r9
 80095a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80095a6:	f84a 3b04 	str.w	r3, [sl], #4
 80095aa:	d8e7      	bhi.n	800957c <__mdiff+0x80>
 80095ac:	1b33      	subs	r3, r6, r4
 80095ae:	3b15      	subs	r3, #21
 80095b0:	f023 0303 	bic.w	r3, r3, #3
 80095b4:	3304      	adds	r3, #4
 80095b6:	3415      	adds	r4, #21
 80095b8:	42a6      	cmp	r6, r4
 80095ba:	bf38      	it	cc
 80095bc:	2304      	movcc	r3, #4
 80095be:	441d      	add	r5, r3
 80095c0:	4473      	add	r3, lr
 80095c2:	469e      	mov	lr, r3
 80095c4:	462e      	mov	r6, r5
 80095c6:	4566      	cmp	r6, ip
 80095c8:	d30e      	bcc.n	80095e8 <__mdiff+0xec>
 80095ca:	f10c 0203 	add.w	r2, ip, #3
 80095ce:	1b52      	subs	r2, r2, r5
 80095d0:	f022 0203 	bic.w	r2, r2, #3
 80095d4:	3d03      	subs	r5, #3
 80095d6:	45ac      	cmp	ip, r5
 80095d8:	bf38      	it	cc
 80095da:	2200      	movcc	r2, #0
 80095dc:	441a      	add	r2, r3
 80095de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80095e2:	b17b      	cbz	r3, 8009604 <__mdiff+0x108>
 80095e4:	6107      	str	r7, [r0, #16]
 80095e6:	e7a3      	b.n	8009530 <__mdiff+0x34>
 80095e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80095ec:	fa11 f288 	uxtah	r2, r1, r8
 80095f0:	1414      	asrs	r4, r2, #16
 80095f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095f6:	b292      	uxth	r2, r2
 80095f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80095fc:	f84e 2b04 	str.w	r2, [lr], #4
 8009600:	1421      	asrs	r1, r4, #16
 8009602:	e7e0      	b.n	80095c6 <__mdiff+0xca>
 8009604:	3f01      	subs	r7, #1
 8009606:	e7ea      	b.n	80095de <__mdiff+0xe2>
 8009608:	0800acf8 	.word	0x0800acf8
 800960c:	0800ad84 	.word	0x0800ad84

08009610 <__ulp>:
 8009610:	b082      	sub	sp, #8
 8009612:	ed8d 0b00 	vstr	d0, [sp]
 8009616:	9b01      	ldr	r3, [sp, #4]
 8009618:	4912      	ldr	r1, [pc, #72]	; (8009664 <__ulp+0x54>)
 800961a:	4019      	ands	r1, r3
 800961c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009620:	2900      	cmp	r1, #0
 8009622:	dd05      	ble.n	8009630 <__ulp+0x20>
 8009624:	2200      	movs	r2, #0
 8009626:	460b      	mov	r3, r1
 8009628:	ec43 2b10 	vmov	d0, r2, r3
 800962c:	b002      	add	sp, #8
 800962e:	4770      	bx	lr
 8009630:	4249      	negs	r1, r1
 8009632:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009636:	ea4f 5021 	mov.w	r0, r1, asr #20
 800963a:	f04f 0200 	mov.w	r2, #0
 800963e:	f04f 0300 	mov.w	r3, #0
 8009642:	da04      	bge.n	800964e <__ulp+0x3e>
 8009644:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009648:	fa41 f300 	asr.w	r3, r1, r0
 800964c:	e7ec      	b.n	8009628 <__ulp+0x18>
 800964e:	f1a0 0114 	sub.w	r1, r0, #20
 8009652:	291e      	cmp	r1, #30
 8009654:	bfda      	itte	le
 8009656:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800965a:	fa20 f101 	lsrle.w	r1, r0, r1
 800965e:	2101      	movgt	r1, #1
 8009660:	460a      	mov	r2, r1
 8009662:	e7e1      	b.n	8009628 <__ulp+0x18>
 8009664:	7ff00000 	.word	0x7ff00000

08009668 <__b2d>:
 8009668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966a:	6905      	ldr	r5, [r0, #16]
 800966c:	f100 0714 	add.w	r7, r0, #20
 8009670:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009674:	1f2e      	subs	r6, r5, #4
 8009676:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800967a:	4620      	mov	r0, r4
 800967c:	f7ff fd48 	bl	8009110 <__hi0bits>
 8009680:	f1c0 0320 	rsb	r3, r0, #32
 8009684:	280a      	cmp	r0, #10
 8009686:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009704 <__b2d+0x9c>
 800968a:	600b      	str	r3, [r1, #0]
 800968c:	dc14      	bgt.n	80096b8 <__b2d+0x50>
 800968e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009692:	fa24 f10e 	lsr.w	r1, r4, lr
 8009696:	42b7      	cmp	r7, r6
 8009698:	ea41 030c 	orr.w	r3, r1, ip
 800969c:	bf34      	ite	cc
 800969e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80096a2:	2100      	movcs	r1, #0
 80096a4:	3015      	adds	r0, #21
 80096a6:	fa04 f000 	lsl.w	r0, r4, r0
 80096aa:	fa21 f10e 	lsr.w	r1, r1, lr
 80096ae:	ea40 0201 	orr.w	r2, r0, r1
 80096b2:	ec43 2b10 	vmov	d0, r2, r3
 80096b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b8:	42b7      	cmp	r7, r6
 80096ba:	bf3a      	itte	cc
 80096bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80096c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80096c4:	2100      	movcs	r1, #0
 80096c6:	380b      	subs	r0, #11
 80096c8:	d017      	beq.n	80096fa <__b2d+0x92>
 80096ca:	f1c0 0c20 	rsb	ip, r0, #32
 80096ce:	fa04 f500 	lsl.w	r5, r4, r0
 80096d2:	42be      	cmp	r6, r7
 80096d4:	fa21 f40c 	lsr.w	r4, r1, ip
 80096d8:	ea45 0504 	orr.w	r5, r5, r4
 80096dc:	bf8c      	ite	hi
 80096de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80096e2:	2400      	movls	r4, #0
 80096e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80096e8:	fa01 f000 	lsl.w	r0, r1, r0
 80096ec:	fa24 f40c 	lsr.w	r4, r4, ip
 80096f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80096f4:	ea40 0204 	orr.w	r2, r0, r4
 80096f8:	e7db      	b.n	80096b2 <__b2d+0x4a>
 80096fa:	ea44 030c 	orr.w	r3, r4, ip
 80096fe:	460a      	mov	r2, r1
 8009700:	e7d7      	b.n	80096b2 <__b2d+0x4a>
 8009702:	bf00      	nop
 8009704:	3ff00000 	.word	0x3ff00000

08009708 <__d2b>:
 8009708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800970c:	4689      	mov	r9, r1
 800970e:	2101      	movs	r1, #1
 8009710:	ec57 6b10 	vmov	r6, r7, d0
 8009714:	4690      	mov	r8, r2
 8009716:	f7ff fc09 	bl	8008f2c <_Balloc>
 800971a:	4604      	mov	r4, r0
 800971c:	b930      	cbnz	r0, 800972c <__d2b+0x24>
 800971e:	4602      	mov	r2, r0
 8009720:	4b25      	ldr	r3, [pc, #148]	; (80097b8 <__d2b+0xb0>)
 8009722:	4826      	ldr	r0, [pc, #152]	; (80097bc <__d2b+0xb4>)
 8009724:	f240 310a 	movw	r1, #778	; 0x30a
 8009728:	f000 fb50 	bl	8009dcc <__assert_func>
 800972c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009734:	bb35      	cbnz	r5, 8009784 <__d2b+0x7c>
 8009736:	2e00      	cmp	r6, #0
 8009738:	9301      	str	r3, [sp, #4]
 800973a:	d028      	beq.n	800978e <__d2b+0x86>
 800973c:	4668      	mov	r0, sp
 800973e:	9600      	str	r6, [sp, #0]
 8009740:	f7ff fd06 	bl	8009150 <__lo0bits>
 8009744:	9900      	ldr	r1, [sp, #0]
 8009746:	b300      	cbz	r0, 800978a <__d2b+0x82>
 8009748:	9a01      	ldr	r2, [sp, #4]
 800974a:	f1c0 0320 	rsb	r3, r0, #32
 800974e:	fa02 f303 	lsl.w	r3, r2, r3
 8009752:	430b      	orrs	r3, r1
 8009754:	40c2      	lsrs	r2, r0
 8009756:	6163      	str	r3, [r4, #20]
 8009758:	9201      	str	r2, [sp, #4]
 800975a:	9b01      	ldr	r3, [sp, #4]
 800975c:	61a3      	str	r3, [r4, #24]
 800975e:	2b00      	cmp	r3, #0
 8009760:	bf14      	ite	ne
 8009762:	2202      	movne	r2, #2
 8009764:	2201      	moveq	r2, #1
 8009766:	6122      	str	r2, [r4, #16]
 8009768:	b1d5      	cbz	r5, 80097a0 <__d2b+0x98>
 800976a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800976e:	4405      	add	r5, r0
 8009770:	f8c9 5000 	str.w	r5, [r9]
 8009774:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009778:	f8c8 0000 	str.w	r0, [r8]
 800977c:	4620      	mov	r0, r4
 800977e:	b003      	add	sp, #12
 8009780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009788:	e7d5      	b.n	8009736 <__d2b+0x2e>
 800978a:	6161      	str	r1, [r4, #20]
 800978c:	e7e5      	b.n	800975a <__d2b+0x52>
 800978e:	a801      	add	r0, sp, #4
 8009790:	f7ff fcde 	bl	8009150 <__lo0bits>
 8009794:	9b01      	ldr	r3, [sp, #4]
 8009796:	6163      	str	r3, [r4, #20]
 8009798:	2201      	movs	r2, #1
 800979a:	6122      	str	r2, [r4, #16]
 800979c:	3020      	adds	r0, #32
 800979e:	e7e3      	b.n	8009768 <__d2b+0x60>
 80097a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097a8:	f8c9 0000 	str.w	r0, [r9]
 80097ac:	6918      	ldr	r0, [r3, #16]
 80097ae:	f7ff fcaf 	bl	8009110 <__hi0bits>
 80097b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097b6:	e7df      	b.n	8009778 <__d2b+0x70>
 80097b8:	0800acf8 	.word	0x0800acf8
 80097bc:	0800ad84 	.word	0x0800ad84

080097c0 <__ratio>:
 80097c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	4688      	mov	r8, r1
 80097c6:	4669      	mov	r1, sp
 80097c8:	4681      	mov	r9, r0
 80097ca:	f7ff ff4d 	bl	8009668 <__b2d>
 80097ce:	a901      	add	r1, sp, #4
 80097d0:	4640      	mov	r0, r8
 80097d2:	ec55 4b10 	vmov	r4, r5, d0
 80097d6:	f7ff ff47 	bl	8009668 <__b2d>
 80097da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80097e2:	eba3 0c02 	sub.w	ip, r3, r2
 80097e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80097ea:	1a9b      	subs	r3, r3, r2
 80097ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80097f0:	ec51 0b10 	vmov	r0, r1, d0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	bfd6      	itet	le
 80097f8:	460a      	movle	r2, r1
 80097fa:	462a      	movgt	r2, r5
 80097fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009800:	468b      	mov	fp, r1
 8009802:	462f      	mov	r7, r5
 8009804:	bfd4      	ite	le
 8009806:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800980a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800980e:	4620      	mov	r0, r4
 8009810:	ee10 2a10 	vmov	r2, s0
 8009814:	465b      	mov	r3, fp
 8009816:	4639      	mov	r1, r7
 8009818:	f7f7 f840 	bl	800089c <__aeabi_ddiv>
 800981c:	ec41 0b10 	vmov	d0, r0, r1
 8009820:	b003      	add	sp, #12
 8009822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009826 <__copybits>:
 8009826:	3901      	subs	r1, #1
 8009828:	b570      	push	{r4, r5, r6, lr}
 800982a:	1149      	asrs	r1, r1, #5
 800982c:	6914      	ldr	r4, [r2, #16]
 800982e:	3101      	adds	r1, #1
 8009830:	f102 0314 	add.w	r3, r2, #20
 8009834:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009838:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800983c:	1f05      	subs	r5, r0, #4
 800983e:	42a3      	cmp	r3, r4
 8009840:	d30c      	bcc.n	800985c <__copybits+0x36>
 8009842:	1aa3      	subs	r3, r4, r2
 8009844:	3b11      	subs	r3, #17
 8009846:	f023 0303 	bic.w	r3, r3, #3
 800984a:	3211      	adds	r2, #17
 800984c:	42a2      	cmp	r2, r4
 800984e:	bf88      	it	hi
 8009850:	2300      	movhi	r3, #0
 8009852:	4418      	add	r0, r3
 8009854:	2300      	movs	r3, #0
 8009856:	4288      	cmp	r0, r1
 8009858:	d305      	bcc.n	8009866 <__copybits+0x40>
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009860:	f845 6f04 	str.w	r6, [r5, #4]!
 8009864:	e7eb      	b.n	800983e <__copybits+0x18>
 8009866:	f840 3b04 	str.w	r3, [r0], #4
 800986a:	e7f4      	b.n	8009856 <__copybits+0x30>

0800986c <__any_on>:
 800986c:	f100 0214 	add.w	r2, r0, #20
 8009870:	6900      	ldr	r0, [r0, #16]
 8009872:	114b      	asrs	r3, r1, #5
 8009874:	4298      	cmp	r0, r3
 8009876:	b510      	push	{r4, lr}
 8009878:	db11      	blt.n	800989e <__any_on+0x32>
 800987a:	dd0a      	ble.n	8009892 <__any_on+0x26>
 800987c:	f011 011f 	ands.w	r1, r1, #31
 8009880:	d007      	beq.n	8009892 <__any_on+0x26>
 8009882:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009886:	fa24 f001 	lsr.w	r0, r4, r1
 800988a:	fa00 f101 	lsl.w	r1, r0, r1
 800988e:	428c      	cmp	r4, r1
 8009890:	d10b      	bne.n	80098aa <__any_on+0x3e>
 8009892:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009896:	4293      	cmp	r3, r2
 8009898:	d803      	bhi.n	80098a2 <__any_on+0x36>
 800989a:	2000      	movs	r0, #0
 800989c:	bd10      	pop	{r4, pc}
 800989e:	4603      	mov	r3, r0
 80098a0:	e7f7      	b.n	8009892 <__any_on+0x26>
 80098a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098a6:	2900      	cmp	r1, #0
 80098a8:	d0f5      	beq.n	8009896 <__any_on+0x2a>
 80098aa:	2001      	movs	r0, #1
 80098ac:	e7f6      	b.n	800989c <__any_on+0x30>

080098ae <_calloc_r>:
 80098ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098b0:	fba1 2402 	umull	r2, r4, r1, r2
 80098b4:	b94c      	cbnz	r4, 80098ca <_calloc_r+0x1c>
 80098b6:	4611      	mov	r1, r2
 80098b8:	9201      	str	r2, [sp, #4]
 80098ba:	f000 f87b 	bl	80099b4 <_malloc_r>
 80098be:	9a01      	ldr	r2, [sp, #4]
 80098c0:	4605      	mov	r5, r0
 80098c2:	b930      	cbnz	r0, 80098d2 <_calloc_r+0x24>
 80098c4:	4628      	mov	r0, r5
 80098c6:	b003      	add	sp, #12
 80098c8:	bd30      	pop	{r4, r5, pc}
 80098ca:	220c      	movs	r2, #12
 80098cc:	6002      	str	r2, [r0, #0]
 80098ce:	2500      	movs	r5, #0
 80098d0:	e7f8      	b.n	80098c4 <_calloc_r+0x16>
 80098d2:	4621      	mov	r1, r4
 80098d4:	f7fc fbbe 	bl	8006054 <memset>
 80098d8:	e7f4      	b.n	80098c4 <_calloc_r+0x16>
	...

080098dc <_free_r>:
 80098dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098de:	2900      	cmp	r1, #0
 80098e0:	d044      	beq.n	800996c <_free_r+0x90>
 80098e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098e6:	9001      	str	r0, [sp, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f1a1 0404 	sub.w	r4, r1, #4
 80098ee:	bfb8      	it	lt
 80098f0:	18e4      	addlt	r4, r4, r3
 80098f2:	f000 fab5 	bl	8009e60 <__malloc_lock>
 80098f6:	4a1e      	ldr	r2, [pc, #120]	; (8009970 <_free_r+0x94>)
 80098f8:	9801      	ldr	r0, [sp, #4]
 80098fa:	6813      	ldr	r3, [r2, #0]
 80098fc:	b933      	cbnz	r3, 800990c <_free_r+0x30>
 80098fe:	6063      	str	r3, [r4, #4]
 8009900:	6014      	str	r4, [r2, #0]
 8009902:	b003      	add	sp, #12
 8009904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009908:	f000 bab0 	b.w	8009e6c <__malloc_unlock>
 800990c:	42a3      	cmp	r3, r4
 800990e:	d908      	bls.n	8009922 <_free_r+0x46>
 8009910:	6825      	ldr	r5, [r4, #0]
 8009912:	1961      	adds	r1, r4, r5
 8009914:	428b      	cmp	r3, r1
 8009916:	bf01      	itttt	eq
 8009918:	6819      	ldreq	r1, [r3, #0]
 800991a:	685b      	ldreq	r3, [r3, #4]
 800991c:	1949      	addeq	r1, r1, r5
 800991e:	6021      	streq	r1, [r4, #0]
 8009920:	e7ed      	b.n	80098fe <_free_r+0x22>
 8009922:	461a      	mov	r2, r3
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	b10b      	cbz	r3, 800992c <_free_r+0x50>
 8009928:	42a3      	cmp	r3, r4
 800992a:	d9fa      	bls.n	8009922 <_free_r+0x46>
 800992c:	6811      	ldr	r1, [r2, #0]
 800992e:	1855      	adds	r5, r2, r1
 8009930:	42a5      	cmp	r5, r4
 8009932:	d10b      	bne.n	800994c <_free_r+0x70>
 8009934:	6824      	ldr	r4, [r4, #0]
 8009936:	4421      	add	r1, r4
 8009938:	1854      	adds	r4, r2, r1
 800993a:	42a3      	cmp	r3, r4
 800993c:	6011      	str	r1, [r2, #0]
 800993e:	d1e0      	bne.n	8009902 <_free_r+0x26>
 8009940:	681c      	ldr	r4, [r3, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	6053      	str	r3, [r2, #4]
 8009946:	4421      	add	r1, r4
 8009948:	6011      	str	r1, [r2, #0]
 800994a:	e7da      	b.n	8009902 <_free_r+0x26>
 800994c:	d902      	bls.n	8009954 <_free_r+0x78>
 800994e:	230c      	movs	r3, #12
 8009950:	6003      	str	r3, [r0, #0]
 8009952:	e7d6      	b.n	8009902 <_free_r+0x26>
 8009954:	6825      	ldr	r5, [r4, #0]
 8009956:	1961      	adds	r1, r4, r5
 8009958:	428b      	cmp	r3, r1
 800995a:	bf04      	itt	eq
 800995c:	6819      	ldreq	r1, [r3, #0]
 800995e:	685b      	ldreq	r3, [r3, #4]
 8009960:	6063      	str	r3, [r4, #4]
 8009962:	bf04      	itt	eq
 8009964:	1949      	addeq	r1, r1, r5
 8009966:	6021      	streq	r1, [r4, #0]
 8009968:	6054      	str	r4, [r2, #4]
 800996a:	e7ca      	b.n	8009902 <_free_r+0x26>
 800996c:	b003      	add	sp, #12
 800996e:	bd30      	pop	{r4, r5, pc}
 8009970:	20000738 	.word	0x20000738

08009974 <sbrk_aligned>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	4e0e      	ldr	r6, [pc, #56]	; (80099b0 <sbrk_aligned+0x3c>)
 8009978:	460c      	mov	r4, r1
 800997a:	6831      	ldr	r1, [r6, #0]
 800997c:	4605      	mov	r5, r0
 800997e:	b911      	cbnz	r1, 8009986 <sbrk_aligned+0x12>
 8009980:	f000 f9f2 	bl	8009d68 <_sbrk_r>
 8009984:	6030      	str	r0, [r6, #0]
 8009986:	4621      	mov	r1, r4
 8009988:	4628      	mov	r0, r5
 800998a:	f000 f9ed 	bl	8009d68 <_sbrk_r>
 800998e:	1c43      	adds	r3, r0, #1
 8009990:	d00a      	beq.n	80099a8 <sbrk_aligned+0x34>
 8009992:	1cc4      	adds	r4, r0, #3
 8009994:	f024 0403 	bic.w	r4, r4, #3
 8009998:	42a0      	cmp	r0, r4
 800999a:	d007      	beq.n	80099ac <sbrk_aligned+0x38>
 800999c:	1a21      	subs	r1, r4, r0
 800999e:	4628      	mov	r0, r5
 80099a0:	f000 f9e2 	bl	8009d68 <_sbrk_r>
 80099a4:	3001      	adds	r0, #1
 80099a6:	d101      	bne.n	80099ac <sbrk_aligned+0x38>
 80099a8:	f04f 34ff 	mov.w	r4, #4294967295
 80099ac:	4620      	mov	r0, r4
 80099ae:	bd70      	pop	{r4, r5, r6, pc}
 80099b0:	2000073c 	.word	0x2000073c

080099b4 <_malloc_r>:
 80099b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b8:	1ccd      	adds	r5, r1, #3
 80099ba:	f025 0503 	bic.w	r5, r5, #3
 80099be:	3508      	adds	r5, #8
 80099c0:	2d0c      	cmp	r5, #12
 80099c2:	bf38      	it	cc
 80099c4:	250c      	movcc	r5, #12
 80099c6:	2d00      	cmp	r5, #0
 80099c8:	4607      	mov	r7, r0
 80099ca:	db01      	blt.n	80099d0 <_malloc_r+0x1c>
 80099cc:	42a9      	cmp	r1, r5
 80099ce:	d905      	bls.n	80099dc <_malloc_r+0x28>
 80099d0:	230c      	movs	r3, #12
 80099d2:	603b      	str	r3, [r7, #0]
 80099d4:	2600      	movs	r6, #0
 80099d6:	4630      	mov	r0, r6
 80099d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099dc:	4e2e      	ldr	r6, [pc, #184]	; (8009a98 <_malloc_r+0xe4>)
 80099de:	f000 fa3f 	bl	8009e60 <__malloc_lock>
 80099e2:	6833      	ldr	r3, [r6, #0]
 80099e4:	461c      	mov	r4, r3
 80099e6:	bb34      	cbnz	r4, 8009a36 <_malloc_r+0x82>
 80099e8:	4629      	mov	r1, r5
 80099ea:	4638      	mov	r0, r7
 80099ec:	f7ff ffc2 	bl	8009974 <sbrk_aligned>
 80099f0:	1c43      	adds	r3, r0, #1
 80099f2:	4604      	mov	r4, r0
 80099f4:	d14d      	bne.n	8009a92 <_malloc_r+0xde>
 80099f6:	6834      	ldr	r4, [r6, #0]
 80099f8:	4626      	mov	r6, r4
 80099fa:	2e00      	cmp	r6, #0
 80099fc:	d140      	bne.n	8009a80 <_malloc_r+0xcc>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	4631      	mov	r1, r6
 8009a02:	4638      	mov	r0, r7
 8009a04:	eb04 0803 	add.w	r8, r4, r3
 8009a08:	f000 f9ae 	bl	8009d68 <_sbrk_r>
 8009a0c:	4580      	cmp	r8, r0
 8009a0e:	d13a      	bne.n	8009a86 <_malloc_r+0xd2>
 8009a10:	6821      	ldr	r1, [r4, #0]
 8009a12:	3503      	adds	r5, #3
 8009a14:	1a6d      	subs	r5, r5, r1
 8009a16:	f025 0503 	bic.w	r5, r5, #3
 8009a1a:	3508      	adds	r5, #8
 8009a1c:	2d0c      	cmp	r5, #12
 8009a1e:	bf38      	it	cc
 8009a20:	250c      	movcc	r5, #12
 8009a22:	4629      	mov	r1, r5
 8009a24:	4638      	mov	r0, r7
 8009a26:	f7ff ffa5 	bl	8009974 <sbrk_aligned>
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	d02b      	beq.n	8009a86 <_malloc_r+0xd2>
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	442b      	add	r3, r5
 8009a32:	6023      	str	r3, [r4, #0]
 8009a34:	e00e      	b.n	8009a54 <_malloc_r+0xa0>
 8009a36:	6822      	ldr	r2, [r4, #0]
 8009a38:	1b52      	subs	r2, r2, r5
 8009a3a:	d41e      	bmi.n	8009a7a <_malloc_r+0xc6>
 8009a3c:	2a0b      	cmp	r2, #11
 8009a3e:	d916      	bls.n	8009a6e <_malloc_r+0xba>
 8009a40:	1961      	adds	r1, r4, r5
 8009a42:	42a3      	cmp	r3, r4
 8009a44:	6025      	str	r5, [r4, #0]
 8009a46:	bf18      	it	ne
 8009a48:	6059      	strne	r1, [r3, #4]
 8009a4a:	6863      	ldr	r3, [r4, #4]
 8009a4c:	bf08      	it	eq
 8009a4e:	6031      	streq	r1, [r6, #0]
 8009a50:	5162      	str	r2, [r4, r5]
 8009a52:	604b      	str	r3, [r1, #4]
 8009a54:	4638      	mov	r0, r7
 8009a56:	f104 060b 	add.w	r6, r4, #11
 8009a5a:	f000 fa07 	bl	8009e6c <__malloc_unlock>
 8009a5e:	f026 0607 	bic.w	r6, r6, #7
 8009a62:	1d23      	adds	r3, r4, #4
 8009a64:	1af2      	subs	r2, r6, r3
 8009a66:	d0b6      	beq.n	80099d6 <_malloc_r+0x22>
 8009a68:	1b9b      	subs	r3, r3, r6
 8009a6a:	50a3      	str	r3, [r4, r2]
 8009a6c:	e7b3      	b.n	80099d6 <_malloc_r+0x22>
 8009a6e:	6862      	ldr	r2, [r4, #4]
 8009a70:	42a3      	cmp	r3, r4
 8009a72:	bf0c      	ite	eq
 8009a74:	6032      	streq	r2, [r6, #0]
 8009a76:	605a      	strne	r2, [r3, #4]
 8009a78:	e7ec      	b.n	8009a54 <_malloc_r+0xa0>
 8009a7a:	4623      	mov	r3, r4
 8009a7c:	6864      	ldr	r4, [r4, #4]
 8009a7e:	e7b2      	b.n	80099e6 <_malloc_r+0x32>
 8009a80:	4634      	mov	r4, r6
 8009a82:	6876      	ldr	r6, [r6, #4]
 8009a84:	e7b9      	b.n	80099fa <_malloc_r+0x46>
 8009a86:	230c      	movs	r3, #12
 8009a88:	603b      	str	r3, [r7, #0]
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	f000 f9ee 	bl	8009e6c <__malloc_unlock>
 8009a90:	e7a1      	b.n	80099d6 <_malloc_r+0x22>
 8009a92:	6025      	str	r5, [r4, #0]
 8009a94:	e7de      	b.n	8009a54 <_malloc_r+0xa0>
 8009a96:	bf00      	nop
 8009a98:	20000738 	.word	0x20000738

08009a9c <__ssputs_r>:
 8009a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa0:	688e      	ldr	r6, [r1, #8]
 8009aa2:	429e      	cmp	r6, r3
 8009aa4:	4682      	mov	sl, r0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	4690      	mov	r8, r2
 8009aaa:	461f      	mov	r7, r3
 8009aac:	d838      	bhi.n	8009b20 <__ssputs_r+0x84>
 8009aae:	898a      	ldrh	r2, [r1, #12]
 8009ab0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ab4:	d032      	beq.n	8009b1c <__ssputs_r+0x80>
 8009ab6:	6825      	ldr	r5, [r4, #0]
 8009ab8:	6909      	ldr	r1, [r1, #16]
 8009aba:	eba5 0901 	sub.w	r9, r5, r1
 8009abe:	6965      	ldr	r5, [r4, #20]
 8009ac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ac8:	3301      	adds	r3, #1
 8009aca:	444b      	add	r3, r9
 8009acc:	106d      	asrs	r5, r5, #1
 8009ace:	429d      	cmp	r5, r3
 8009ad0:	bf38      	it	cc
 8009ad2:	461d      	movcc	r5, r3
 8009ad4:	0553      	lsls	r3, r2, #21
 8009ad6:	d531      	bpl.n	8009b3c <__ssputs_r+0xa0>
 8009ad8:	4629      	mov	r1, r5
 8009ada:	f7ff ff6b 	bl	80099b4 <_malloc_r>
 8009ade:	4606      	mov	r6, r0
 8009ae0:	b950      	cbnz	r0, 8009af8 <__ssputs_r+0x5c>
 8009ae2:	230c      	movs	r3, #12
 8009ae4:	f8ca 3000 	str.w	r3, [sl]
 8009ae8:	89a3      	ldrh	r3, [r4, #12]
 8009aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aee:	81a3      	strh	r3, [r4, #12]
 8009af0:	f04f 30ff 	mov.w	r0, #4294967295
 8009af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af8:	6921      	ldr	r1, [r4, #16]
 8009afa:	464a      	mov	r2, r9
 8009afc:	f7ff fa08 	bl	8008f10 <memcpy>
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b0a:	81a3      	strh	r3, [r4, #12]
 8009b0c:	6126      	str	r6, [r4, #16]
 8009b0e:	6165      	str	r5, [r4, #20]
 8009b10:	444e      	add	r6, r9
 8009b12:	eba5 0509 	sub.w	r5, r5, r9
 8009b16:	6026      	str	r6, [r4, #0]
 8009b18:	60a5      	str	r5, [r4, #8]
 8009b1a:	463e      	mov	r6, r7
 8009b1c:	42be      	cmp	r6, r7
 8009b1e:	d900      	bls.n	8009b22 <__ssputs_r+0x86>
 8009b20:	463e      	mov	r6, r7
 8009b22:	6820      	ldr	r0, [r4, #0]
 8009b24:	4632      	mov	r2, r6
 8009b26:	4641      	mov	r1, r8
 8009b28:	f000 f980 	bl	8009e2c <memmove>
 8009b2c:	68a3      	ldr	r3, [r4, #8]
 8009b2e:	1b9b      	subs	r3, r3, r6
 8009b30:	60a3      	str	r3, [r4, #8]
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	4433      	add	r3, r6
 8009b36:	6023      	str	r3, [r4, #0]
 8009b38:	2000      	movs	r0, #0
 8009b3a:	e7db      	b.n	8009af4 <__ssputs_r+0x58>
 8009b3c:	462a      	mov	r2, r5
 8009b3e:	f000 f99b 	bl	8009e78 <_realloc_r>
 8009b42:	4606      	mov	r6, r0
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d1e1      	bne.n	8009b0c <__ssputs_r+0x70>
 8009b48:	6921      	ldr	r1, [r4, #16]
 8009b4a:	4650      	mov	r0, sl
 8009b4c:	f7ff fec6 	bl	80098dc <_free_r>
 8009b50:	e7c7      	b.n	8009ae2 <__ssputs_r+0x46>
	...

08009b54 <_svfiprintf_r>:
 8009b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	4698      	mov	r8, r3
 8009b5a:	898b      	ldrh	r3, [r1, #12]
 8009b5c:	061b      	lsls	r3, r3, #24
 8009b5e:	b09d      	sub	sp, #116	; 0x74
 8009b60:	4607      	mov	r7, r0
 8009b62:	460d      	mov	r5, r1
 8009b64:	4614      	mov	r4, r2
 8009b66:	d50e      	bpl.n	8009b86 <_svfiprintf_r+0x32>
 8009b68:	690b      	ldr	r3, [r1, #16]
 8009b6a:	b963      	cbnz	r3, 8009b86 <_svfiprintf_r+0x32>
 8009b6c:	2140      	movs	r1, #64	; 0x40
 8009b6e:	f7ff ff21 	bl	80099b4 <_malloc_r>
 8009b72:	6028      	str	r0, [r5, #0]
 8009b74:	6128      	str	r0, [r5, #16]
 8009b76:	b920      	cbnz	r0, 8009b82 <_svfiprintf_r+0x2e>
 8009b78:	230c      	movs	r3, #12
 8009b7a:	603b      	str	r3, [r7, #0]
 8009b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b80:	e0d1      	b.n	8009d26 <_svfiprintf_r+0x1d2>
 8009b82:	2340      	movs	r3, #64	; 0x40
 8009b84:	616b      	str	r3, [r5, #20]
 8009b86:	2300      	movs	r3, #0
 8009b88:	9309      	str	r3, [sp, #36]	; 0x24
 8009b8a:	2320      	movs	r3, #32
 8009b8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b94:	2330      	movs	r3, #48	; 0x30
 8009b96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009d40 <_svfiprintf_r+0x1ec>
 8009b9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b9e:	f04f 0901 	mov.w	r9, #1
 8009ba2:	4623      	mov	r3, r4
 8009ba4:	469a      	mov	sl, r3
 8009ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009baa:	b10a      	cbz	r2, 8009bb0 <_svfiprintf_r+0x5c>
 8009bac:	2a25      	cmp	r2, #37	; 0x25
 8009bae:	d1f9      	bne.n	8009ba4 <_svfiprintf_r+0x50>
 8009bb0:	ebba 0b04 	subs.w	fp, sl, r4
 8009bb4:	d00b      	beq.n	8009bce <_svfiprintf_r+0x7a>
 8009bb6:	465b      	mov	r3, fp
 8009bb8:	4622      	mov	r2, r4
 8009bba:	4629      	mov	r1, r5
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	f7ff ff6d 	bl	8009a9c <__ssputs_r>
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	f000 80aa 	beq.w	8009d1c <_svfiprintf_r+0x1c8>
 8009bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bca:	445a      	add	r2, fp
 8009bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8009bce:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 80a2 	beq.w	8009d1c <_svfiprintf_r+0x1c8>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f04f 32ff 	mov.w	r2, #4294967295
 8009bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009be2:	f10a 0a01 	add.w	sl, sl, #1
 8009be6:	9304      	str	r3, [sp, #16]
 8009be8:	9307      	str	r3, [sp, #28]
 8009bea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bee:	931a      	str	r3, [sp, #104]	; 0x68
 8009bf0:	4654      	mov	r4, sl
 8009bf2:	2205      	movs	r2, #5
 8009bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf8:	4851      	ldr	r0, [pc, #324]	; (8009d40 <_svfiprintf_r+0x1ec>)
 8009bfa:	f7f6 fb19 	bl	8000230 <memchr>
 8009bfe:	9a04      	ldr	r2, [sp, #16]
 8009c00:	b9d8      	cbnz	r0, 8009c3a <_svfiprintf_r+0xe6>
 8009c02:	06d0      	lsls	r0, r2, #27
 8009c04:	bf44      	itt	mi
 8009c06:	2320      	movmi	r3, #32
 8009c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c0c:	0711      	lsls	r1, r2, #28
 8009c0e:	bf44      	itt	mi
 8009c10:	232b      	movmi	r3, #43	; 0x2b
 8009c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c16:	f89a 3000 	ldrb.w	r3, [sl]
 8009c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c1c:	d015      	beq.n	8009c4a <_svfiprintf_r+0xf6>
 8009c1e:	9a07      	ldr	r2, [sp, #28]
 8009c20:	4654      	mov	r4, sl
 8009c22:	2000      	movs	r0, #0
 8009c24:	f04f 0c0a 	mov.w	ip, #10
 8009c28:	4621      	mov	r1, r4
 8009c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c2e:	3b30      	subs	r3, #48	; 0x30
 8009c30:	2b09      	cmp	r3, #9
 8009c32:	d94e      	bls.n	8009cd2 <_svfiprintf_r+0x17e>
 8009c34:	b1b0      	cbz	r0, 8009c64 <_svfiprintf_r+0x110>
 8009c36:	9207      	str	r2, [sp, #28]
 8009c38:	e014      	b.n	8009c64 <_svfiprintf_r+0x110>
 8009c3a:	eba0 0308 	sub.w	r3, r0, r8
 8009c3e:	fa09 f303 	lsl.w	r3, r9, r3
 8009c42:	4313      	orrs	r3, r2
 8009c44:	9304      	str	r3, [sp, #16]
 8009c46:	46a2      	mov	sl, r4
 8009c48:	e7d2      	b.n	8009bf0 <_svfiprintf_r+0x9c>
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	1d19      	adds	r1, r3, #4
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	9103      	str	r1, [sp, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bfbb      	ittet	lt
 8009c56:	425b      	neglt	r3, r3
 8009c58:	f042 0202 	orrlt.w	r2, r2, #2
 8009c5c:	9307      	strge	r3, [sp, #28]
 8009c5e:	9307      	strlt	r3, [sp, #28]
 8009c60:	bfb8      	it	lt
 8009c62:	9204      	strlt	r2, [sp, #16]
 8009c64:	7823      	ldrb	r3, [r4, #0]
 8009c66:	2b2e      	cmp	r3, #46	; 0x2e
 8009c68:	d10c      	bne.n	8009c84 <_svfiprintf_r+0x130>
 8009c6a:	7863      	ldrb	r3, [r4, #1]
 8009c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c6e:	d135      	bne.n	8009cdc <_svfiprintf_r+0x188>
 8009c70:	9b03      	ldr	r3, [sp, #12]
 8009c72:	1d1a      	adds	r2, r3, #4
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	9203      	str	r2, [sp, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	bfb8      	it	lt
 8009c7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c80:	3402      	adds	r4, #2
 8009c82:	9305      	str	r3, [sp, #20]
 8009c84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d50 <_svfiprintf_r+0x1fc>
 8009c88:	7821      	ldrb	r1, [r4, #0]
 8009c8a:	2203      	movs	r2, #3
 8009c8c:	4650      	mov	r0, sl
 8009c8e:	f7f6 facf 	bl	8000230 <memchr>
 8009c92:	b140      	cbz	r0, 8009ca6 <_svfiprintf_r+0x152>
 8009c94:	2340      	movs	r3, #64	; 0x40
 8009c96:	eba0 000a 	sub.w	r0, r0, sl
 8009c9a:	fa03 f000 	lsl.w	r0, r3, r0
 8009c9e:	9b04      	ldr	r3, [sp, #16]
 8009ca0:	4303      	orrs	r3, r0
 8009ca2:	3401      	adds	r4, #1
 8009ca4:	9304      	str	r3, [sp, #16]
 8009ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009caa:	4826      	ldr	r0, [pc, #152]	; (8009d44 <_svfiprintf_r+0x1f0>)
 8009cac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cb0:	2206      	movs	r2, #6
 8009cb2:	f7f6 fabd 	bl	8000230 <memchr>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d038      	beq.n	8009d2c <_svfiprintf_r+0x1d8>
 8009cba:	4b23      	ldr	r3, [pc, #140]	; (8009d48 <_svfiprintf_r+0x1f4>)
 8009cbc:	bb1b      	cbnz	r3, 8009d06 <_svfiprintf_r+0x1b2>
 8009cbe:	9b03      	ldr	r3, [sp, #12]
 8009cc0:	3307      	adds	r3, #7
 8009cc2:	f023 0307 	bic.w	r3, r3, #7
 8009cc6:	3308      	adds	r3, #8
 8009cc8:	9303      	str	r3, [sp, #12]
 8009cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ccc:	4433      	add	r3, r6
 8009cce:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd0:	e767      	b.n	8009ba2 <_svfiprintf_r+0x4e>
 8009cd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	2001      	movs	r0, #1
 8009cda:	e7a5      	b.n	8009c28 <_svfiprintf_r+0xd4>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	3401      	adds	r4, #1
 8009ce0:	9305      	str	r3, [sp, #20]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	f04f 0c0a 	mov.w	ip, #10
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cee:	3a30      	subs	r2, #48	; 0x30
 8009cf0:	2a09      	cmp	r2, #9
 8009cf2:	d903      	bls.n	8009cfc <_svfiprintf_r+0x1a8>
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d0c5      	beq.n	8009c84 <_svfiprintf_r+0x130>
 8009cf8:	9105      	str	r1, [sp, #20]
 8009cfa:	e7c3      	b.n	8009c84 <_svfiprintf_r+0x130>
 8009cfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d00:	4604      	mov	r4, r0
 8009d02:	2301      	movs	r3, #1
 8009d04:	e7f0      	b.n	8009ce8 <_svfiprintf_r+0x194>
 8009d06:	ab03      	add	r3, sp, #12
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	462a      	mov	r2, r5
 8009d0c:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <_svfiprintf_r+0x1f8>)
 8009d0e:	a904      	add	r1, sp, #16
 8009d10:	4638      	mov	r0, r7
 8009d12:	f7fc fa47 	bl	80061a4 <_printf_float>
 8009d16:	1c42      	adds	r2, r0, #1
 8009d18:	4606      	mov	r6, r0
 8009d1a:	d1d6      	bne.n	8009cca <_svfiprintf_r+0x176>
 8009d1c:	89ab      	ldrh	r3, [r5, #12]
 8009d1e:	065b      	lsls	r3, r3, #25
 8009d20:	f53f af2c 	bmi.w	8009b7c <_svfiprintf_r+0x28>
 8009d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d26:	b01d      	add	sp, #116	; 0x74
 8009d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d2c:	ab03      	add	r3, sp, #12
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	462a      	mov	r2, r5
 8009d32:	4b06      	ldr	r3, [pc, #24]	; (8009d4c <_svfiprintf_r+0x1f8>)
 8009d34:	a904      	add	r1, sp, #16
 8009d36:	4638      	mov	r0, r7
 8009d38:	f7fc fcd8 	bl	80066ec <_printf_i>
 8009d3c:	e7eb      	b.n	8009d16 <_svfiprintf_r+0x1c2>
 8009d3e:	bf00      	nop
 8009d40:	0800aedc 	.word	0x0800aedc
 8009d44:	0800aee6 	.word	0x0800aee6
 8009d48:	080061a5 	.word	0x080061a5
 8009d4c:	08009a9d 	.word	0x08009a9d
 8009d50:	0800aee2 	.word	0x0800aee2
 8009d54:	00000000 	.word	0x00000000

08009d58 <nan>:
 8009d58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009d60 <nan+0x8>
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	00000000 	.word	0x00000000
 8009d64:	7ff80000 	.word	0x7ff80000

08009d68 <_sbrk_r>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4d06      	ldr	r5, [pc, #24]	; (8009d84 <_sbrk_r+0x1c>)
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4604      	mov	r4, r0
 8009d70:	4608      	mov	r0, r1
 8009d72:	602b      	str	r3, [r5, #0]
 8009d74:	f7f8 fa3a 	bl	80021ec <_sbrk>
 8009d78:	1c43      	adds	r3, r0, #1
 8009d7a:	d102      	bne.n	8009d82 <_sbrk_r+0x1a>
 8009d7c:	682b      	ldr	r3, [r5, #0]
 8009d7e:	b103      	cbz	r3, 8009d82 <_sbrk_r+0x1a>
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	bd38      	pop	{r3, r4, r5, pc}
 8009d84:	20000740 	.word	0x20000740

08009d88 <strncmp>:
 8009d88:	b510      	push	{r4, lr}
 8009d8a:	b17a      	cbz	r2, 8009dac <strncmp+0x24>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	3901      	subs	r1, #1
 8009d90:	1884      	adds	r4, r0, r2
 8009d92:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d9a:	4290      	cmp	r0, r2
 8009d9c:	d101      	bne.n	8009da2 <strncmp+0x1a>
 8009d9e:	42a3      	cmp	r3, r4
 8009da0:	d101      	bne.n	8009da6 <strncmp+0x1e>
 8009da2:	1a80      	subs	r0, r0, r2
 8009da4:	bd10      	pop	{r4, pc}
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d1f3      	bne.n	8009d92 <strncmp+0xa>
 8009daa:	e7fa      	b.n	8009da2 <strncmp+0x1a>
 8009dac:	4610      	mov	r0, r2
 8009dae:	e7f9      	b.n	8009da4 <strncmp+0x1c>

08009db0 <__ascii_wctomb>:
 8009db0:	b149      	cbz	r1, 8009dc6 <__ascii_wctomb+0x16>
 8009db2:	2aff      	cmp	r2, #255	; 0xff
 8009db4:	bf85      	ittet	hi
 8009db6:	238a      	movhi	r3, #138	; 0x8a
 8009db8:	6003      	strhi	r3, [r0, #0]
 8009dba:	700a      	strbls	r2, [r1, #0]
 8009dbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009dc0:	bf98      	it	ls
 8009dc2:	2001      	movls	r0, #1
 8009dc4:	4770      	bx	lr
 8009dc6:	4608      	mov	r0, r1
 8009dc8:	4770      	bx	lr
	...

08009dcc <__assert_func>:
 8009dcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dce:	4614      	mov	r4, r2
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <__assert_func+0x2c>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	68d8      	ldr	r0, [r3, #12]
 8009dda:	b14c      	cbz	r4, 8009df0 <__assert_func+0x24>
 8009ddc:	4b07      	ldr	r3, [pc, #28]	; (8009dfc <__assert_func+0x30>)
 8009dde:	9100      	str	r1, [sp, #0]
 8009de0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009de4:	4906      	ldr	r1, [pc, #24]	; (8009e00 <__assert_func+0x34>)
 8009de6:	462b      	mov	r3, r5
 8009de8:	f000 f80e 	bl	8009e08 <fiprintf>
 8009dec:	f000 fa8c 	bl	800a308 <abort>
 8009df0:	4b04      	ldr	r3, [pc, #16]	; (8009e04 <__assert_func+0x38>)
 8009df2:	461c      	mov	r4, r3
 8009df4:	e7f3      	b.n	8009dde <__assert_func+0x12>
 8009df6:	bf00      	nop
 8009df8:	2000000c 	.word	0x2000000c
 8009dfc:	0800aeed 	.word	0x0800aeed
 8009e00:	0800aefa 	.word	0x0800aefa
 8009e04:	0800af28 	.word	0x0800af28

08009e08 <fiprintf>:
 8009e08:	b40e      	push	{r1, r2, r3}
 8009e0a:	b503      	push	{r0, r1, lr}
 8009e0c:	4601      	mov	r1, r0
 8009e0e:	ab03      	add	r3, sp, #12
 8009e10:	4805      	ldr	r0, [pc, #20]	; (8009e28 <fiprintf+0x20>)
 8009e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e16:	6800      	ldr	r0, [r0, #0]
 8009e18:	9301      	str	r3, [sp, #4]
 8009e1a:	f000 f885 	bl	8009f28 <_vfiprintf_r>
 8009e1e:	b002      	add	sp, #8
 8009e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e24:	b003      	add	sp, #12
 8009e26:	4770      	bx	lr
 8009e28:	2000000c 	.word	0x2000000c

08009e2c <memmove>:
 8009e2c:	4288      	cmp	r0, r1
 8009e2e:	b510      	push	{r4, lr}
 8009e30:	eb01 0402 	add.w	r4, r1, r2
 8009e34:	d902      	bls.n	8009e3c <memmove+0x10>
 8009e36:	4284      	cmp	r4, r0
 8009e38:	4623      	mov	r3, r4
 8009e3a:	d807      	bhi.n	8009e4c <memmove+0x20>
 8009e3c:	1e43      	subs	r3, r0, #1
 8009e3e:	42a1      	cmp	r1, r4
 8009e40:	d008      	beq.n	8009e54 <memmove+0x28>
 8009e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e4a:	e7f8      	b.n	8009e3e <memmove+0x12>
 8009e4c:	4402      	add	r2, r0
 8009e4e:	4601      	mov	r1, r0
 8009e50:	428a      	cmp	r2, r1
 8009e52:	d100      	bne.n	8009e56 <memmove+0x2a>
 8009e54:	bd10      	pop	{r4, pc}
 8009e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e5e:	e7f7      	b.n	8009e50 <memmove+0x24>

08009e60 <__malloc_lock>:
 8009e60:	4801      	ldr	r0, [pc, #4]	; (8009e68 <__malloc_lock+0x8>)
 8009e62:	f000 bc11 	b.w	800a688 <__retarget_lock_acquire_recursive>
 8009e66:	bf00      	nop
 8009e68:	20000744 	.word	0x20000744

08009e6c <__malloc_unlock>:
 8009e6c:	4801      	ldr	r0, [pc, #4]	; (8009e74 <__malloc_unlock+0x8>)
 8009e6e:	f000 bc0c 	b.w	800a68a <__retarget_lock_release_recursive>
 8009e72:	bf00      	nop
 8009e74:	20000744 	.word	0x20000744

08009e78 <_realloc_r>:
 8009e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7c:	4680      	mov	r8, r0
 8009e7e:	4614      	mov	r4, r2
 8009e80:	460e      	mov	r6, r1
 8009e82:	b921      	cbnz	r1, 8009e8e <_realloc_r+0x16>
 8009e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e88:	4611      	mov	r1, r2
 8009e8a:	f7ff bd93 	b.w	80099b4 <_malloc_r>
 8009e8e:	b92a      	cbnz	r2, 8009e9c <_realloc_r+0x24>
 8009e90:	f7ff fd24 	bl	80098dc <_free_r>
 8009e94:	4625      	mov	r5, r4
 8009e96:	4628      	mov	r0, r5
 8009e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e9c:	f000 fc5c 	bl	800a758 <_malloc_usable_size_r>
 8009ea0:	4284      	cmp	r4, r0
 8009ea2:	4607      	mov	r7, r0
 8009ea4:	d802      	bhi.n	8009eac <_realloc_r+0x34>
 8009ea6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009eaa:	d812      	bhi.n	8009ed2 <_realloc_r+0x5a>
 8009eac:	4621      	mov	r1, r4
 8009eae:	4640      	mov	r0, r8
 8009eb0:	f7ff fd80 	bl	80099b4 <_malloc_r>
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d0ed      	beq.n	8009e96 <_realloc_r+0x1e>
 8009eba:	42bc      	cmp	r4, r7
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	bf28      	it	cs
 8009ec2:	463a      	movcs	r2, r7
 8009ec4:	f7ff f824 	bl	8008f10 <memcpy>
 8009ec8:	4631      	mov	r1, r6
 8009eca:	4640      	mov	r0, r8
 8009ecc:	f7ff fd06 	bl	80098dc <_free_r>
 8009ed0:	e7e1      	b.n	8009e96 <_realloc_r+0x1e>
 8009ed2:	4635      	mov	r5, r6
 8009ed4:	e7df      	b.n	8009e96 <_realloc_r+0x1e>

08009ed6 <__sfputc_r>:
 8009ed6:	6893      	ldr	r3, [r2, #8]
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	b410      	push	{r4}
 8009ede:	6093      	str	r3, [r2, #8]
 8009ee0:	da08      	bge.n	8009ef4 <__sfputc_r+0x1e>
 8009ee2:	6994      	ldr	r4, [r2, #24]
 8009ee4:	42a3      	cmp	r3, r4
 8009ee6:	db01      	blt.n	8009eec <__sfputc_r+0x16>
 8009ee8:	290a      	cmp	r1, #10
 8009eea:	d103      	bne.n	8009ef4 <__sfputc_r+0x1e>
 8009eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef0:	f000 b94a 	b.w	800a188 <__swbuf_r>
 8009ef4:	6813      	ldr	r3, [r2, #0]
 8009ef6:	1c58      	adds	r0, r3, #1
 8009ef8:	6010      	str	r0, [r2, #0]
 8009efa:	7019      	strb	r1, [r3, #0]
 8009efc:	4608      	mov	r0, r1
 8009efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <__sfputs_r>:
 8009f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f06:	4606      	mov	r6, r0
 8009f08:	460f      	mov	r7, r1
 8009f0a:	4614      	mov	r4, r2
 8009f0c:	18d5      	adds	r5, r2, r3
 8009f0e:	42ac      	cmp	r4, r5
 8009f10:	d101      	bne.n	8009f16 <__sfputs_r+0x12>
 8009f12:	2000      	movs	r0, #0
 8009f14:	e007      	b.n	8009f26 <__sfputs_r+0x22>
 8009f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1a:	463a      	mov	r2, r7
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f7ff ffda 	bl	8009ed6 <__sfputc_r>
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	d1f3      	bne.n	8009f0e <__sfputs_r+0xa>
 8009f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f28 <_vfiprintf_r>:
 8009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	460d      	mov	r5, r1
 8009f2e:	b09d      	sub	sp, #116	; 0x74
 8009f30:	4614      	mov	r4, r2
 8009f32:	4698      	mov	r8, r3
 8009f34:	4606      	mov	r6, r0
 8009f36:	b118      	cbz	r0, 8009f40 <_vfiprintf_r+0x18>
 8009f38:	6983      	ldr	r3, [r0, #24]
 8009f3a:	b90b      	cbnz	r3, 8009f40 <_vfiprintf_r+0x18>
 8009f3c:	f000 fb06 	bl	800a54c <__sinit>
 8009f40:	4b89      	ldr	r3, [pc, #548]	; (800a168 <_vfiprintf_r+0x240>)
 8009f42:	429d      	cmp	r5, r3
 8009f44:	d11b      	bne.n	8009f7e <_vfiprintf_r+0x56>
 8009f46:	6875      	ldr	r5, [r6, #4]
 8009f48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f4a:	07d9      	lsls	r1, r3, #31
 8009f4c:	d405      	bmi.n	8009f5a <_vfiprintf_r+0x32>
 8009f4e:	89ab      	ldrh	r3, [r5, #12]
 8009f50:	059a      	lsls	r2, r3, #22
 8009f52:	d402      	bmi.n	8009f5a <_vfiprintf_r+0x32>
 8009f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f56:	f000 fb97 	bl	800a688 <__retarget_lock_acquire_recursive>
 8009f5a:	89ab      	ldrh	r3, [r5, #12]
 8009f5c:	071b      	lsls	r3, r3, #28
 8009f5e:	d501      	bpl.n	8009f64 <_vfiprintf_r+0x3c>
 8009f60:	692b      	ldr	r3, [r5, #16]
 8009f62:	b9eb      	cbnz	r3, 8009fa0 <_vfiprintf_r+0x78>
 8009f64:	4629      	mov	r1, r5
 8009f66:	4630      	mov	r0, r6
 8009f68:	f000 f960 	bl	800a22c <__swsetup_r>
 8009f6c:	b1c0      	cbz	r0, 8009fa0 <_vfiprintf_r+0x78>
 8009f6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f70:	07dc      	lsls	r4, r3, #31
 8009f72:	d50e      	bpl.n	8009f92 <_vfiprintf_r+0x6a>
 8009f74:	f04f 30ff 	mov.w	r0, #4294967295
 8009f78:	b01d      	add	sp, #116	; 0x74
 8009f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7e:	4b7b      	ldr	r3, [pc, #492]	; (800a16c <_vfiprintf_r+0x244>)
 8009f80:	429d      	cmp	r5, r3
 8009f82:	d101      	bne.n	8009f88 <_vfiprintf_r+0x60>
 8009f84:	68b5      	ldr	r5, [r6, #8]
 8009f86:	e7df      	b.n	8009f48 <_vfiprintf_r+0x20>
 8009f88:	4b79      	ldr	r3, [pc, #484]	; (800a170 <_vfiprintf_r+0x248>)
 8009f8a:	429d      	cmp	r5, r3
 8009f8c:	bf08      	it	eq
 8009f8e:	68f5      	ldreq	r5, [r6, #12]
 8009f90:	e7da      	b.n	8009f48 <_vfiprintf_r+0x20>
 8009f92:	89ab      	ldrh	r3, [r5, #12]
 8009f94:	0598      	lsls	r0, r3, #22
 8009f96:	d4ed      	bmi.n	8009f74 <_vfiprintf_r+0x4c>
 8009f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f9a:	f000 fb76 	bl	800a68a <__retarget_lock_release_recursive>
 8009f9e:	e7e9      	b.n	8009f74 <_vfiprintf_r+0x4c>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa4:	2320      	movs	r3, #32
 8009fa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009faa:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fae:	2330      	movs	r3, #48	; 0x30
 8009fb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a174 <_vfiprintf_r+0x24c>
 8009fb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fb8:	f04f 0901 	mov.w	r9, #1
 8009fbc:	4623      	mov	r3, r4
 8009fbe:	469a      	mov	sl, r3
 8009fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fc4:	b10a      	cbz	r2, 8009fca <_vfiprintf_r+0xa2>
 8009fc6:	2a25      	cmp	r2, #37	; 0x25
 8009fc8:	d1f9      	bne.n	8009fbe <_vfiprintf_r+0x96>
 8009fca:	ebba 0b04 	subs.w	fp, sl, r4
 8009fce:	d00b      	beq.n	8009fe8 <_vfiprintf_r+0xc0>
 8009fd0:	465b      	mov	r3, fp
 8009fd2:	4622      	mov	r2, r4
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f7ff ff94 	bl	8009f04 <__sfputs_r>
 8009fdc:	3001      	adds	r0, #1
 8009fde:	f000 80aa 	beq.w	800a136 <_vfiprintf_r+0x20e>
 8009fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fe4:	445a      	add	r2, fp
 8009fe6:	9209      	str	r2, [sp, #36]	; 0x24
 8009fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 80a2 	beq.w	800a136 <_vfiprintf_r+0x20e>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ffc:	f10a 0a01 	add.w	sl, sl, #1
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	9307      	str	r3, [sp, #28]
 800a004:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a008:	931a      	str	r3, [sp, #104]	; 0x68
 800a00a:	4654      	mov	r4, sl
 800a00c:	2205      	movs	r2, #5
 800a00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a012:	4858      	ldr	r0, [pc, #352]	; (800a174 <_vfiprintf_r+0x24c>)
 800a014:	f7f6 f90c 	bl	8000230 <memchr>
 800a018:	9a04      	ldr	r2, [sp, #16]
 800a01a:	b9d8      	cbnz	r0, 800a054 <_vfiprintf_r+0x12c>
 800a01c:	06d1      	lsls	r1, r2, #27
 800a01e:	bf44      	itt	mi
 800a020:	2320      	movmi	r3, #32
 800a022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a026:	0713      	lsls	r3, r2, #28
 800a028:	bf44      	itt	mi
 800a02a:	232b      	movmi	r3, #43	; 0x2b
 800a02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a030:	f89a 3000 	ldrb.w	r3, [sl]
 800a034:	2b2a      	cmp	r3, #42	; 0x2a
 800a036:	d015      	beq.n	800a064 <_vfiprintf_r+0x13c>
 800a038:	9a07      	ldr	r2, [sp, #28]
 800a03a:	4654      	mov	r4, sl
 800a03c:	2000      	movs	r0, #0
 800a03e:	f04f 0c0a 	mov.w	ip, #10
 800a042:	4621      	mov	r1, r4
 800a044:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a048:	3b30      	subs	r3, #48	; 0x30
 800a04a:	2b09      	cmp	r3, #9
 800a04c:	d94e      	bls.n	800a0ec <_vfiprintf_r+0x1c4>
 800a04e:	b1b0      	cbz	r0, 800a07e <_vfiprintf_r+0x156>
 800a050:	9207      	str	r2, [sp, #28]
 800a052:	e014      	b.n	800a07e <_vfiprintf_r+0x156>
 800a054:	eba0 0308 	sub.w	r3, r0, r8
 800a058:	fa09 f303 	lsl.w	r3, r9, r3
 800a05c:	4313      	orrs	r3, r2
 800a05e:	9304      	str	r3, [sp, #16]
 800a060:	46a2      	mov	sl, r4
 800a062:	e7d2      	b.n	800a00a <_vfiprintf_r+0xe2>
 800a064:	9b03      	ldr	r3, [sp, #12]
 800a066:	1d19      	adds	r1, r3, #4
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	9103      	str	r1, [sp, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	bfbb      	ittet	lt
 800a070:	425b      	neglt	r3, r3
 800a072:	f042 0202 	orrlt.w	r2, r2, #2
 800a076:	9307      	strge	r3, [sp, #28]
 800a078:	9307      	strlt	r3, [sp, #28]
 800a07a:	bfb8      	it	lt
 800a07c:	9204      	strlt	r2, [sp, #16]
 800a07e:	7823      	ldrb	r3, [r4, #0]
 800a080:	2b2e      	cmp	r3, #46	; 0x2e
 800a082:	d10c      	bne.n	800a09e <_vfiprintf_r+0x176>
 800a084:	7863      	ldrb	r3, [r4, #1]
 800a086:	2b2a      	cmp	r3, #42	; 0x2a
 800a088:	d135      	bne.n	800a0f6 <_vfiprintf_r+0x1ce>
 800a08a:	9b03      	ldr	r3, [sp, #12]
 800a08c:	1d1a      	adds	r2, r3, #4
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	9203      	str	r2, [sp, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	bfb8      	it	lt
 800a096:	f04f 33ff 	movlt.w	r3, #4294967295
 800a09a:	3402      	adds	r4, #2
 800a09c:	9305      	str	r3, [sp, #20]
 800a09e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a184 <_vfiprintf_r+0x25c>
 800a0a2:	7821      	ldrb	r1, [r4, #0]
 800a0a4:	2203      	movs	r2, #3
 800a0a6:	4650      	mov	r0, sl
 800a0a8:	f7f6 f8c2 	bl	8000230 <memchr>
 800a0ac:	b140      	cbz	r0, 800a0c0 <_vfiprintf_r+0x198>
 800a0ae:	2340      	movs	r3, #64	; 0x40
 800a0b0:	eba0 000a 	sub.w	r0, r0, sl
 800a0b4:	fa03 f000 	lsl.w	r0, r3, r0
 800a0b8:	9b04      	ldr	r3, [sp, #16]
 800a0ba:	4303      	orrs	r3, r0
 800a0bc:	3401      	adds	r4, #1
 800a0be:	9304      	str	r3, [sp, #16]
 800a0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c4:	482c      	ldr	r0, [pc, #176]	; (800a178 <_vfiprintf_r+0x250>)
 800a0c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0ca:	2206      	movs	r2, #6
 800a0cc:	f7f6 f8b0 	bl	8000230 <memchr>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d03f      	beq.n	800a154 <_vfiprintf_r+0x22c>
 800a0d4:	4b29      	ldr	r3, [pc, #164]	; (800a17c <_vfiprintf_r+0x254>)
 800a0d6:	bb1b      	cbnz	r3, 800a120 <_vfiprintf_r+0x1f8>
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	3307      	adds	r3, #7
 800a0dc:	f023 0307 	bic.w	r3, r3, #7
 800a0e0:	3308      	adds	r3, #8
 800a0e2:	9303      	str	r3, [sp, #12]
 800a0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e6:	443b      	add	r3, r7
 800a0e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ea:	e767      	b.n	8009fbc <_vfiprintf_r+0x94>
 800a0ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	2001      	movs	r0, #1
 800a0f4:	e7a5      	b.n	800a042 <_vfiprintf_r+0x11a>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	3401      	adds	r4, #1
 800a0fa:	9305      	str	r3, [sp, #20]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	f04f 0c0a 	mov.w	ip, #10
 800a102:	4620      	mov	r0, r4
 800a104:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a108:	3a30      	subs	r2, #48	; 0x30
 800a10a:	2a09      	cmp	r2, #9
 800a10c:	d903      	bls.n	800a116 <_vfiprintf_r+0x1ee>
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d0c5      	beq.n	800a09e <_vfiprintf_r+0x176>
 800a112:	9105      	str	r1, [sp, #20]
 800a114:	e7c3      	b.n	800a09e <_vfiprintf_r+0x176>
 800a116:	fb0c 2101 	mla	r1, ip, r1, r2
 800a11a:	4604      	mov	r4, r0
 800a11c:	2301      	movs	r3, #1
 800a11e:	e7f0      	b.n	800a102 <_vfiprintf_r+0x1da>
 800a120:	ab03      	add	r3, sp, #12
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	462a      	mov	r2, r5
 800a126:	4b16      	ldr	r3, [pc, #88]	; (800a180 <_vfiprintf_r+0x258>)
 800a128:	a904      	add	r1, sp, #16
 800a12a:	4630      	mov	r0, r6
 800a12c:	f7fc f83a 	bl	80061a4 <_printf_float>
 800a130:	4607      	mov	r7, r0
 800a132:	1c78      	adds	r0, r7, #1
 800a134:	d1d6      	bne.n	800a0e4 <_vfiprintf_r+0x1bc>
 800a136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a138:	07d9      	lsls	r1, r3, #31
 800a13a:	d405      	bmi.n	800a148 <_vfiprintf_r+0x220>
 800a13c:	89ab      	ldrh	r3, [r5, #12]
 800a13e:	059a      	lsls	r2, r3, #22
 800a140:	d402      	bmi.n	800a148 <_vfiprintf_r+0x220>
 800a142:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a144:	f000 faa1 	bl	800a68a <__retarget_lock_release_recursive>
 800a148:	89ab      	ldrh	r3, [r5, #12]
 800a14a:	065b      	lsls	r3, r3, #25
 800a14c:	f53f af12 	bmi.w	8009f74 <_vfiprintf_r+0x4c>
 800a150:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a152:	e711      	b.n	8009f78 <_vfiprintf_r+0x50>
 800a154:	ab03      	add	r3, sp, #12
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	462a      	mov	r2, r5
 800a15a:	4b09      	ldr	r3, [pc, #36]	; (800a180 <_vfiprintf_r+0x258>)
 800a15c:	a904      	add	r1, sp, #16
 800a15e:	4630      	mov	r0, r6
 800a160:	f7fc fac4 	bl	80066ec <_printf_i>
 800a164:	e7e4      	b.n	800a130 <_vfiprintf_r+0x208>
 800a166:	bf00      	nop
 800a168:	0800af4c 	.word	0x0800af4c
 800a16c:	0800af6c 	.word	0x0800af6c
 800a170:	0800af2c 	.word	0x0800af2c
 800a174:	0800aedc 	.word	0x0800aedc
 800a178:	0800aee6 	.word	0x0800aee6
 800a17c:	080061a5 	.word	0x080061a5
 800a180:	08009f05 	.word	0x08009f05
 800a184:	0800aee2 	.word	0x0800aee2

0800a188 <__swbuf_r>:
 800a188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18a:	460e      	mov	r6, r1
 800a18c:	4614      	mov	r4, r2
 800a18e:	4605      	mov	r5, r0
 800a190:	b118      	cbz	r0, 800a19a <__swbuf_r+0x12>
 800a192:	6983      	ldr	r3, [r0, #24]
 800a194:	b90b      	cbnz	r3, 800a19a <__swbuf_r+0x12>
 800a196:	f000 f9d9 	bl	800a54c <__sinit>
 800a19a:	4b21      	ldr	r3, [pc, #132]	; (800a220 <__swbuf_r+0x98>)
 800a19c:	429c      	cmp	r4, r3
 800a19e:	d12b      	bne.n	800a1f8 <__swbuf_r+0x70>
 800a1a0:	686c      	ldr	r4, [r5, #4]
 800a1a2:	69a3      	ldr	r3, [r4, #24]
 800a1a4:	60a3      	str	r3, [r4, #8]
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	071a      	lsls	r2, r3, #28
 800a1aa:	d52f      	bpl.n	800a20c <__swbuf_r+0x84>
 800a1ac:	6923      	ldr	r3, [r4, #16]
 800a1ae:	b36b      	cbz	r3, 800a20c <__swbuf_r+0x84>
 800a1b0:	6923      	ldr	r3, [r4, #16]
 800a1b2:	6820      	ldr	r0, [r4, #0]
 800a1b4:	1ac0      	subs	r0, r0, r3
 800a1b6:	6963      	ldr	r3, [r4, #20]
 800a1b8:	b2f6      	uxtb	r6, r6
 800a1ba:	4283      	cmp	r3, r0
 800a1bc:	4637      	mov	r7, r6
 800a1be:	dc04      	bgt.n	800a1ca <__swbuf_r+0x42>
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f000 f92e 	bl	800a424 <_fflush_r>
 800a1c8:	bb30      	cbnz	r0, 800a218 <__swbuf_r+0x90>
 800a1ca:	68a3      	ldr	r3, [r4, #8]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	60a3      	str	r3, [r4, #8]
 800a1d0:	6823      	ldr	r3, [r4, #0]
 800a1d2:	1c5a      	adds	r2, r3, #1
 800a1d4:	6022      	str	r2, [r4, #0]
 800a1d6:	701e      	strb	r6, [r3, #0]
 800a1d8:	6963      	ldr	r3, [r4, #20]
 800a1da:	3001      	adds	r0, #1
 800a1dc:	4283      	cmp	r3, r0
 800a1de:	d004      	beq.n	800a1ea <__swbuf_r+0x62>
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	07db      	lsls	r3, r3, #31
 800a1e4:	d506      	bpl.n	800a1f4 <__swbuf_r+0x6c>
 800a1e6:	2e0a      	cmp	r6, #10
 800a1e8:	d104      	bne.n	800a1f4 <__swbuf_r+0x6c>
 800a1ea:	4621      	mov	r1, r4
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	f000 f919 	bl	800a424 <_fflush_r>
 800a1f2:	b988      	cbnz	r0, 800a218 <__swbuf_r+0x90>
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1f8:	4b0a      	ldr	r3, [pc, #40]	; (800a224 <__swbuf_r+0x9c>)
 800a1fa:	429c      	cmp	r4, r3
 800a1fc:	d101      	bne.n	800a202 <__swbuf_r+0x7a>
 800a1fe:	68ac      	ldr	r4, [r5, #8]
 800a200:	e7cf      	b.n	800a1a2 <__swbuf_r+0x1a>
 800a202:	4b09      	ldr	r3, [pc, #36]	; (800a228 <__swbuf_r+0xa0>)
 800a204:	429c      	cmp	r4, r3
 800a206:	bf08      	it	eq
 800a208:	68ec      	ldreq	r4, [r5, #12]
 800a20a:	e7ca      	b.n	800a1a2 <__swbuf_r+0x1a>
 800a20c:	4621      	mov	r1, r4
 800a20e:	4628      	mov	r0, r5
 800a210:	f000 f80c 	bl	800a22c <__swsetup_r>
 800a214:	2800      	cmp	r0, #0
 800a216:	d0cb      	beq.n	800a1b0 <__swbuf_r+0x28>
 800a218:	f04f 37ff 	mov.w	r7, #4294967295
 800a21c:	e7ea      	b.n	800a1f4 <__swbuf_r+0x6c>
 800a21e:	bf00      	nop
 800a220:	0800af4c 	.word	0x0800af4c
 800a224:	0800af6c 	.word	0x0800af6c
 800a228:	0800af2c 	.word	0x0800af2c

0800a22c <__swsetup_r>:
 800a22c:	4b32      	ldr	r3, [pc, #200]	; (800a2f8 <__swsetup_r+0xcc>)
 800a22e:	b570      	push	{r4, r5, r6, lr}
 800a230:	681d      	ldr	r5, [r3, #0]
 800a232:	4606      	mov	r6, r0
 800a234:	460c      	mov	r4, r1
 800a236:	b125      	cbz	r5, 800a242 <__swsetup_r+0x16>
 800a238:	69ab      	ldr	r3, [r5, #24]
 800a23a:	b913      	cbnz	r3, 800a242 <__swsetup_r+0x16>
 800a23c:	4628      	mov	r0, r5
 800a23e:	f000 f985 	bl	800a54c <__sinit>
 800a242:	4b2e      	ldr	r3, [pc, #184]	; (800a2fc <__swsetup_r+0xd0>)
 800a244:	429c      	cmp	r4, r3
 800a246:	d10f      	bne.n	800a268 <__swsetup_r+0x3c>
 800a248:	686c      	ldr	r4, [r5, #4]
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a250:	0719      	lsls	r1, r3, #28
 800a252:	d42c      	bmi.n	800a2ae <__swsetup_r+0x82>
 800a254:	06dd      	lsls	r5, r3, #27
 800a256:	d411      	bmi.n	800a27c <__swsetup_r+0x50>
 800a258:	2309      	movs	r3, #9
 800a25a:	6033      	str	r3, [r6, #0]
 800a25c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a260:	81a3      	strh	r3, [r4, #12]
 800a262:	f04f 30ff 	mov.w	r0, #4294967295
 800a266:	e03e      	b.n	800a2e6 <__swsetup_r+0xba>
 800a268:	4b25      	ldr	r3, [pc, #148]	; (800a300 <__swsetup_r+0xd4>)
 800a26a:	429c      	cmp	r4, r3
 800a26c:	d101      	bne.n	800a272 <__swsetup_r+0x46>
 800a26e:	68ac      	ldr	r4, [r5, #8]
 800a270:	e7eb      	b.n	800a24a <__swsetup_r+0x1e>
 800a272:	4b24      	ldr	r3, [pc, #144]	; (800a304 <__swsetup_r+0xd8>)
 800a274:	429c      	cmp	r4, r3
 800a276:	bf08      	it	eq
 800a278:	68ec      	ldreq	r4, [r5, #12]
 800a27a:	e7e6      	b.n	800a24a <__swsetup_r+0x1e>
 800a27c:	0758      	lsls	r0, r3, #29
 800a27e:	d512      	bpl.n	800a2a6 <__swsetup_r+0x7a>
 800a280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a282:	b141      	cbz	r1, 800a296 <__swsetup_r+0x6a>
 800a284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a288:	4299      	cmp	r1, r3
 800a28a:	d002      	beq.n	800a292 <__swsetup_r+0x66>
 800a28c:	4630      	mov	r0, r6
 800a28e:	f7ff fb25 	bl	80098dc <_free_r>
 800a292:	2300      	movs	r3, #0
 800a294:	6363      	str	r3, [r4, #52]	; 0x34
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a29c:	81a3      	strh	r3, [r4, #12]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	6063      	str	r3, [r4, #4]
 800a2a2:	6923      	ldr	r3, [r4, #16]
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	89a3      	ldrh	r3, [r4, #12]
 800a2a8:	f043 0308 	orr.w	r3, r3, #8
 800a2ac:	81a3      	strh	r3, [r4, #12]
 800a2ae:	6923      	ldr	r3, [r4, #16]
 800a2b0:	b94b      	cbnz	r3, 800a2c6 <__swsetup_r+0x9a>
 800a2b2:	89a3      	ldrh	r3, [r4, #12]
 800a2b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2bc:	d003      	beq.n	800a2c6 <__swsetup_r+0x9a>
 800a2be:	4621      	mov	r1, r4
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f000 fa09 	bl	800a6d8 <__smakebuf_r>
 800a2c6:	89a0      	ldrh	r0, [r4, #12]
 800a2c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2cc:	f010 0301 	ands.w	r3, r0, #1
 800a2d0:	d00a      	beq.n	800a2e8 <__swsetup_r+0xbc>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60a3      	str	r3, [r4, #8]
 800a2d6:	6963      	ldr	r3, [r4, #20]
 800a2d8:	425b      	negs	r3, r3
 800a2da:	61a3      	str	r3, [r4, #24]
 800a2dc:	6923      	ldr	r3, [r4, #16]
 800a2de:	b943      	cbnz	r3, 800a2f2 <__swsetup_r+0xc6>
 800a2e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2e4:	d1ba      	bne.n	800a25c <__swsetup_r+0x30>
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}
 800a2e8:	0781      	lsls	r1, r0, #30
 800a2ea:	bf58      	it	pl
 800a2ec:	6963      	ldrpl	r3, [r4, #20]
 800a2ee:	60a3      	str	r3, [r4, #8]
 800a2f0:	e7f4      	b.n	800a2dc <__swsetup_r+0xb0>
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	e7f7      	b.n	800a2e6 <__swsetup_r+0xba>
 800a2f6:	bf00      	nop
 800a2f8:	2000000c 	.word	0x2000000c
 800a2fc:	0800af4c 	.word	0x0800af4c
 800a300:	0800af6c 	.word	0x0800af6c
 800a304:	0800af2c 	.word	0x0800af2c

0800a308 <abort>:
 800a308:	b508      	push	{r3, lr}
 800a30a:	2006      	movs	r0, #6
 800a30c:	f000 fa54 	bl	800a7b8 <raise>
 800a310:	2001      	movs	r0, #1
 800a312:	f7f7 fef3 	bl	80020fc <_exit>
	...

0800a318 <__sflush_r>:
 800a318:	898a      	ldrh	r2, [r1, #12]
 800a31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a31e:	4605      	mov	r5, r0
 800a320:	0710      	lsls	r0, r2, #28
 800a322:	460c      	mov	r4, r1
 800a324:	d458      	bmi.n	800a3d8 <__sflush_r+0xc0>
 800a326:	684b      	ldr	r3, [r1, #4]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	dc05      	bgt.n	800a338 <__sflush_r+0x20>
 800a32c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a32e:	2b00      	cmp	r3, #0
 800a330:	dc02      	bgt.n	800a338 <__sflush_r+0x20>
 800a332:	2000      	movs	r0, #0
 800a334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a33a:	2e00      	cmp	r6, #0
 800a33c:	d0f9      	beq.n	800a332 <__sflush_r+0x1a>
 800a33e:	2300      	movs	r3, #0
 800a340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a344:	682f      	ldr	r7, [r5, #0]
 800a346:	602b      	str	r3, [r5, #0]
 800a348:	d032      	beq.n	800a3b0 <__sflush_r+0x98>
 800a34a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	075a      	lsls	r2, r3, #29
 800a350:	d505      	bpl.n	800a35e <__sflush_r+0x46>
 800a352:	6863      	ldr	r3, [r4, #4]
 800a354:	1ac0      	subs	r0, r0, r3
 800a356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a358:	b10b      	cbz	r3, 800a35e <__sflush_r+0x46>
 800a35a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a35c:	1ac0      	subs	r0, r0, r3
 800a35e:	2300      	movs	r3, #0
 800a360:	4602      	mov	r2, r0
 800a362:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a364:	6a21      	ldr	r1, [r4, #32]
 800a366:	4628      	mov	r0, r5
 800a368:	47b0      	blx	r6
 800a36a:	1c43      	adds	r3, r0, #1
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	d106      	bne.n	800a37e <__sflush_r+0x66>
 800a370:	6829      	ldr	r1, [r5, #0]
 800a372:	291d      	cmp	r1, #29
 800a374:	d82c      	bhi.n	800a3d0 <__sflush_r+0xb8>
 800a376:	4a2a      	ldr	r2, [pc, #168]	; (800a420 <__sflush_r+0x108>)
 800a378:	40ca      	lsrs	r2, r1
 800a37a:	07d6      	lsls	r6, r2, #31
 800a37c:	d528      	bpl.n	800a3d0 <__sflush_r+0xb8>
 800a37e:	2200      	movs	r2, #0
 800a380:	6062      	str	r2, [r4, #4]
 800a382:	04d9      	lsls	r1, r3, #19
 800a384:	6922      	ldr	r2, [r4, #16]
 800a386:	6022      	str	r2, [r4, #0]
 800a388:	d504      	bpl.n	800a394 <__sflush_r+0x7c>
 800a38a:	1c42      	adds	r2, r0, #1
 800a38c:	d101      	bne.n	800a392 <__sflush_r+0x7a>
 800a38e:	682b      	ldr	r3, [r5, #0]
 800a390:	b903      	cbnz	r3, 800a394 <__sflush_r+0x7c>
 800a392:	6560      	str	r0, [r4, #84]	; 0x54
 800a394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a396:	602f      	str	r7, [r5, #0]
 800a398:	2900      	cmp	r1, #0
 800a39a:	d0ca      	beq.n	800a332 <__sflush_r+0x1a>
 800a39c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3a0:	4299      	cmp	r1, r3
 800a3a2:	d002      	beq.n	800a3aa <__sflush_r+0x92>
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	f7ff fa99 	bl	80098dc <_free_r>
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a3ae:	e7c1      	b.n	800a334 <__sflush_r+0x1c>
 800a3b0:	6a21      	ldr	r1, [r4, #32]
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	47b0      	blx	r6
 800a3b8:	1c41      	adds	r1, r0, #1
 800a3ba:	d1c7      	bne.n	800a34c <__sflush_r+0x34>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d0c4      	beq.n	800a34c <__sflush_r+0x34>
 800a3c2:	2b1d      	cmp	r3, #29
 800a3c4:	d001      	beq.n	800a3ca <__sflush_r+0xb2>
 800a3c6:	2b16      	cmp	r3, #22
 800a3c8:	d101      	bne.n	800a3ce <__sflush_r+0xb6>
 800a3ca:	602f      	str	r7, [r5, #0]
 800a3cc:	e7b1      	b.n	800a332 <__sflush_r+0x1a>
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3d4:	81a3      	strh	r3, [r4, #12]
 800a3d6:	e7ad      	b.n	800a334 <__sflush_r+0x1c>
 800a3d8:	690f      	ldr	r7, [r1, #16]
 800a3da:	2f00      	cmp	r7, #0
 800a3dc:	d0a9      	beq.n	800a332 <__sflush_r+0x1a>
 800a3de:	0793      	lsls	r3, r2, #30
 800a3e0:	680e      	ldr	r6, [r1, #0]
 800a3e2:	bf08      	it	eq
 800a3e4:	694b      	ldreq	r3, [r1, #20]
 800a3e6:	600f      	str	r7, [r1, #0]
 800a3e8:	bf18      	it	ne
 800a3ea:	2300      	movne	r3, #0
 800a3ec:	eba6 0807 	sub.w	r8, r6, r7
 800a3f0:	608b      	str	r3, [r1, #8]
 800a3f2:	f1b8 0f00 	cmp.w	r8, #0
 800a3f6:	dd9c      	ble.n	800a332 <__sflush_r+0x1a>
 800a3f8:	6a21      	ldr	r1, [r4, #32]
 800a3fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3fc:	4643      	mov	r3, r8
 800a3fe:	463a      	mov	r2, r7
 800a400:	4628      	mov	r0, r5
 800a402:	47b0      	blx	r6
 800a404:	2800      	cmp	r0, #0
 800a406:	dc06      	bgt.n	800a416 <__sflush_r+0xfe>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a40e:	81a3      	strh	r3, [r4, #12]
 800a410:	f04f 30ff 	mov.w	r0, #4294967295
 800a414:	e78e      	b.n	800a334 <__sflush_r+0x1c>
 800a416:	4407      	add	r7, r0
 800a418:	eba8 0800 	sub.w	r8, r8, r0
 800a41c:	e7e9      	b.n	800a3f2 <__sflush_r+0xda>
 800a41e:	bf00      	nop
 800a420:	20400001 	.word	0x20400001

0800a424 <_fflush_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	690b      	ldr	r3, [r1, #16]
 800a428:	4605      	mov	r5, r0
 800a42a:	460c      	mov	r4, r1
 800a42c:	b913      	cbnz	r3, 800a434 <_fflush_r+0x10>
 800a42e:	2500      	movs	r5, #0
 800a430:	4628      	mov	r0, r5
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	b118      	cbz	r0, 800a43e <_fflush_r+0x1a>
 800a436:	6983      	ldr	r3, [r0, #24]
 800a438:	b90b      	cbnz	r3, 800a43e <_fflush_r+0x1a>
 800a43a:	f000 f887 	bl	800a54c <__sinit>
 800a43e:	4b14      	ldr	r3, [pc, #80]	; (800a490 <_fflush_r+0x6c>)
 800a440:	429c      	cmp	r4, r3
 800a442:	d11b      	bne.n	800a47c <_fflush_r+0x58>
 800a444:	686c      	ldr	r4, [r5, #4]
 800a446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0ef      	beq.n	800a42e <_fflush_r+0xa>
 800a44e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a450:	07d0      	lsls	r0, r2, #31
 800a452:	d404      	bmi.n	800a45e <_fflush_r+0x3a>
 800a454:	0599      	lsls	r1, r3, #22
 800a456:	d402      	bmi.n	800a45e <_fflush_r+0x3a>
 800a458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a45a:	f000 f915 	bl	800a688 <__retarget_lock_acquire_recursive>
 800a45e:	4628      	mov	r0, r5
 800a460:	4621      	mov	r1, r4
 800a462:	f7ff ff59 	bl	800a318 <__sflush_r>
 800a466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a468:	07da      	lsls	r2, r3, #31
 800a46a:	4605      	mov	r5, r0
 800a46c:	d4e0      	bmi.n	800a430 <_fflush_r+0xc>
 800a46e:	89a3      	ldrh	r3, [r4, #12]
 800a470:	059b      	lsls	r3, r3, #22
 800a472:	d4dd      	bmi.n	800a430 <_fflush_r+0xc>
 800a474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a476:	f000 f908 	bl	800a68a <__retarget_lock_release_recursive>
 800a47a:	e7d9      	b.n	800a430 <_fflush_r+0xc>
 800a47c:	4b05      	ldr	r3, [pc, #20]	; (800a494 <_fflush_r+0x70>)
 800a47e:	429c      	cmp	r4, r3
 800a480:	d101      	bne.n	800a486 <_fflush_r+0x62>
 800a482:	68ac      	ldr	r4, [r5, #8]
 800a484:	e7df      	b.n	800a446 <_fflush_r+0x22>
 800a486:	4b04      	ldr	r3, [pc, #16]	; (800a498 <_fflush_r+0x74>)
 800a488:	429c      	cmp	r4, r3
 800a48a:	bf08      	it	eq
 800a48c:	68ec      	ldreq	r4, [r5, #12]
 800a48e:	e7da      	b.n	800a446 <_fflush_r+0x22>
 800a490:	0800af4c 	.word	0x0800af4c
 800a494:	0800af6c 	.word	0x0800af6c
 800a498:	0800af2c 	.word	0x0800af2c

0800a49c <std>:
 800a49c:	2300      	movs	r3, #0
 800a49e:	b510      	push	{r4, lr}
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a4a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4aa:	6083      	str	r3, [r0, #8]
 800a4ac:	8181      	strh	r1, [r0, #12]
 800a4ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a4b0:	81c2      	strh	r2, [r0, #14]
 800a4b2:	6183      	str	r3, [r0, #24]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	2208      	movs	r2, #8
 800a4b8:	305c      	adds	r0, #92	; 0x5c
 800a4ba:	f7fb fdcb 	bl	8006054 <memset>
 800a4be:	4b05      	ldr	r3, [pc, #20]	; (800a4d4 <std+0x38>)
 800a4c0:	6263      	str	r3, [r4, #36]	; 0x24
 800a4c2:	4b05      	ldr	r3, [pc, #20]	; (800a4d8 <std+0x3c>)
 800a4c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4c6:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <std+0x40>)
 800a4c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4ca:	4b05      	ldr	r3, [pc, #20]	; (800a4e0 <std+0x44>)
 800a4cc:	6224      	str	r4, [r4, #32]
 800a4ce:	6323      	str	r3, [r4, #48]	; 0x30
 800a4d0:	bd10      	pop	{r4, pc}
 800a4d2:	bf00      	nop
 800a4d4:	0800a7f1 	.word	0x0800a7f1
 800a4d8:	0800a813 	.word	0x0800a813
 800a4dc:	0800a84b 	.word	0x0800a84b
 800a4e0:	0800a86f 	.word	0x0800a86f

0800a4e4 <_cleanup_r>:
 800a4e4:	4901      	ldr	r1, [pc, #4]	; (800a4ec <_cleanup_r+0x8>)
 800a4e6:	f000 b8af 	b.w	800a648 <_fwalk_reent>
 800a4ea:	bf00      	nop
 800a4ec:	0800a425 	.word	0x0800a425

0800a4f0 <__sfmoreglue>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	2268      	movs	r2, #104	; 0x68
 800a4f4:	1e4d      	subs	r5, r1, #1
 800a4f6:	4355      	muls	r5, r2
 800a4f8:	460e      	mov	r6, r1
 800a4fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4fe:	f7ff fa59 	bl	80099b4 <_malloc_r>
 800a502:	4604      	mov	r4, r0
 800a504:	b140      	cbz	r0, 800a518 <__sfmoreglue+0x28>
 800a506:	2100      	movs	r1, #0
 800a508:	e9c0 1600 	strd	r1, r6, [r0]
 800a50c:	300c      	adds	r0, #12
 800a50e:	60a0      	str	r0, [r4, #8]
 800a510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a514:	f7fb fd9e 	bl	8006054 <memset>
 800a518:	4620      	mov	r0, r4
 800a51a:	bd70      	pop	{r4, r5, r6, pc}

0800a51c <__sfp_lock_acquire>:
 800a51c:	4801      	ldr	r0, [pc, #4]	; (800a524 <__sfp_lock_acquire+0x8>)
 800a51e:	f000 b8b3 	b.w	800a688 <__retarget_lock_acquire_recursive>
 800a522:	bf00      	nop
 800a524:	20000745 	.word	0x20000745

0800a528 <__sfp_lock_release>:
 800a528:	4801      	ldr	r0, [pc, #4]	; (800a530 <__sfp_lock_release+0x8>)
 800a52a:	f000 b8ae 	b.w	800a68a <__retarget_lock_release_recursive>
 800a52e:	bf00      	nop
 800a530:	20000745 	.word	0x20000745

0800a534 <__sinit_lock_acquire>:
 800a534:	4801      	ldr	r0, [pc, #4]	; (800a53c <__sinit_lock_acquire+0x8>)
 800a536:	f000 b8a7 	b.w	800a688 <__retarget_lock_acquire_recursive>
 800a53a:	bf00      	nop
 800a53c:	20000746 	.word	0x20000746

0800a540 <__sinit_lock_release>:
 800a540:	4801      	ldr	r0, [pc, #4]	; (800a548 <__sinit_lock_release+0x8>)
 800a542:	f000 b8a2 	b.w	800a68a <__retarget_lock_release_recursive>
 800a546:	bf00      	nop
 800a548:	20000746 	.word	0x20000746

0800a54c <__sinit>:
 800a54c:	b510      	push	{r4, lr}
 800a54e:	4604      	mov	r4, r0
 800a550:	f7ff fff0 	bl	800a534 <__sinit_lock_acquire>
 800a554:	69a3      	ldr	r3, [r4, #24]
 800a556:	b11b      	cbz	r3, 800a560 <__sinit+0x14>
 800a558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a55c:	f7ff bff0 	b.w	800a540 <__sinit_lock_release>
 800a560:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a564:	6523      	str	r3, [r4, #80]	; 0x50
 800a566:	4b13      	ldr	r3, [pc, #76]	; (800a5b4 <__sinit+0x68>)
 800a568:	4a13      	ldr	r2, [pc, #76]	; (800a5b8 <__sinit+0x6c>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a56e:	42a3      	cmp	r3, r4
 800a570:	bf04      	itt	eq
 800a572:	2301      	moveq	r3, #1
 800a574:	61a3      	streq	r3, [r4, #24]
 800a576:	4620      	mov	r0, r4
 800a578:	f000 f820 	bl	800a5bc <__sfp>
 800a57c:	6060      	str	r0, [r4, #4]
 800a57e:	4620      	mov	r0, r4
 800a580:	f000 f81c 	bl	800a5bc <__sfp>
 800a584:	60a0      	str	r0, [r4, #8]
 800a586:	4620      	mov	r0, r4
 800a588:	f000 f818 	bl	800a5bc <__sfp>
 800a58c:	2200      	movs	r2, #0
 800a58e:	60e0      	str	r0, [r4, #12]
 800a590:	2104      	movs	r1, #4
 800a592:	6860      	ldr	r0, [r4, #4]
 800a594:	f7ff ff82 	bl	800a49c <std>
 800a598:	68a0      	ldr	r0, [r4, #8]
 800a59a:	2201      	movs	r2, #1
 800a59c:	2109      	movs	r1, #9
 800a59e:	f7ff ff7d 	bl	800a49c <std>
 800a5a2:	68e0      	ldr	r0, [r4, #12]
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	2112      	movs	r1, #18
 800a5a8:	f7ff ff78 	bl	800a49c <std>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	61a3      	str	r3, [r4, #24]
 800a5b0:	e7d2      	b.n	800a558 <__sinit+0xc>
 800a5b2:	bf00      	nop
 800a5b4:	0800aae4 	.word	0x0800aae4
 800a5b8:	0800a4e5 	.word	0x0800a4e5

0800a5bc <__sfp>:
 800a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5be:	4607      	mov	r7, r0
 800a5c0:	f7ff ffac 	bl	800a51c <__sfp_lock_acquire>
 800a5c4:	4b1e      	ldr	r3, [pc, #120]	; (800a640 <__sfp+0x84>)
 800a5c6:	681e      	ldr	r6, [r3, #0]
 800a5c8:	69b3      	ldr	r3, [r6, #24]
 800a5ca:	b913      	cbnz	r3, 800a5d2 <__sfp+0x16>
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7ff ffbd 	bl	800a54c <__sinit>
 800a5d2:	3648      	adds	r6, #72	; 0x48
 800a5d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	d503      	bpl.n	800a5e4 <__sfp+0x28>
 800a5dc:	6833      	ldr	r3, [r6, #0]
 800a5de:	b30b      	cbz	r3, 800a624 <__sfp+0x68>
 800a5e0:	6836      	ldr	r6, [r6, #0]
 800a5e2:	e7f7      	b.n	800a5d4 <__sfp+0x18>
 800a5e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5e8:	b9d5      	cbnz	r5, 800a620 <__sfp+0x64>
 800a5ea:	4b16      	ldr	r3, [pc, #88]	; (800a644 <__sfp+0x88>)
 800a5ec:	60e3      	str	r3, [r4, #12]
 800a5ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5f2:	6665      	str	r5, [r4, #100]	; 0x64
 800a5f4:	f000 f847 	bl	800a686 <__retarget_lock_init_recursive>
 800a5f8:	f7ff ff96 	bl	800a528 <__sfp_lock_release>
 800a5fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a604:	6025      	str	r5, [r4, #0]
 800a606:	61a5      	str	r5, [r4, #24]
 800a608:	2208      	movs	r2, #8
 800a60a:	4629      	mov	r1, r5
 800a60c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a610:	f7fb fd20 	bl	8006054 <memset>
 800a614:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a618:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a61c:	4620      	mov	r0, r4
 800a61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a620:	3468      	adds	r4, #104	; 0x68
 800a622:	e7d9      	b.n	800a5d8 <__sfp+0x1c>
 800a624:	2104      	movs	r1, #4
 800a626:	4638      	mov	r0, r7
 800a628:	f7ff ff62 	bl	800a4f0 <__sfmoreglue>
 800a62c:	4604      	mov	r4, r0
 800a62e:	6030      	str	r0, [r6, #0]
 800a630:	2800      	cmp	r0, #0
 800a632:	d1d5      	bne.n	800a5e0 <__sfp+0x24>
 800a634:	f7ff ff78 	bl	800a528 <__sfp_lock_release>
 800a638:	230c      	movs	r3, #12
 800a63a:	603b      	str	r3, [r7, #0]
 800a63c:	e7ee      	b.n	800a61c <__sfp+0x60>
 800a63e:	bf00      	nop
 800a640:	0800aae4 	.word	0x0800aae4
 800a644:	ffff0001 	.word	0xffff0001

0800a648 <_fwalk_reent>:
 800a648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a64c:	4606      	mov	r6, r0
 800a64e:	4688      	mov	r8, r1
 800a650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a654:	2700      	movs	r7, #0
 800a656:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a65a:	f1b9 0901 	subs.w	r9, r9, #1
 800a65e:	d505      	bpl.n	800a66c <_fwalk_reent+0x24>
 800a660:	6824      	ldr	r4, [r4, #0]
 800a662:	2c00      	cmp	r4, #0
 800a664:	d1f7      	bne.n	800a656 <_fwalk_reent+0xe>
 800a666:	4638      	mov	r0, r7
 800a668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a66c:	89ab      	ldrh	r3, [r5, #12]
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d907      	bls.n	800a682 <_fwalk_reent+0x3a>
 800a672:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a676:	3301      	adds	r3, #1
 800a678:	d003      	beq.n	800a682 <_fwalk_reent+0x3a>
 800a67a:	4629      	mov	r1, r5
 800a67c:	4630      	mov	r0, r6
 800a67e:	47c0      	blx	r8
 800a680:	4307      	orrs	r7, r0
 800a682:	3568      	adds	r5, #104	; 0x68
 800a684:	e7e9      	b.n	800a65a <_fwalk_reent+0x12>

0800a686 <__retarget_lock_init_recursive>:
 800a686:	4770      	bx	lr

0800a688 <__retarget_lock_acquire_recursive>:
 800a688:	4770      	bx	lr

0800a68a <__retarget_lock_release_recursive>:
 800a68a:	4770      	bx	lr

0800a68c <__swhatbuf_r>:
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	460e      	mov	r6, r1
 800a690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a694:	2900      	cmp	r1, #0
 800a696:	b096      	sub	sp, #88	; 0x58
 800a698:	4614      	mov	r4, r2
 800a69a:	461d      	mov	r5, r3
 800a69c:	da08      	bge.n	800a6b0 <__swhatbuf_r+0x24>
 800a69e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	602a      	str	r2, [r5, #0]
 800a6a6:	061a      	lsls	r2, r3, #24
 800a6a8:	d410      	bmi.n	800a6cc <__swhatbuf_r+0x40>
 800a6aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6ae:	e00e      	b.n	800a6ce <__swhatbuf_r+0x42>
 800a6b0:	466a      	mov	r2, sp
 800a6b2:	f000 f903 	bl	800a8bc <_fstat_r>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	dbf1      	blt.n	800a69e <__swhatbuf_r+0x12>
 800a6ba:	9a01      	ldr	r2, [sp, #4]
 800a6bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6c4:	425a      	negs	r2, r3
 800a6c6:	415a      	adcs	r2, r3
 800a6c8:	602a      	str	r2, [r5, #0]
 800a6ca:	e7ee      	b.n	800a6aa <__swhatbuf_r+0x1e>
 800a6cc:	2340      	movs	r3, #64	; 0x40
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	b016      	add	sp, #88	; 0x58
 800a6d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6d8 <__smakebuf_r>:
 800a6d8:	898b      	ldrh	r3, [r1, #12]
 800a6da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6dc:	079d      	lsls	r5, r3, #30
 800a6de:	4606      	mov	r6, r0
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	d507      	bpl.n	800a6f4 <__smakebuf_r+0x1c>
 800a6e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	6123      	str	r3, [r4, #16]
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	6163      	str	r3, [r4, #20]
 800a6f0:	b002      	add	sp, #8
 800a6f2:	bd70      	pop	{r4, r5, r6, pc}
 800a6f4:	ab01      	add	r3, sp, #4
 800a6f6:	466a      	mov	r2, sp
 800a6f8:	f7ff ffc8 	bl	800a68c <__swhatbuf_r>
 800a6fc:	9900      	ldr	r1, [sp, #0]
 800a6fe:	4605      	mov	r5, r0
 800a700:	4630      	mov	r0, r6
 800a702:	f7ff f957 	bl	80099b4 <_malloc_r>
 800a706:	b948      	cbnz	r0, 800a71c <__smakebuf_r+0x44>
 800a708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a70c:	059a      	lsls	r2, r3, #22
 800a70e:	d4ef      	bmi.n	800a6f0 <__smakebuf_r+0x18>
 800a710:	f023 0303 	bic.w	r3, r3, #3
 800a714:	f043 0302 	orr.w	r3, r3, #2
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	e7e3      	b.n	800a6e4 <__smakebuf_r+0xc>
 800a71c:	4b0d      	ldr	r3, [pc, #52]	; (800a754 <__smakebuf_r+0x7c>)
 800a71e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	6020      	str	r0, [r4, #0]
 800a724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	9b00      	ldr	r3, [sp, #0]
 800a72c:	6163      	str	r3, [r4, #20]
 800a72e:	9b01      	ldr	r3, [sp, #4]
 800a730:	6120      	str	r0, [r4, #16]
 800a732:	b15b      	cbz	r3, 800a74c <__smakebuf_r+0x74>
 800a734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a738:	4630      	mov	r0, r6
 800a73a:	f000 f8d1 	bl	800a8e0 <_isatty_r>
 800a73e:	b128      	cbz	r0, 800a74c <__smakebuf_r+0x74>
 800a740:	89a3      	ldrh	r3, [r4, #12]
 800a742:	f023 0303 	bic.w	r3, r3, #3
 800a746:	f043 0301 	orr.w	r3, r3, #1
 800a74a:	81a3      	strh	r3, [r4, #12]
 800a74c:	89a0      	ldrh	r0, [r4, #12]
 800a74e:	4305      	orrs	r5, r0
 800a750:	81a5      	strh	r5, [r4, #12]
 800a752:	e7cd      	b.n	800a6f0 <__smakebuf_r+0x18>
 800a754:	0800a4e5 	.word	0x0800a4e5

0800a758 <_malloc_usable_size_r>:
 800a758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a75c:	1f18      	subs	r0, r3, #4
 800a75e:	2b00      	cmp	r3, #0
 800a760:	bfbc      	itt	lt
 800a762:	580b      	ldrlt	r3, [r1, r0]
 800a764:	18c0      	addlt	r0, r0, r3
 800a766:	4770      	bx	lr

0800a768 <_raise_r>:
 800a768:	291f      	cmp	r1, #31
 800a76a:	b538      	push	{r3, r4, r5, lr}
 800a76c:	4604      	mov	r4, r0
 800a76e:	460d      	mov	r5, r1
 800a770:	d904      	bls.n	800a77c <_raise_r+0x14>
 800a772:	2316      	movs	r3, #22
 800a774:	6003      	str	r3, [r0, #0]
 800a776:	f04f 30ff 	mov.w	r0, #4294967295
 800a77a:	bd38      	pop	{r3, r4, r5, pc}
 800a77c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a77e:	b112      	cbz	r2, 800a786 <_raise_r+0x1e>
 800a780:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a784:	b94b      	cbnz	r3, 800a79a <_raise_r+0x32>
 800a786:	4620      	mov	r0, r4
 800a788:	f000 f830 	bl	800a7ec <_getpid_r>
 800a78c:	462a      	mov	r2, r5
 800a78e:	4601      	mov	r1, r0
 800a790:	4620      	mov	r0, r4
 800a792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a796:	f000 b817 	b.w	800a7c8 <_kill_r>
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d00a      	beq.n	800a7b4 <_raise_r+0x4c>
 800a79e:	1c59      	adds	r1, r3, #1
 800a7a0:	d103      	bne.n	800a7aa <_raise_r+0x42>
 800a7a2:	2316      	movs	r3, #22
 800a7a4:	6003      	str	r3, [r0, #0]
 800a7a6:	2001      	movs	r0, #1
 800a7a8:	e7e7      	b.n	800a77a <_raise_r+0x12>
 800a7aa:	2400      	movs	r4, #0
 800a7ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	4798      	blx	r3
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	e7e0      	b.n	800a77a <_raise_r+0x12>

0800a7b8 <raise>:
 800a7b8:	4b02      	ldr	r3, [pc, #8]	; (800a7c4 <raise+0xc>)
 800a7ba:	4601      	mov	r1, r0
 800a7bc:	6818      	ldr	r0, [r3, #0]
 800a7be:	f7ff bfd3 	b.w	800a768 <_raise_r>
 800a7c2:	bf00      	nop
 800a7c4:	2000000c 	.word	0x2000000c

0800a7c8 <_kill_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	4d07      	ldr	r5, [pc, #28]	; (800a7e8 <_kill_r+0x20>)
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	4608      	mov	r0, r1
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	602b      	str	r3, [r5, #0]
 800a7d6:	f7f7 fc81 	bl	80020dc <_kill>
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	d102      	bne.n	800a7e4 <_kill_r+0x1c>
 800a7de:	682b      	ldr	r3, [r5, #0]
 800a7e0:	b103      	cbz	r3, 800a7e4 <_kill_r+0x1c>
 800a7e2:	6023      	str	r3, [r4, #0]
 800a7e4:	bd38      	pop	{r3, r4, r5, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20000740 	.word	0x20000740

0800a7ec <_getpid_r>:
 800a7ec:	f7f7 bc6e 	b.w	80020cc <_getpid>

0800a7f0 <__sread>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7f8:	f000 f894 	bl	800a924 <_read_r>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	bfab      	itete	ge
 800a800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a802:	89a3      	ldrhlt	r3, [r4, #12]
 800a804:	181b      	addge	r3, r3, r0
 800a806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a80a:	bfac      	ite	ge
 800a80c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a80e:	81a3      	strhlt	r3, [r4, #12]
 800a810:	bd10      	pop	{r4, pc}

0800a812 <__swrite>:
 800a812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a816:	461f      	mov	r7, r3
 800a818:	898b      	ldrh	r3, [r1, #12]
 800a81a:	05db      	lsls	r3, r3, #23
 800a81c:	4605      	mov	r5, r0
 800a81e:	460c      	mov	r4, r1
 800a820:	4616      	mov	r6, r2
 800a822:	d505      	bpl.n	800a830 <__swrite+0x1e>
 800a824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a828:	2302      	movs	r3, #2
 800a82a:	2200      	movs	r2, #0
 800a82c:	f000 f868 	bl	800a900 <_lseek_r>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a83a:	81a3      	strh	r3, [r4, #12]
 800a83c:	4632      	mov	r2, r6
 800a83e:	463b      	mov	r3, r7
 800a840:	4628      	mov	r0, r5
 800a842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a846:	f000 b817 	b.w	800a878 <_write_r>

0800a84a <__sseek>:
 800a84a:	b510      	push	{r4, lr}
 800a84c:	460c      	mov	r4, r1
 800a84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a852:	f000 f855 	bl	800a900 <_lseek_r>
 800a856:	1c43      	adds	r3, r0, #1
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	bf15      	itete	ne
 800a85c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a85e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a866:	81a3      	strheq	r3, [r4, #12]
 800a868:	bf18      	it	ne
 800a86a:	81a3      	strhne	r3, [r4, #12]
 800a86c:	bd10      	pop	{r4, pc}

0800a86e <__sclose>:
 800a86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a872:	f000 b813 	b.w	800a89c <_close_r>
	...

0800a878 <_write_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	4d07      	ldr	r5, [pc, #28]	; (800a898 <_write_r+0x20>)
 800a87c:	4604      	mov	r4, r0
 800a87e:	4608      	mov	r0, r1
 800a880:	4611      	mov	r1, r2
 800a882:	2200      	movs	r2, #0
 800a884:	602a      	str	r2, [r5, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	f7f7 fc5f 	bl	800214a <_write>
 800a88c:	1c43      	adds	r3, r0, #1
 800a88e:	d102      	bne.n	800a896 <_write_r+0x1e>
 800a890:	682b      	ldr	r3, [r5, #0]
 800a892:	b103      	cbz	r3, 800a896 <_write_r+0x1e>
 800a894:	6023      	str	r3, [r4, #0]
 800a896:	bd38      	pop	{r3, r4, r5, pc}
 800a898:	20000740 	.word	0x20000740

0800a89c <_close_r>:
 800a89c:	b538      	push	{r3, r4, r5, lr}
 800a89e:	4d06      	ldr	r5, [pc, #24]	; (800a8b8 <_close_r+0x1c>)
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	4608      	mov	r0, r1
 800a8a6:	602b      	str	r3, [r5, #0]
 800a8a8:	f7f7 fc6b 	bl	8002182 <_close>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	d102      	bne.n	800a8b6 <_close_r+0x1a>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	b103      	cbz	r3, 800a8b6 <_close_r+0x1a>
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	20000740 	.word	0x20000740

0800a8bc <_fstat_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	4d07      	ldr	r5, [pc, #28]	; (800a8dc <_fstat_r+0x20>)
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	4608      	mov	r0, r1
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	602b      	str	r3, [r5, #0]
 800a8ca:	f7f7 fc66 	bl	800219a <_fstat>
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	d102      	bne.n	800a8d8 <_fstat_r+0x1c>
 800a8d2:	682b      	ldr	r3, [r5, #0]
 800a8d4:	b103      	cbz	r3, 800a8d8 <_fstat_r+0x1c>
 800a8d6:	6023      	str	r3, [r4, #0]
 800a8d8:	bd38      	pop	{r3, r4, r5, pc}
 800a8da:	bf00      	nop
 800a8dc:	20000740 	.word	0x20000740

0800a8e0 <_isatty_r>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	4d06      	ldr	r5, [pc, #24]	; (800a8fc <_isatty_r+0x1c>)
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	4608      	mov	r0, r1
 800a8ea:	602b      	str	r3, [r5, #0]
 800a8ec:	f7f7 fc65 	bl	80021ba <_isatty>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d102      	bne.n	800a8fa <_isatty_r+0x1a>
 800a8f4:	682b      	ldr	r3, [r5, #0]
 800a8f6:	b103      	cbz	r3, 800a8fa <_isatty_r+0x1a>
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	20000740 	.word	0x20000740

0800a900 <_lseek_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d07      	ldr	r5, [pc, #28]	; (800a920 <_lseek_r+0x20>)
 800a904:	4604      	mov	r4, r0
 800a906:	4608      	mov	r0, r1
 800a908:	4611      	mov	r1, r2
 800a90a:	2200      	movs	r2, #0
 800a90c:	602a      	str	r2, [r5, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	f7f7 fc5e 	bl	80021d0 <_lseek>
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d102      	bne.n	800a91e <_lseek_r+0x1e>
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	b103      	cbz	r3, 800a91e <_lseek_r+0x1e>
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	20000740 	.word	0x20000740

0800a924 <_read_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4d07      	ldr	r5, [pc, #28]	; (800a944 <_read_r+0x20>)
 800a928:	4604      	mov	r4, r0
 800a92a:	4608      	mov	r0, r1
 800a92c:	4611      	mov	r1, r2
 800a92e:	2200      	movs	r2, #0
 800a930:	602a      	str	r2, [r5, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	f7f7 fbec 	bl	8002110 <_read>
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	d102      	bne.n	800a942 <_read_r+0x1e>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	b103      	cbz	r3, 800a942 <_read_r+0x1e>
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	bd38      	pop	{r3, r4, r5, pc}
 800a944:	20000740 	.word	0x20000740

0800a948 <_init>:
 800a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94a:	bf00      	nop
 800a94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94e:	bc08      	pop	{r3}
 800a950:	469e      	mov	lr, r3
 800a952:	4770      	bx	lr

0800a954 <_fini>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	bf00      	nop
 800a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95a:	bc08      	pop	{r3}
 800a95c:	469e      	mov	lr, r3
 800a95e:	4770      	bx	lr
